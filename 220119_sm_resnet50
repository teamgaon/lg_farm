{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/teamgaon/lg_farm/blob/main/220119_sm_resnet50\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!nvidia-smi\n",
        "#k80 -> T4 -> P100"
      ],
      "metadata": {
        "id": "PFyBAlGv8ipZ",
        "outputId": "adf2a950-c80d-4ca9-a5ac-db5dfa0eddb3",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Wed Jan 19 06:11:08 2022       \n",
            "+-----------------------------------------------------------------------------+\n",
            "| NVIDIA-SMI 495.46       Driver Version: 460.32.03    CUDA Version: 11.2     |\n",
            "|-------------------------------+----------------------+----------------------+\n",
            "| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n",
            "| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n",
            "|                               |                      |               MIG M. |\n",
            "|===============================+======================+======================|\n",
            "|   0  Tesla P100-PCIE...  Off  | 00000000:00:04.0 Off |                    0 |\n",
            "| N/A   34C    P0    27W / 250W |      0MiB / 16280MiB |      0%      Default |\n",
            "|                               |                      |                  N/A |\n",
            "+-------------------------------+----------------------+----------------------+\n",
            "                                                                               \n",
            "+-----------------------------------------------------------------------------+\n",
            "| Processes:                                                                  |\n",
            "|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |\n",
            "|        ID   ID                                                   Usage      |\n",
            "|=============================================================================|\n",
            "|  No running processes found                                                 |\n",
            "+-----------------------------------------------------------------------------+\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XvQ6Yb3gjfN-"
      },
      "source": [
        "# 사용 패키지"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "id": "3Bb67qFPjfN_"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import cv2\n",
        "from tqdm import tqdm\n",
        "from glob import glob\n",
        "import os\n",
        "import json\n",
        "import torch\n",
        "from torch import nn\n",
        "from torchvision import models\n",
        "from torch.utils.data import Dataset\n",
        "from sklearn.metrics import f1_score\n",
        "from sklearn.model_selection import train_test_split"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "metadata": {
        "id": "U4tHvrdG4eI5",
        "outputId": "1dbb1893-6b80-468c-a8aa-a2fd5f2f7ce8",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!unzip /content/drive/MyDrive/LG/train.zip"
      ],
      "metadata": {
        "id": "y3biHrLm9rn-",
        "outputId": "71d83b98-c2e9-4010-edbf-a148a7413322",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1;30;43m스트리밍 출력 내용이 길어서 마지막 5000줄이 삭제되었습니다.\u001b[0m\n",
            "   creating: train/55844/\n",
            "  inflating: train/55844/55844.csv   \n",
            "  inflating: train/55844/55844.jpg   \n",
            "  inflating: train/55844/55844.json  \n",
            "   creating: train/55847/\n",
            "  inflating: train/55847/55847.csv   \n",
            "  inflating: train/55847/55847.jpg   \n",
            "  inflating: train/55847/55847.json  \n",
            "   creating: train/55848/\n",
            "  inflating: train/55848/55848.csv   \n",
            "  inflating: train/55848/55848.jpg   \n",
            "  inflating: train/55848/55848.json  \n",
            "   creating: train/55858/\n",
            "  inflating: train/55858/55858.csv   \n",
            "  inflating: train/55858/55858.jpg   \n",
            "  inflating: train/55858/55858.json  \n",
            "   creating: train/55870/\n",
            "  inflating: train/55870/55870.csv   \n",
            "  inflating: train/55870/55870.jpg   \n",
            "  inflating: train/55870/55870.json  \n",
            "   creating: train/55889/\n",
            "  inflating: train/55889/55889.csv   \n",
            "  inflating: train/55889/55889.jpg   \n",
            "  inflating: train/55889/55889.json  \n",
            "   creating: train/55895/\n",
            "  inflating: train/55895/55895.csv   \n",
            "  inflating: train/55895/55895.jpg   \n",
            "  inflating: train/55895/55895.json  \n",
            "   creating: train/55905/\n",
            "  inflating: train/55905/55905.csv   \n",
            "  inflating: train/55905/55905.jpg   \n",
            "  inflating: train/55905/55905.json  \n",
            "   creating: train/55906/\n",
            "  inflating: train/55906/55906.csv   \n",
            "  inflating: train/55906/55906.jpg   \n",
            "  inflating: train/55906/55906.json  \n",
            "   creating: train/55913/\n",
            "  inflating: train/55913/55913.csv   \n",
            "  inflating: train/55913/55913.jpg   \n",
            "  inflating: train/55913/55913.json  \n",
            "   creating: train/55914/\n",
            "  inflating: train/55914/55914.csv   \n",
            "  inflating: train/55914/55914.jpg   \n",
            "  inflating: train/55914/55914.json  \n",
            "   creating: train/55922/\n",
            "  inflating: train/55922/55922.csv   \n",
            "  inflating: train/55922/55922.jpg   \n",
            "  inflating: train/55922/55922.json  \n",
            "   creating: train/55945/\n",
            "  inflating: train/55945/55945.csv   \n",
            "  inflating: train/55945/55945.jpg   \n",
            "  inflating: train/55945/55945.json  \n",
            "   creating: train/55958/\n",
            "  inflating: train/55958/55958.csv   \n",
            "  inflating: train/55958/55958.jpg   \n",
            "  inflating: train/55958/55958.json  \n",
            "   creating: train/56017/\n",
            "  inflating: train/56017/56017.csv   \n",
            "  inflating: train/56017/56017.jpg   \n",
            "  inflating: train/56017/56017.json  \n",
            "   creating: train/56027/\n",
            "  inflating: train/56027/56027.csv   \n",
            "  inflating: train/56027/56027.jpg   \n",
            "  inflating: train/56027/56027.json  \n",
            "   creating: train/56044/\n",
            "  inflating: train/56044/56044.csv   \n",
            "  inflating: train/56044/56044.jpg   \n",
            "  inflating: train/56044/56044.json  \n",
            "   creating: train/56053/\n",
            "  inflating: train/56053/56053.csv   \n",
            "  inflating: train/56053/56053.jpg   \n",
            "  inflating: train/56053/56053.json  \n",
            "   creating: train/56068/\n",
            "  inflating: train/56068/56068.csv   \n",
            "  inflating: train/56068/56068.jpg   \n",
            "  inflating: train/56068/56068.json  \n",
            "   creating: train/56069/\n",
            "  inflating: train/56069/56069.csv   \n",
            "  inflating: train/56069/56069.jpg   \n",
            "  inflating: train/56069/56069.json  \n",
            "   creating: train/56081/\n",
            "  inflating: train/56081/56081.csv   \n",
            "  inflating: train/56081/56081.jpg   \n",
            "  inflating: train/56081/56081.json  \n",
            "   creating: train/56091/\n",
            "  inflating: train/56091/56091.csv   \n",
            "  inflating: train/56091/56091.jpg   \n",
            "  inflating: train/56091/56091.json  \n",
            "   creating: train/56108/\n",
            "  inflating: train/56108/56108.csv   \n",
            "  inflating: train/56108/56108.jpg   \n",
            "  inflating: train/56108/56108.json  \n",
            "   creating: train/56123/\n",
            "  inflating: train/56123/56123.csv   \n",
            "  inflating: train/56123/56123.jpg   \n",
            "  inflating: train/56123/56123.json  \n",
            "   creating: train/56139/\n",
            "  inflating: train/56139/56139.csv   \n",
            "  inflating: train/56139/56139.jpg   \n",
            "  inflating: train/56139/56139.json  \n",
            "   creating: train/56141/\n",
            "  inflating: train/56141/56141.csv   \n",
            "  inflating: train/56141/56141.jpg   \n",
            "  inflating: train/56141/56141.json  \n",
            "   creating: train/56152/\n",
            "  inflating: train/56152/56152.csv   \n",
            "  inflating: train/56152/56152.jpg   \n",
            "  inflating: train/56152/56152.json  \n",
            "   creating: train/56161/\n",
            "  inflating: train/56161/56161.csv   \n",
            "  inflating: train/56161/56161.jpg   \n",
            "  inflating: train/56161/56161.json  \n",
            "   creating: train/56165/\n",
            "  inflating: train/56165/56165.csv   \n",
            "  inflating: train/56165/56165.jpg   \n",
            "  inflating: train/56165/56165.json  \n",
            "   creating: train/56166/\n",
            "  inflating: train/56166/56166.csv   \n",
            "  inflating: train/56166/56166.jpg   \n",
            "  inflating: train/56166/56166.json  \n",
            "   creating: train/56174/\n",
            "  inflating: train/56174/56174.csv   \n",
            "  inflating: train/56174/56174.jpg   \n",
            "  inflating: train/56174/56174.json  \n",
            "   creating: train/56176/\n",
            "  inflating: train/56176/56176.csv   \n",
            "  inflating: train/56176/56176.jpg   \n",
            "  inflating: train/56176/56176.json  \n",
            "   creating: train/56180/\n",
            "  inflating: train/56180/56180.csv   \n",
            "  inflating: train/56180/56180.jpg   \n",
            "  inflating: train/56180/56180.json  \n",
            "   creating: train/56198/\n",
            "  inflating: train/56198/56198.csv   \n",
            "  inflating: train/56198/56198.jpg   \n",
            "  inflating: train/56198/56198.json  \n",
            "   creating: train/56207/\n",
            "  inflating: train/56207/56207.csv   \n",
            "  inflating: train/56207/56207.jpg   \n",
            "  inflating: train/56207/56207.json  \n",
            "   creating: train/56215/\n",
            "  inflating: train/56215/56215.csv   \n",
            "  inflating: train/56215/56215.jpg   \n",
            "  inflating: train/56215/56215.json  \n",
            "   creating: train/56219/\n",
            "  inflating: train/56219/56219.csv   \n",
            "  inflating: train/56219/56219.jpg   \n",
            "  inflating: train/56219/56219.json  \n",
            "   creating: train/56238/\n",
            "  inflating: train/56238/56238.csv   \n",
            "  inflating: train/56238/56238.jpg   \n",
            "  inflating: train/56238/56238.json  \n",
            "   creating: train/56242/\n",
            "  inflating: train/56242/56242.csv   \n",
            "  inflating: train/56242/56242.jpg   \n",
            "  inflating: train/56242/56242.json  \n",
            "   creating: train/56256/\n",
            "  inflating: train/56256/56256.csv   \n",
            "  inflating: train/56256/56256.jpg   \n",
            "  inflating: train/56256/56256.json  \n",
            "   creating: train/56264/\n",
            "  inflating: train/56264/56264.csv   \n",
            "  inflating: train/56264/56264.jpg   \n",
            "  inflating: train/56264/56264.json  \n",
            "   creating: train/56269/\n",
            "  inflating: train/56269/56269.csv   \n",
            "  inflating: train/56269/56269.jpg   \n",
            "  inflating: train/56269/56269.json  \n",
            "   creating: train/56271/\n",
            "  inflating: train/56271/56271.csv   \n",
            "  inflating: train/56271/56271.jpg   \n",
            "  inflating: train/56271/56271.json  \n",
            "   creating: train/56307/\n",
            "  inflating: train/56307/56307.csv   \n",
            "  inflating: train/56307/56307.jpg   \n",
            "  inflating: train/56307/56307.json  \n",
            "   creating: train/56313/\n",
            "  inflating: train/56313/56313.csv   \n",
            "  inflating: train/56313/56313.jpg   \n",
            "  inflating: train/56313/56313.json  \n",
            "   creating: train/56317/\n",
            "  inflating: train/56317/56317.csv   \n",
            "  inflating: train/56317/56317.jpg   \n",
            "  inflating: train/56317/56317.json  \n",
            "   creating: train/56318/\n",
            "  inflating: train/56318/56318.csv   \n",
            "  inflating: train/56318/56318.jpg   \n",
            "  inflating: train/56318/56318.json  \n",
            "   creating: train/56320/\n",
            "  inflating: train/56320/56320.csv   \n",
            "  inflating: train/56320/56320.jpg   \n",
            "  inflating: train/56320/56320.json  \n",
            "   creating: train/56324/\n",
            "  inflating: train/56324/56324.csv   \n",
            "  inflating: train/56324/56324.jpg   \n",
            "  inflating: train/56324/56324.json  \n",
            "   creating: train/56328/\n",
            "  inflating: train/56328/56328.csv   \n",
            "  inflating: train/56328/56328.jpg   \n",
            "  inflating: train/56328/56328.json  \n",
            "   creating: train/56330/\n",
            "  inflating: train/56330/56330.csv   \n",
            "  inflating: train/56330/56330.jpg   \n",
            "  inflating: train/56330/56330.json  \n",
            "   creating: train/56336/\n",
            "  inflating: train/56336/56336.csv   \n",
            "  inflating: train/56336/56336.jpg   \n",
            "  inflating: train/56336/56336.json  \n",
            "   creating: train/56340/\n",
            "  inflating: train/56340/56340.csv   \n",
            "  inflating: train/56340/56340.jpg   \n",
            "  inflating: train/56340/56340.json  \n",
            "   creating: train/56342/\n",
            "  inflating: train/56342/56342.csv   \n",
            "  inflating: train/56342/56342.jpg   \n",
            "  inflating: train/56342/56342.json  \n",
            "   creating: train/56351/\n",
            "  inflating: train/56351/56351.csv   \n",
            "  inflating: train/56351/56351.jpg   \n",
            "  inflating: train/56351/56351.json  \n",
            "   creating: train/56363/\n",
            "  inflating: train/56363/56363.csv   \n",
            "  inflating: train/56363/56363.jpg   \n",
            "  inflating: train/56363/56363.json  \n",
            "   creating: train/56381/\n",
            "  inflating: train/56381/56381.csv   \n",
            "  inflating: train/56381/56381.jpg   \n",
            "  inflating: train/56381/56381.json  \n",
            "   creating: train/56390/\n",
            "  inflating: train/56390/56390.csv   \n",
            "  inflating: train/56390/56390.jpg   \n",
            "  inflating: train/56390/56390.json  \n",
            "   creating: train/56391/\n",
            "  inflating: train/56391/56391.csv   \n",
            "  inflating: train/56391/56391.jpg   \n",
            "  inflating: train/56391/56391.json  \n",
            "   creating: train/56396/\n",
            "  inflating: train/56396/56396.csv   \n",
            "  inflating: train/56396/56396.jpg   \n",
            "  inflating: train/56396/56396.json  \n",
            "   creating: train/56418/\n",
            "  inflating: train/56418/56418.csv   \n",
            "  inflating: train/56418/56418.jpg   \n",
            "  inflating: train/56418/56418.json  \n",
            "   creating: train/56426/\n",
            "  inflating: train/56426/56426.csv   \n",
            "  inflating: train/56426/56426.jpg   \n",
            "  inflating: train/56426/56426.json  \n",
            "   creating: train/56433/\n",
            "  inflating: train/56433/56433.csv   \n",
            "  inflating: train/56433/56433.jpg   \n",
            "  inflating: train/56433/56433.json  \n",
            "   creating: train/56435/\n",
            "  inflating: train/56435/56435.csv   \n",
            "  inflating: train/56435/56435.jpg   \n",
            "  inflating: train/56435/56435.json  \n",
            "   creating: train/56457/\n",
            "  inflating: train/56457/56457.csv   \n",
            "  inflating: train/56457/56457.jpg   \n",
            "  inflating: train/56457/56457.json  \n",
            "   creating: train/56459/\n",
            "  inflating: train/56459/56459.csv   \n",
            "  inflating: train/56459/56459.jpg   \n",
            "  inflating: train/56459/56459.json  \n",
            "   creating: train/56461/\n",
            "  inflating: train/56461/56461.csv   \n",
            "  inflating: train/56461/56461.jpg   \n",
            "  inflating: train/56461/56461.json  \n",
            "   creating: train/56472/\n",
            "  inflating: train/56472/56472.csv   \n",
            "  inflating: train/56472/56472.jpg   \n",
            "  inflating: train/56472/56472.json  \n",
            "   creating: train/56482/\n",
            "  inflating: train/56482/56482.csv   \n",
            "  inflating: train/56482/56482.jpg   \n",
            "  inflating: train/56482/56482.json  \n",
            "   creating: train/56493/\n",
            "  inflating: train/56493/56493.csv   \n",
            "  inflating: train/56493/56493.jpg   \n",
            "  inflating: train/56493/56493.json  \n",
            "   creating: train/56496/\n",
            "  inflating: train/56496/56496.csv   \n",
            "  inflating: train/56496/56496.jpg   \n",
            "  inflating: train/56496/56496.json  \n",
            "   creating: train/56517/\n",
            "  inflating: train/56517/56517.csv   \n",
            "  inflating: train/56517/56517.jpg   \n",
            "  inflating: train/56517/56517.json  \n",
            "   creating: train/56529/\n",
            "  inflating: train/56529/56529.csv   \n",
            "  inflating: train/56529/56529.jpg   \n",
            "  inflating: train/56529/56529.json  \n",
            "   creating: train/56530/\n",
            "  inflating: train/56530/56530.csv   \n",
            "  inflating: train/56530/56530.jpg   \n",
            "  inflating: train/56530/56530.json  \n",
            "   creating: train/56536/\n",
            "  inflating: train/56536/56536.csv   \n",
            "  inflating: train/56536/56536.jpg   \n",
            "  inflating: train/56536/56536.json  \n",
            "   creating: train/56537/\n",
            "  inflating: train/56537/56537.csv   \n",
            "  inflating: train/56537/56537.jpg   \n",
            "  inflating: train/56537/56537.json  \n",
            "   creating: train/56544/\n",
            "  inflating: train/56544/56544.csv   \n",
            "  inflating: train/56544/56544.jpg   \n",
            "  inflating: train/56544/56544.json  \n",
            "   creating: train/56561/\n",
            "  inflating: train/56561/56561.csv   \n",
            "  inflating: train/56561/56561.jpg   \n",
            "  inflating: train/56561/56561.json  \n",
            "   creating: train/56570/\n",
            "  inflating: train/56570/56570.csv   \n",
            "  inflating: train/56570/56570.jpg   \n",
            "  inflating: train/56570/56570.json  \n",
            "   creating: train/56572/\n",
            "  inflating: train/56572/56572.csv   \n",
            "  inflating: train/56572/56572.jpg   \n",
            "  inflating: train/56572/56572.json  \n",
            "   creating: train/56574/\n",
            "  inflating: train/56574/56574.csv   \n",
            "  inflating: train/56574/56574.jpg   \n",
            "  inflating: train/56574/56574.json  \n",
            "   creating: train/56575/\n",
            "  inflating: train/56575/56575.csv   \n",
            "  inflating: train/56575/56575.jpg   \n",
            "  inflating: train/56575/56575.json  \n",
            "   creating: train/56577/\n",
            "  inflating: train/56577/56577.csv   \n",
            "  inflating: train/56577/56577.jpg   \n",
            "  inflating: train/56577/56577.json  \n",
            "   creating: train/56584/\n",
            "  inflating: train/56584/56584.csv   \n",
            "  inflating: train/56584/56584.jpg   \n",
            "  inflating: train/56584/56584.json  \n",
            "   creating: train/56588/\n",
            "  inflating: train/56588/56588.csv   \n",
            "  inflating: train/56588/56588.jpg   \n",
            "  inflating: train/56588/56588.json  \n",
            "   creating: train/56611/\n",
            "  inflating: train/56611/56611.csv   \n",
            "  inflating: train/56611/56611.jpg   \n",
            "  inflating: train/56611/56611.json  \n",
            "   creating: train/56618/\n",
            "  inflating: train/56618/56618.csv   \n",
            "  inflating: train/56618/56618.jpg   \n",
            "  inflating: train/56618/56618.json  \n",
            "   creating: train/56629/\n",
            "  inflating: train/56629/56629.csv   \n",
            "  inflating: train/56629/56629.jpg   \n",
            "  inflating: train/56629/56629.json  \n",
            "   creating: train/56636/\n",
            "  inflating: train/56636/56636.csv   \n",
            "  inflating: train/56636/56636.jpg   \n",
            "  inflating: train/56636/56636.json  \n",
            "   creating: train/56647/\n",
            "  inflating: train/56647/56647.csv   \n",
            "  inflating: train/56647/56647.jpg   \n",
            "  inflating: train/56647/56647.json  \n",
            "   creating: train/56648/\n",
            "  inflating: train/56648/56648.csv   \n",
            "  inflating: train/56648/56648.jpg   \n",
            "  inflating: train/56648/56648.json  \n",
            "   creating: train/56655/\n",
            "  inflating: train/56655/56655.csv   \n",
            "  inflating: train/56655/56655.jpg   \n",
            "  inflating: train/56655/56655.json  \n",
            "   creating: train/56659/\n",
            "  inflating: train/56659/56659.csv   \n",
            "  inflating: train/56659/56659.jpg   \n",
            "  inflating: train/56659/56659.json  \n",
            "   creating: train/56688/\n",
            "  inflating: train/56688/56688.csv   \n",
            "  inflating: train/56688/56688.jpg   \n",
            "  inflating: train/56688/56688.json  \n",
            "   creating: train/56702/\n",
            "  inflating: train/56702/56702.csv   \n",
            "  inflating: train/56702/56702.jpg   \n",
            "  inflating: train/56702/56702.json  \n",
            "   creating: train/56705/\n",
            "  inflating: train/56705/56705.csv   \n",
            "  inflating: train/56705/56705.jpg   \n",
            "  inflating: train/56705/56705.json  \n",
            "   creating: train/56710/\n",
            "  inflating: train/56710/56710.csv   \n",
            "  inflating: train/56710/56710.jpg   \n",
            "  inflating: train/56710/56710.json  \n",
            "   creating: train/56724/\n",
            "  inflating: train/56724/56724.csv   \n",
            "  inflating: train/56724/56724.jpg   \n",
            "  inflating: train/56724/56724.json  \n",
            "   creating: train/56726/\n",
            "  inflating: train/56726/56726.csv   \n",
            "  inflating: train/56726/56726.jpg   \n",
            "  inflating: train/56726/56726.json  \n",
            "   creating: train/56728/\n",
            "  inflating: train/56728/56728.csv   \n",
            "  inflating: train/56728/56728.jpg   \n",
            "  inflating: train/56728/56728.json  \n",
            "   creating: train/56731/\n",
            "  inflating: train/56731/56731.csv   \n",
            "  inflating: train/56731/56731.jpg   \n",
            "  inflating: train/56731/56731.json  \n",
            "   creating: train/56734/\n",
            "  inflating: train/56734/56734.csv   \n",
            "  inflating: train/56734/56734.jpg   \n",
            "  inflating: train/56734/56734.json  \n",
            "   creating: train/56736/\n",
            "  inflating: train/56736/56736.csv   \n",
            "  inflating: train/56736/56736.jpg   \n",
            "  inflating: train/56736/56736.json  \n",
            "   creating: train/56739/\n",
            "  inflating: train/56739/56739.csv   \n",
            "  inflating: train/56739/56739.jpg   \n",
            "  inflating: train/56739/56739.json  \n",
            "   creating: train/56742/\n",
            "  inflating: train/56742/56742.csv   \n",
            "  inflating: train/56742/56742.jpg   \n",
            "  inflating: train/56742/56742.json  \n",
            "   creating: train/56752/\n",
            "  inflating: train/56752/56752.csv   \n",
            "  inflating: train/56752/56752.jpg   \n",
            "  inflating: train/56752/56752.json  \n",
            "   creating: train/56764/\n",
            "  inflating: train/56764/56764.csv   \n",
            "  inflating: train/56764/56764.jpg   \n",
            "  inflating: train/56764/56764.json  \n",
            "   creating: train/56783/\n",
            "  inflating: train/56783/56783.csv   \n",
            "  inflating: train/56783/56783.jpg   \n",
            "  inflating: train/56783/56783.json  \n",
            "   creating: train/56797/\n",
            "  inflating: train/56797/56797.csv   \n",
            "  inflating: train/56797/56797.jpg   \n",
            "  inflating: train/56797/56797.json  \n",
            "   creating: train/56825/\n",
            "  inflating: train/56825/56825.csv   \n",
            "  inflating: train/56825/56825.jpg   \n",
            "  inflating: train/56825/56825.json  \n",
            "   creating: train/56834/\n",
            "  inflating: train/56834/56834.csv   \n",
            "  inflating: train/56834/56834.jpg   \n",
            "  inflating: train/56834/56834.json  \n",
            "   creating: train/56852/\n",
            "  inflating: train/56852/56852.csv   \n",
            "  inflating: train/56852/56852.jpg   \n",
            "  inflating: train/56852/56852.json  \n",
            "   creating: train/56855/\n",
            "  inflating: train/56855/56855.csv   \n",
            "  inflating: train/56855/56855.jpg   \n",
            "  inflating: train/56855/56855.json  \n",
            "   creating: train/56868/\n",
            "  inflating: train/56868/56868.csv   \n",
            "  inflating: train/56868/56868.jpg   \n",
            "  inflating: train/56868/56868.json  \n",
            "   creating: train/56869/\n",
            "  inflating: train/56869/56869.csv   \n",
            "  inflating: train/56869/56869.jpg   \n",
            "  inflating: train/56869/56869.json  \n",
            "   creating: train/56879/\n",
            "  inflating: train/56879/56879.csv   \n",
            "  inflating: train/56879/56879.jpg   \n",
            "  inflating: train/56879/56879.json  \n",
            "   creating: train/56890/\n",
            "  inflating: train/56890/56890.csv   \n",
            "  inflating: train/56890/56890.jpg   \n",
            "  inflating: train/56890/56890.json  \n",
            "   creating: train/56893/\n",
            "  inflating: train/56893/56893.csv   \n",
            "  inflating: train/56893/56893.jpg   \n",
            "  inflating: train/56893/56893.json  \n",
            "   creating: train/56895/\n",
            "  inflating: train/56895/56895.csv   \n",
            "  inflating: train/56895/56895.jpg   \n",
            "  inflating: train/56895/56895.json  \n",
            "   creating: train/56904/\n",
            "  inflating: train/56904/56904.csv   \n",
            "  inflating: train/56904/56904.jpg   \n",
            "  inflating: train/56904/56904.json  \n",
            "   creating: train/56908/\n",
            "  inflating: train/56908/56908.csv   \n",
            "  inflating: train/56908/56908.jpg   \n",
            "  inflating: train/56908/56908.json  \n",
            "   creating: train/56912/\n",
            "  inflating: train/56912/56912.csv   \n",
            "  inflating: train/56912/56912.jpg   \n",
            "  inflating: train/56912/56912.json  \n",
            "   creating: train/56916/\n",
            "  inflating: train/56916/56916.csv   \n",
            "  inflating: train/56916/56916.jpg   \n",
            "  inflating: train/56916/56916.json  \n",
            "   creating: train/56920/\n",
            "  inflating: train/56920/56920.csv   \n",
            "  inflating: train/56920/56920.jpg   \n",
            "  inflating: train/56920/56920.json  \n",
            "   creating: train/56921/\n",
            "  inflating: train/56921/56921.csv   \n",
            "  inflating: train/56921/56921.jpg   \n",
            "  inflating: train/56921/56921.json  \n",
            "   creating: train/56925/\n",
            "  inflating: train/56925/56925.csv   \n",
            "  inflating: train/56925/56925.jpg   \n",
            "  inflating: train/56925/56925.json  \n",
            "   creating: train/56933/\n",
            "  inflating: train/56933/56933.csv   \n",
            "  inflating: train/56933/56933.jpg   \n",
            "  inflating: train/56933/56933.json  \n",
            "   creating: train/56937/\n",
            "  inflating: train/56937/56937.csv   \n",
            "  inflating: train/56937/56937.jpg   \n",
            "  inflating: train/56937/56937.json  \n",
            "   creating: train/56945/\n",
            "  inflating: train/56945/56945.csv   \n",
            "  inflating: train/56945/56945.jpg   \n",
            "  inflating: train/56945/56945.json  \n",
            "   creating: train/56954/\n",
            "  inflating: train/56954/56954.csv   \n",
            "  inflating: train/56954/56954.jpg   \n",
            "  inflating: train/56954/56954.json  \n",
            "   creating: train/56957/\n",
            "  inflating: train/56957/56957.csv   \n",
            "  inflating: train/56957/56957.jpg   \n",
            "  inflating: train/56957/56957.json  \n",
            "   creating: train/56962/\n",
            "  inflating: train/56962/56962.csv   \n",
            "  inflating: train/56962/56962.jpg   \n",
            "  inflating: train/56962/56962.json  \n",
            "   creating: train/56968/\n",
            "  inflating: train/56968/56968.csv   \n",
            "  inflating: train/56968/56968.jpg   \n",
            "  inflating: train/56968/56968.json  \n",
            "   creating: train/56982/\n",
            "  inflating: train/56982/56982.csv   \n",
            "  inflating: train/56982/56982.jpg   \n",
            "  inflating: train/56982/56982.json  \n",
            "   creating: train/56988/\n",
            "  inflating: train/56988/56988.csv   \n",
            "  inflating: train/56988/56988.jpg   \n",
            "  inflating: train/56988/56988.json  \n",
            "   creating: train/57015/\n",
            "  inflating: train/57015/57015.csv   \n",
            "  inflating: train/57015/57015.jpg   \n",
            "  inflating: train/57015/57015.json  \n",
            "   creating: train/57019/\n",
            "  inflating: train/57019/57019.csv   \n",
            "  inflating: train/57019/57019.jpg   \n",
            "  inflating: train/57019/57019.json  \n",
            "   creating: train/57020/\n",
            "  inflating: train/57020/57020.csv   \n",
            "  inflating: train/57020/57020.jpg   \n",
            "  inflating: train/57020/57020.json  \n",
            "   creating: train/57021/\n",
            "  inflating: train/57021/57021.csv   \n",
            "  inflating: train/57021/57021.jpg   \n",
            "  inflating: train/57021/57021.json  \n",
            "   creating: train/57023/\n",
            "  inflating: train/57023/57023.csv   \n",
            "  inflating: train/57023/57023.jpg   \n",
            "  inflating: train/57023/57023.json  \n",
            "   creating: train/57030/\n",
            "  inflating: train/57030/57030.csv   \n",
            "  inflating: train/57030/57030.jpg   \n",
            "  inflating: train/57030/57030.json  \n",
            "   creating: train/57034/\n",
            "  inflating: train/57034/57034.csv   \n",
            "  inflating: train/57034/57034.jpg   \n",
            "  inflating: train/57034/57034.json  \n",
            "   creating: train/57043/\n",
            "  inflating: train/57043/57043.csv   \n",
            "  inflating: train/57043/57043.jpg   \n",
            "  inflating: train/57043/57043.json  \n",
            "   creating: train/57051/\n",
            "  inflating: train/57051/57051.csv   \n",
            "  inflating: train/57051/57051.jpg   \n",
            "  inflating: train/57051/57051.json  \n",
            "   creating: train/57053/\n",
            "  inflating: train/57053/57053.csv   \n",
            "  inflating: train/57053/57053.jpg   \n",
            "  inflating: train/57053/57053.json  \n",
            "   creating: train/57057/\n",
            "  inflating: train/57057/57057.csv   \n",
            "  inflating: train/57057/57057.jpg   \n",
            "  inflating: train/57057/57057.json  \n",
            "   creating: train/57071/\n",
            "  inflating: train/57071/57071.csv   \n",
            "  inflating: train/57071/57071.jpg   \n",
            "  inflating: train/57071/57071.json  \n",
            "   creating: train/57074/\n",
            "  inflating: train/57074/57074.csv   \n",
            "  inflating: train/57074/57074.jpg   \n",
            "  inflating: train/57074/57074.json  \n",
            "   creating: train/57079/\n",
            "  inflating: train/57079/57079.csv   \n",
            "  inflating: train/57079/57079.jpg   \n",
            "  inflating: train/57079/57079.json  \n",
            "   creating: train/57090/\n",
            "  inflating: train/57090/57090.csv   \n",
            "  inflating: train/57090/57090.jpg   \n",
            "  inflating: train/57090/57090.json  \n",
            "   creating: train/57128/\n",
            "  inflating: train/57128/57128.csv   \n",
            "  inflating: train/57128/57128.jpg   \n",
            "  inflating: train/57128/57128.json  \n",
            "   creating: train/57132/\n",
            "  inflating: train/57132/57132.csv   \n",
            "  inflating: train/57132/57132.jpg   \n",
            "  inflating: train/57132/57132.json  \n",
            "   creating: train/57155/\n",
            "  inflating: train/57155/57155.csv   \n",
            "  inflating: train/57155/57155.jpg   \n",
            "  inflating: train/57155/57155.json  \n",
            "   creating: train/57159/\n",
            "  inflating: train/57159/57159.csv   \n",
            "  inflating: train/57159/57159.jpg   \n",
            "  inflating: train/57159/57159.json  \n",
            "   creating: train/57169/\n",
            "  inflating: train/57169/57169.csv   \n",
            "  inflating: train/57169/57169.jpg   \n",
            "  inflating: train/57169/57169.json  \n",
            "   creating: train/57171/\n",
            "  inflating: train/57171/57171.csv   \n",
            "  inflating: train/57171/57171.jpg   \n",
            "  inflating: train/57171/57171.json  \n",
            "   creating: train/57173/\n",
            "  inflating: train/57173/57173.csv   \n",
            "  inflating: train/57173/57173.jpg   \n",
            "  inflating: train/57173/57173.json  \n",
            "   creating: train/57185/\n",
            "  inflating: train/57185/57185.csv   \n",
            "  inflating: train/57185/57185.jpg   \n",
            "  inflating: train/57185/57185.json  \n",
            "   creating: train/57188/\n",
            "  inflating: train/57188/57188.csv   \n",
            "  inflating: train/57188/57188.jpg   \n",
            "  inflating: train/57188/57188.json  \n",
            "   creating: train/57192/\n",
            "  inflating: train/57192/57192.csv   \n",
            "  inflating: train/57192/57192.jpg   \n",
            "  inflating: train/57192/57192.json  \n",
            "   creating: train/57193/\n",
            "  inflating: train/57193/57193.csv   \n",
            "  inflating: train/57193/57193.jpg   \n",
            "  inflating: train/57193/57193.json  \n",
            "   creating: train/57205/\n",
            "  inflating: train/57205/57205.csv   \n",
            "  inflating: train/57205/57205.jpg   \n",
            "  inflating: train/57205/57205.json  \n",
            "   creating: train/57228/\n",
            "  inflating: train/57228/57228.csv   \n",
            "  inflating: train/57228/57228.jpg   \n",
            "  inflating: train/57228/57228.json  \n",
            "   creating: train/57238/\n",
            "  inflating: train/57238/57238.csv   \n",
            "  inflating: train/57238/57238.jpg   \n",
            "  inflating: train/57238/57238.json  \n",
            "   creating: train/57243/\n",
            "  inflating: train/57243/57243.csv   \n",
            "  inflating: train/57243/57243.jpg   \n",
            "  inflating: train/57243/57243.json  \n",
            "   creating: train/57275/\n",
            "  inflating: train/57275/57275.csv   \n",
            "  inflating: train/57275/57275.jpg   \n",
            "  inflating: train/57275/57275.json  \n",
            "   creating: train/57284/\n",
            "  inflating: train/57284/57284.csv   \n",
            "  inflating: train/57284/57284.jpg   \n",
            "  inflating: train/57284/57284.json  \n",
            "   creating: train/57289/\n",
            "  inflating: train/57289/57289.csv   \n",
            "  inflating: train/57289/57289.jpg   \n",
            "  inflating: train/57289/57289.json  \n",
            "   creating: train/57290/\n",
            "  inflating: train/57290/57290.csv   \n",
            "  inflating: train/57290/57290.jpg   \n",
            "  inflating: train/57290/57290.json  \n",
            "   creating: train/57302/\n",
            "  inflating: train/57302/57302.csv   \n",
            "  inflating: train/57302/57302.jpg   \n",
            "  inflating: train/57302/57302.json  \n",
            "   creating: train/57304/\n",
            "  inflating: train/57304/57304.csv   \n",
            "  inflating: train/57304/57304.jpg   \n",
            "  inflating: train/57304/57304.json  \n",
            "   creating: train/57305/\n",
            "  inflating: train/57305/57305.csv   \n",
            "  inflating: train/57305/57305.jpg   \n",
            "  inflating: train/57305/57305.json  \n",
            "   creating: train/57314/\n",
            "  inflating: train/57314/57314.csv   \n",
            "  inflating: train/57314/57314.jpg   \n",
            "  inflating: train/57314/57314.json  \n",
            "   creating: train/57322/\n",
            "  inflating: train/57322/57322.csv   \n",
            "  inflating: train/57322/57322.jpg   \n",
            "  inflating: train/57322/57322.json  \n",
            "   creating: train/57327/\n",
            "  inflating: train/57327/57327.csv   \n",
            "  inflating: train/57327/57327.jpg   \n",
            "  inflating: train/57327/57327.json  \n",
            "   creating: train/57328/\n",
            "  inflating: train/57328/57328.csv   \n",
            "  inflating: train/57328/57328.jpg   \n",
            "  inflating: train/57328/57328.json  \n",
            "   creating: train/57334/\n",
            "  inflating: train/57334/57334.csv   \n",
            "  inflating: train/57334/57334.jpg   \n",
            "  inflating: train/57334/57334.json  \n",
            "   creating: train/57335/\n",
            "  inflating: train/57335/57335.csv   \n",
            "  inflating: train/57335/57335.jpg   \n",
            "  inflating: train/57335/57335.json  \n",
            "   creating: train/57341/\n",
            "  inflating: train/57341/57341.csv   \n",
            "  inflating: train/57341/57341.jpg   \n",
            "  inflating: train/57341/57341.json  \n",
            "   creating: train/57342/\n",
            "  inflating: train/57342/57342.csv   \n",
            "  inflating: train/57342/57342.jpg   \n",
            "  inflating: train/57342/57342.json  \n",
            "   creating: train/57345/\n",
            "  inflating: train/57345/57345.csv   \n",
            "  inflating: train/57345/57345.jpg   \n",
            "  inflating: train/57345/57345.json  \n",
            "   creating: train/57351/\n",
            "  inflating: train/57351/57351.csv   \n",
            "  inflating: train/57351/57351.jpg   \n",
            "  inflating: train/57351/57351.json  \n",
            "   creating: train/57375/\n",
            "  inflating: train/57375/57375.csv   \n",
            "  inflating: train/57375/57375.jpg   \n",
            "  inflating: train/57375/57375.json  \n",
            "   creating: train/57380/\n",
            "  inflating: train/57380/57380.csv   \n",
            "  inflating: train/57380/57380.jpg   \n",
            "  inflating: train/57380/57380.json  \n",
            "   creating: train/57390/\n",
            "  inflating: train/57390/57390.csv   \n",
            "  inflating: train/57390/57390.jpg   \n",
            "  inflating: train/57390/57390.json  \n",
            "   creating: train/57399/\n",
            "  inflating: train/57399/57399.csv   \n",
            "  inflating: train/57399/57399.jpg   \n",
            "  inflating: train/57399/57399.json  \n",
            "   creating: train/57400/\n",
            "  inflating: train/57400/57400.csv   \n",
            "  inflating: train/57400/57400.jpg   \n",
            "  inflating: train/57400/57400.json  \n",
            "   creating: train/57415/\n",
            "  inflating: train/57415/57415.csv   \n",
            "  inflating: train/57415/57415.jpg   \n",
            "  inflating: train/57415/57415.json  \n",
            "   creating: train/57419/\n",
            "  inflating: train/57419/57419.csv   \n",
            "  inflating: train/57419/57419.jpg   \n",
            "  inflating: train/57419/57419.json  \n",
            "   creating: train/57429/\n",
            "  inflating: train/57429/57429.csv   \n",
            "  inflating: train/57429/57429.jpg   \n",
            "  inflating: train/57429/57429.json  \n",
            "   creating: train/57435/\n",
            "  inflating: train/57435/57435.csv   \n",
            "  inflating: train/57435/57435.jpg   \n",
            "  inflating: train/57435/57435.json  \n",
            "   creating: train/57440/\n",
            "  inflating: train/57440/57440.csv   \n",
            "  inflating: train/57440/57440.jpg   \n",
            "  inflating: train/57440/57440.json  \n",
            "   creating: train/57453/\n",
            "  inflating: train/57453/57453.csv   \n",
            "  inflating: train/57453/57453.jpg   \n",
            "  inflating: train/57453/57453.json  \n",
            "   creating: train/57473/\n",
            "  inflating: train/57473/57473.csv   \n",
            "  inflating: train/57473/57473.jpg   \n",
            "  inflating: train/57473/57473.json  \n",
            "   creating: train/57480/\n",
            "  inflating: train/57480/57480.csv   \n",
            "  inflating: train/57480/57480.jpg   \n",
            "  inflating: train/57480/57480.json  \n",
            "   creating: train/57482/\n",
            "  inflating: train/57482/57482.csv   \n",
            "  inflating: train/57482/57482.jpg   \n",
            "  inflating: train/57482/57482.json  \n",
            "   creating: train/57493/\n",
            "  inflating: train/57493/57493.csv   \n",
            "  inflating: train/57493/57493.jpg   \n",
            "  inflating: train/57493/57493.json  \n",
            "   creating: train/57516/\n",
            "  inflating: train/57516/57516.csv   \n",
            "  inflating: train/57516/57516.jpg   \n",
            "  inflating: train/57516/57516.json  \n",
            "   creating: train/57537/\n",
            "  inflating: train/57537/57537.csv   \n",
            "  inflating: train/57537/57537.jpg   \n",
            "  inflating: train/57537/57537.json  \n",
            "   creating: train/57561/\n",
            "  inflating: train/57561/57561.csv   \n",
            "  inflating: train/57561/57561.jpg   \n",
            "  inflating: train/57561/57561.json  \n",
            "   creating: train/57563/\n",
            "  inflating: train/57563/57563.csv   \n",
            "  inflating: train/57563/57563.jpg   \n",
            "  inflating: train/57563/57563.json  \n",
            "   creating: train/57568/\n",
            "  inflating: train/57568/57568.csv   \n",
            "  inflating: train/57568/57568.jpg   \n",
            "  inflating: train/57568/57568.json  \n",
            "   creating: train/57580/\n",
            "  inflating: train/57580/57580.csv   \n",
            "  inflating: train/57580/57580.jpg   \n",
            "  inflating: train/57580/57580.json  \n",
            "   creating: train/57582/\n",
            "  inflating: train/57582/57582.csv   \n",
            "  inflating: train/57582/57582.jpg   \n",
            "  inflating: train/57582/57582.json  \n",
            "   creating: train/57592/\n",
            "  inflating: train/57592/57592.csv   \n",
            "  inflating: train/57592/57592.jpg   \n",
            "  inflating: train/57592/57592.json  \n",
            "   creating: train/57596/\n",
            "  inflating: train/57596/57596.csv   \n",
            "  inflating: train/57596/57596.jpg   \n",
            "  inflating: train/57596/57596.json  \n",
            "   creating: train/57614/\n",
            "  inflating: train/57614/57614.csv   \n",
            "  inflating: train/57614/57614.jpg   \n",
            "  inflating: train/57614/57614.json  \n",
            "   creating: train/57635/\n",
            "  inflating: train/57635/57635.csv   \n",
            "  inflating: train/57635/57635.jpg   \n",
            "  inflating: train/57635/57635.json  \n",
            "   creating: train/57645/\n",
            "  inflating: train/57645/57645.csv   \n",
            "  inflating: train/57645/57645.jpg   \n",
            "  inflating: train/57645/57645.json  \n",
            "   creating: train/57649/\n",
            "  inflating: train/57649/57649.csv   \n",
            "  inflating: train/57649/57649.jpg   \n",
            "  inflating: train/57649/57649.json  \n",
            "   creating: train/57658/\n",
            "  inflating: train/57658/57658.csv   \n",
            "  inflating: train/57658/57658.jpg   \n",
            "  inflating: train/57658/57658.json  \n",
            "   creating: train/57662/\n",
            "  inflating: train/57662/57662.csv   \n",
            "  inflating: train/57662/57662.jpg   \n",
            "  inflating: train/57662/57662.json  \n",
            "   creating: train/57665/\n",
            "  inflating: train/57665/57665.csv   \n",
            "  inflating: train/57665/57665.jpg   \n",
            "  inflating: train/57665/57665.json  \n",
            "   creating: train/57667/\n",
            "  inflating: train/57667/57667.csv   \n",
            "  inflating: train/57667/57667.jpg   \n",
            "  inflating: train/57667/57667.json  \n",
            "   creating: train/57668/\n",
            "  inflating: train/57668/57668.csv   \n",
            "  inflating: train/57668/57668.jpg   \n",
            "  inflating: train/57668/57668.json  \n",
            "   creating: train/57706/\n",
            "  inflating: train/57706/57706.csv   \n",
            "  inflating: train/57706/57706.jpg   \n",
            "  inflating: train/57706/57706.json  \n",
            "   creating: train/57713/\n",
            "  inflating: train/57713/57713.csv   \n",
            "  inflating: train/57713/57713.jpg   \n",
            "  inflating: train/57713/57713.json  \n",
            "   creating: train/57716/\n",
            "  inflating: train/57716/57716.csv   \n",
            "  inflating: train/57716/57716.jpg   \n",
            "  inflating: train/57716/57716.json  \n",
            "   creating: train/57717/\n",
            "  inflating: train/57717/57717.csv   \n",
            "  inflating: train/57717/57717.jpg   \n",
            "  inflating: train/57717/57717.json  \n",
            "   creating: train/57719/\n",
            "  inflating: train/57719/57719.csv   \n",
            "  inflating: train/57719/57719.jpg   \n",
            "  inflating: train/57719/57719.json  \n",
            "   creating: train/57720/\n",
            "  inflating: train/57720/57720.csv   \n",
            "  inflating: train/57720/57720.jpg   \n",
            "  inflating: train/57720/57720.json  \n",
            "   creating: train/57722/\n",
            "  inflating: train/57722/57722.csv   \n",
            "  inflating: train/57722/57722.jpg   \n",
            "  inflating: train/57722/57722.json  \n",
            "   creating: train/57730/\n",
            "  inflating: train/57730/57730.csv   \n",
            "  inflating: train/57730/57730.jpg   \n",
            "  inflating: train/57730/57730.json  \n",
            "   creating: train/57731/\n",
            "  inflating: train/57731/57731.csv   \n",
            "  inflating: train/57731/57731.jpg   \n",
            "  inflating: train/57731/57731.json  \n",
            "   creating: train/57738/\n",
            "  inflating: train/57738/57738.csv   \n",
            "  inflating: train/57738/57738.jpg   \n",
            "  inflating: train/57738/57738.json  \n",
            "   creating: train/57742/\n",
            "  inflating: train/57742/57742.csv   \n",
            "  inflating: train/57742/57742.jpg   \n",
            "  inflating: train/57742/57742.json  \n",
            "   creating: train/57764/\n",
            "  inflating: train/57764/57764.csv   \n",
            "  inflating: train/57764/57764.jpg   \n",
            "  inflating: train/57764/57764.json  \n",
            "   creating: train/57770/\n",
            "  inflating: train/57770/57770.csv   \n",
            "  inflating: train/57770/57770.jpg   \n",
            "  inflating: train/57770/57770.json  \n",
            "   creating: train/57781/\n",
            "  inflating: train/57781/57781.csv   \n",
            "  inflating: train/57781/57781.jpg   \n",
            "  inflating: train/57781/57781.json  \n",
            "   creating: train/57783/\n",
            "  inflating: train/57783/57783.csv   \n",
            "  inflating: train/57783/57783.jpg   \n",
            "  inflating: train/57783/57783.json  \n",
            "   creating: train/57786/\n",
            "  inflating: train/57786/57786.csv   \n",
            "  inflating: train/57786/57786.jpg   \n",
            "  inflating: train/57786/57786.json  \n",
            "   creating: train/57806/\n",
            "  inflating: train/57806/57806.csv   \n",
            "  inflating: train/57806/57806.jpg   \n",
            "  inflating: train/57806/57806.json  \n",
            "   creating: train/57812/\n",
            "  inflating: train/57812/57812.csv   \n",
            "  inflating: train/57812/57812.jpg   \n",
            "  inflating: train/57812/57812.json  \n",
            "   creating: train/57842/\n",
            "  inflating: train/57842/57842.csv   \n",
            "  inflating: train/57842/57842.jpg   \n",
            "  inflating: train/57842/57842.json  \n",
            "   creating: train/57844/\n",
            "  inflating: train/57844/57844.csv   \n",
            "  inflating: train/57844/57844.jpg   \n",
            "  inflating: train/57844/57844.json  \n",
            "   creating: train/57856/\n",
            "  inflating: train/57856/57856.csv   \n",
            "  inflating: train/57856/57856.jpg   \n",
            "  inflating: train/57856/57856.json  \n",
            "   creating: train/57858/\n",
            "  inflating: train/57858/57858.csv   \n",
            "  inflating: train/57858/57858.jpg   \n",
            "  inflating: train/57858/57858.json  \n",
            "   creating: train/57864/\n",
            "  inflating: train/57864/57864.csv   \n",
            "  inflating: train/57864/57864.jpg   \n",
            "  inflating: train/57864/57864.json  \n",
            "   creating: train/57865/\n",
            "  inflating: train/57865/57865.csv   \n",
            "  inflating: train/57865/57865.jpg   \n",
            "  inflating: train/57865/57865.json  \n",
            "   creating: train/57876/\n",
            "  inflating: train/57876/57876.csv   \n",
            "  inflating: train/57876/57876.jpg   \n",
            "  inflating: train/57876/57876.json  \n",
            "   creating: train/57928/\n",
            "  inflating: train/57928/57928.csv   \n",
            "  inflating: train/57928/57928.jpg   \n",
            "  inflating: train/57928/57928.json  \n",
            "   creating: train/57946/\n",
            "  inflating: train/57946/57946.csv   \n",
            "  inflating: train/57946/57946.jpg   \n",
            "  inflating: train/57946/57946.json  \n",
            "   creating: train/57962/\n",
            "  inflating: train/57962/57962.csv   \n",
            "  inflating: train/57962/57962.jpg   \n",
            "  inflating: train/57962/57962.json  \n",
            "   creating: train/57964/\n",
            "  inflating: train/57964/57964.csv   \n",
            "  inflating: train/57964/57964.jpg   \n",
            "  inflating: train/57964/57964.json  \n",
            "   creating: train/57986/\n",
            "  inflating: train/57986/57986.csv   \n",
            "  inflating: train/57986/57986.jpg   \n",
            "  inflating: train/57986/57986.json  \n",
            "   creating: train/57988/\n",
            "  inflating: train/57988/57988.csv   \n",
            "  inflating: train/57988/57988.jpg   \n",
            "  inflating: train/57988/57988.json  \n",
            "   creating: train/57996/\n",
            "  inflating: train/57996/57996.csv   \n",
            "  inflating: train/57996/57996.jpg   \n",
            "  inflating: train/57996/57996.json  \n",
            "   creating: train/58014/\n",
            "  inflating: train/58014/58014.csv   \n",
            "  inflating: train/58014/58014.jpg   \n",
            "  inflating: train/58014/58014.json  \n",
            "   creating: train/58016/\n",
            "  inflating: train/58016/58016.csv   \n",
            "  inflating: train/58016/58016.jpg   \n",
            "  inflating: train/58016/58016.json  \n",
            "   creating: train/58025/\n",
            "  inflating: train/58025/58025.csv   \n",
            "  inflating: train/58025/58025.jpg   \n",
            "  inflating: train/58025/58025.json  \n",
            "   creating: train/58045/\n",
            "  inflating: train/58045/58045.csv   \n",
            "  inflating: train/58045/58045.jpg   \n",
            "  inflating: train/58045/58045.json  \n",
            "   creating: train/58053/\n",
            "  inflating: train/58053/58053.csv   \n",
            "  inflating: train/58053/58053.jpg   \n",
            "  inflating: train/58053/58053.json  \n",
            "   creating: train/58063/\n",
            "  inflating: train/58063/58063.csv   \n",
            "  inflating: train/58063/58063.jpg   \n",
            "  inflating: train/58063/58063.json  \n",
            "   creating: train/58067/\n",
            "  inflating: train/58067/58067.csv   \n",
            "  inflating: train/58067/58067.jpg   \n",
            "  inflating: train/58067/58067.json  \n",
            "   creating: train/58075/\n",
            "  inflating: train/58075/58075.csv   \n",
            "  inflating: train/58075/58075.jpg   \n",
            "  inflating: train/58075/58075.json  \n",
            "   creating: train/58079/\n",
            "  inflating: train/58079/58079.csv   \n",
            "  inflating: train/58079/58079.jpg   \n",
            "  inflating: train/58079/58079.json  \n",
            "   creating: train/58092/\n",
            "  inflating: train/58092/58092.csv   \n",
            "  inflating: train/58092/58092.jpg   \n",
            "  inflating: train/58092/58092.json  \n",
            "   creating: train/58096/\n",
            "  inflating: train/58096/58096.csv   \n",
            "  inflating: train/58096/58096.jpg   \n",
            "  inflating: train/58096/58096.json  \n",
            "   creating: train/58098/\n",
            "  inflating: train/58098/58098.csv   \n",
            "  inflating: train/58098/58098.jpg   \n",
            "  inflating: train/58098/58098.json  \n",
            "   creating: train/58111/\n",
            "  inflating: train/58111/58111.csv   \n",
            "  inflating: train/58111/58111.jpg   \n",
            "  inflating: train/58111/58111.json  \n",
            "   creating: train/58122/\n",
            "  inflating: train/58122/58122.csv   \n",
            "  inflating: train/58122/58122.jpg   \n",
            "  inflating: train/58122/58122.json  \n",
            "   creating: train/58134/\n",
            "  inflating: train/58134/58134.csv   \n",
            "  inflating: train/58134/58134.jpg   \n",
            "  inflating: train/58134/58134.json  \n",
            "   creating: train/58146/\n",
            "  inflating: train/58146/58146.csv   \n",
            "  inflating: train/58146/58146.jpg   \n",
            "  inflating: train/58146/58146.json  \n",
            "   creating: train/58148/\n",
            "  inflating: train/58148/58148.csv   \n",
            "  inflating: train/58148/58148.jpg   \n",
            "  inflating: train/58148/58148.json  \n",
            "   creating: train/58157/\n",
            "  inflating: train/58157/58157.csv   \n",
            "  inflating: train/58157/58157.jpg   \n",
            "  inflating: train/58157/58157.json  \n",
            "   creating: train/58166/\n",
            "  inflating: train/58166/58166.csv   \n",
            "  inflating: train/58166/58166.jpg   \n",
            "  inflating: train/58166/58166.json  \n",
            "   creating: train/58182/\n",
            "  inflating: train/58182/58182.csv   \n",
            "  inflating: train/58182/58182.jpg   \n",
            "  inflating: train/58182/58182.json  \n",
            "   creating: train/58185/\n",
            "  inflating: train/58185/58185.csv   \n",
            "  inflating: train/58185/58185.jpg   \n",
            "  inflating: train/58185/58185.json  \n",
            "   creating: train/58211/\n",
            "  inflating: train/58211/58211.csv   \n",
            "  inflating: train/58211/58211.jpg   \n",
            "  inflating: train/58211/58211.json  \n",
            "   creating: train/58223/\n",
            "  inflating: train/58223/58223.csv   \n",
            "  inflating: train/58223/58223.jpg   \n",
            "  inflating: train/58223/58223.json  \n",
            "   creating: train/58232/\n",
            "  inflating: train/58232/58232.csv   \n",
            "  inflating: train/58232/58232.jpg   \n",
            "  inflating: train/58232/58232.json  \n",
            "   creating: train/58235/\n",
            "  inflating: train/58235/58235.csv   \n",
            "  inflating: train/58235/58235.jpg   \n",
            "  inflating: train/58235/58235.json  \n",
            "   creating: train/58242/\n",
            "  inflating: train/58242/58242.csv   \n",
            "  inflating: train/58242/58242.jpg   \n",
            "  inflating: train/58242/58242.json  \n",
            "   creating: train/58245/\n",
            "  inflating: train/58245/58245.csv   \n",
            "  inflating: train/58245/58245.jpg   \n",
            "  inflating: train/58245/58245.json  \n",
            "   creating: train/58255/\n",
            "  inflating: train/58255/58255.csv   \n",
            "  inflating: train/58255/58255.jpg   \n",
            "  inflating: train/58255/58255.json  \n",
            "   creating: train/58257/\n",
            "  inflating: train/58257/58257.csv   \n",
            "  inflating: train/58257/58257.jpg   \n",
            "  inflating: train/58257/58257.json  \n",
            "   creating: train/58263/\n",
            "  inflating: train/58263/58263.csv   \n",
            "  inflating: train/58263/58263.jpg   \n",
            "  inflating: train/58263/58263.json  \n",
            "   creating: train/58269/\n",
            "  inflating: train/58269/58269.csv   \n",
            "  inflating: train/58269/58269.jpg   \n",
            "  inflating: train/58269/58269.json  \n",
            "   creating: train/58273/\n",
            "  inflating: train/58273/58273.csv   \n",
            "  inflating: train/58273/58273.jpg   \n",
            "  inflating: train/58273/58273.json  \n",
            "   creating: train/58276/\n",
            "  inflating: train/58276/58276.csv   \n",
            "  inflating: train/58276/58276.jpg   \n",
            "  inflating: train/58276/58276.json  \n",
            "   creating: train/58287/\n",
            "  inflating: train/58287/58287.csv   \n",
            "  inflating: train/58287/58287.jpg   \n",
            "  inflating: train/58287/58287.json  \n",
            "   creating: train/58291/\n",
            "  inflating: train/58291/58291.csv   \n",
            "  inflating: train/58291/58291.jpg   \n",
            "  inflating: train/58291/58291.json  \n",
            "   creating: train/58322/\n",
            "  inflating: train/58322/58322.csv   \n",
            "  inflating: train/58322/58322.jpg   \n",
            "  inflating: train/58322/58322.json  \n",
            "   creating: train/58329/\n",
            "  inflating: train/58329/58329.csv   \n",
            "  inflating: train/58329/58329.jpg   \n",
            "  inflating: train/58329/58329.json  \n",
            "   creating: train/58334/\n",
            "  inflating: train/58334/58334.csv   \n",
            "  inflating: train/58334/58334.jpg   \n",
            "  inflating: train/58334/58334.json  \n",
            "   creating: train/58338/\n",
            "  inflating: train/58338/58338.csv   \n",
            "  inflating: train/58338/58338.jpg   \n",
            "  inflating: train/58338/58338.json  \n",
            "   creating: train/58342/\n",
            "  inflating: train/58342/58342.csv   \n",
            "  inflating: train/58342/58342.jpg   \n",
            "  inflating: train/58342/58342.json  \n",
            "   creating: train/58350/\n",
            "  inflating: train/58350/58350.csv   \n",
            "  inflating: train/58350/58350.jpg   \n",
            "  inflating: train/58350/58350.json  \n",
            "   creating: train/58364/\n",
            "  inflating: train/58364/58364.csv   \n",
            "  inflating: train/58364/58364.jpg   \n",
            "  inflating: train/58364/58364.json  \n",
            "   creating: train/58375/\n",
            "  inflating: train/58375/58375.csv   \n",
            "  inflating: train/58375/58375.jpg   \n",
            "  inflating: train/58375/58375.json  \n",
            "   creating: train/58382/\n",
            "  inflating: train/58382/58382.csv   \n",
            "  inflating: train/58382/58382.jpg   \n",
            "  inflating: train/58382/58382.json  \n",
            "   creating: train/58401/\n",
            "  inflating: train/58401/58401.csv   \n",
            "  inflating: train/58401/58401.jpg   \n",
            "  inflating: train/58401/58401.json  \n",
            "   creating: train/58403/\n",
            "  inflating: train/58403/58403.csv   \n",
            "  inflating: train/58403/58403.jpg   \n",
            "  inflating: train/58403/58403.json  \n",
            "   creating: train/58413/\n",
            "  inflating: train/58413/58413.csv   \n",
            "  inflating: train/58413/58413.jpg   \n",
            "  inflating: train/58413/58413.json  \n",
            "   creating: train/58418/\n",
            "  inflating: train/58418/58418.csv   \n",
            "  inflating: train/58418/58418.jpg   \n",
            "  inflating: train/58418/58418.json  \n",
            "   creating: train/58421/\n",
            "  inflating: train/58421/58421.csv   \n",
            "  inflating: train/58421/58421.jpg   \n",
            "  inflating: train/58421/58421.json  \n",
            "   creating: train/58422/\n",
            "  inflating: train/58422/58422.csv   \n",
            "  inflating: train/58422/58422.jpg   \n",
            "  inflating: train/58422/58422.json  \n",
            "   creating: train/58424/\n",
            "  inflating: train/58424/58424.csv   \n",
            "  inflating: train/58424/58424.jpg   \n",
            "  inflating: train/58424/58424.json  \n",
            "   creating: train/58439/\n",
            "  inflating: train/58439/58439.csv   \n",
            "  inflating: train/58439/58439.jpg   \n",
            "  inflating: train/58439/58439.json  \n",
            "   creating: train/58446/\n",
            "  inflating: train/58446/58446.csv   \n",
            "  inflating: train/58446/58446.jpg   \n",
            "  inflating: train/58446/58446.json  \n",
            "   creating: train/58464/\n",
            "  inflating: train/58464/58464.csv   \n",
            "  inflating: train/58464/58464.jpg   \n",
            "  inflating: train/58464/58464.json  \n",
            "   creating: train/58470/\n",
            "  inflating: train/58470/58470.csv   \n",
            "  inflating: train/58470/58470.jpg   \n",
            "  inflating: train/58470/58470.json  \n",
            "   creating: train/58475/\n",
            "  inflating: train/58475/58475.csv   \n",
            "  inflating: train/58475/58475.jpg   \n",
            "  inflating: train/58475/58475.json  \n",
            "   creating: train/58483/\n",
            "  inflating: train/58483/58483.csv   \n",
            "  inflating: train/58483/58483.jpg   \n",
            "  inflating: train/58483/58483.json  \n",
            "   creating: train/58489/\n",
            "  inflating: train/58489/58489.csv   \n",
            "  inflating: train/58489/58489.jpg   \n",
            "  inflating: train/58489/58489.json  \n",
            "   creating: train/58492/\n",
            "  inflating: train/58492/58492.csv   \n",
            "  inflating: train/58492/58492.jpg   \n",
            "  inflating: train/58492/58492.json  \n",
            "   creating: train/58501/\n",
            "  inflating: train/58501/58501.csv   \n",
            "  inflating: train/58501/58501.jpg   \n",
            "  inflating: train/58501/58501.json  \n",
            "   creating: train/58505/\n",
            "  inflating: train/58505/58505.csv   \n",
            "  inflating: train/58505/58505.jpg   \n",
            "  inflating: train/58505/58505.json  \n",
            "   creating: train/58514/\n",
            "  inflating: train/58514/58514.csv   \n",
            "  inflating: train/58514/58514.jpg   \n",
            "  inflating: train/58514/58514.json  \n",
            "   creating: train/58520/\n",
            "  inflating: train/58520/58520.csv   \n",
            "  inflating: train/58520/58520.jpg   \n",
            "  inflating: train/58520/58520.json  \n",
            "   creating: train/58537/\n",
            "  inflating: train/58537/58537.csv   \n",
            "  inflating: train/58537/58537.jpg   \n",
            "  inflating: train/58537/58537.json  \n",
            "   creating: train/58550/\n",
            "  inflating: train/58550/58550.csv   \n",
            "  inflating: train/58550/58550.jpg   \n",
            "  inflating: train/58550/58550.json  \n",
            "   creating: train/58551/\n",
            "  inflating: train/58551/58551.csv   \n",
            "  inflating: train/58551/58551.jpg   \n",
            "  inflating: train/58551/58551.json  \n",
            "   creating: train/58564/\n",
            "  inflating: train/58564/58564.csv   \n",
            "  inflating: train/58564/58564.jpg   \n",
            "  inflating: train/58564/58564.json  \n",
            "   creating: train/58572/\n",
            "  inflating: train/58572/58572.csv   \n",
            "  inflating: train/58572/58572.jpg   \n",
            "  inflating: train/58572/58572.json  \n",
            "   creating: train/58590/\n",
            "  inflating: train/58590/58590.csv   \n",
            "  inflating: train/58590/58590.jpg   \n",
            "  inflating: train/58590/58590.json  \n",
            "   creating: train/58599/\n",
            "  inflating: train/58599/58599.csv   \n",
            "  inflating: train/58599/58599.jpg   \n",
            "  inflating: train/58599/58599.json  \n",
            "   creating: train/58614/\n",
            "  inflating: train/58614/58614.csv   \n",
            "  inflating: train/58614/58614.jpg   \n",
            "  inflating: train/58614/58614.json  \n",
            "   creating: train/58630/\n",
            "  inflating: train/58630/58630.csv   \n",
            "  inflating: train/58630/58630.jpg   \n",
            "  inflating: train/58630/58630.json  \n",
            "   creating: train/58649/\n",
            "  inflating: train/58649/58649.csv   \n",
            "  inflating: train/58649/58649.jpg   \n",
            "  inflating: train/58649/58649.json  \n",
            "   creating: train/58677/\n",
            "  inflating: train/58677/58677.csv   \n",
            "  inflating: train/58677/58677.jpg   \n",
            "  inflating: train/58677/58677.json  \n",
            "   creating: train/58678/\n",
            "  inflating: train/58678/58678.csv   \n",
            "  inflating: train/58678/58678.jpg   \n",
            "  inflating: train/58678/58678.json  \n",
            "   creating: train/58679/\n",
            "  inflating: train/58679/58679.csv   \n",
            "  inflating: train/58679/58679.jpg   \n",
            "  inflating: train/58679/58679.json  \n",
            "   creating: train/58687/\n",
            "  inflating: train/58687/58687.csv   \n",
            "  inflating: train/58687/58687.jpg   \n",
            "  inflating: train/58687/58687.json  \n",
            "   creating: train/58691/\n",
            "  inflating: train/58691/58691.csv   \n",
            "  inflating: train/58691/58691.jpg   \n",
            "  inflating: train/58691/58691.json  \n",
            "   creating: train/58698/\n",
            "  inflating: train/58698/58698.csv   \n",
            "  inflating: train/58698/58698.jpg   \n",
            "  inflating: train/58698/58698.json  \n",
            "   creating: train/58706/\n",
            "  inflating: train/58706/58706.csv   \n",
            "  inflating: train/58706/58706.jpg   \n",
            "  inflating: train/58706/58706.json  \n",
            "   creating: train/58716/\n",
            "  inflating: train/58716/58716.csv   \n",
            "  inflating: train/58716/58716.jpg   \n",
            "  inflating: train/58716/58716.json  \n",
            "   creating: train/58720/\n",
            "  inflating: train/58720/58720.csv   \n",
            "  inflating: train/58720/58720.jpg   \n",
            "  inflating: train/58720/58720.json  \n",
            "   creating: train/58724/\n",
            "  inflating: train/58724/58724.csv   \n",
            "  inflating: train/58724/58724.jpg   \n",
            "  inflating: train/58724/58724.json  \n",
            "   creating: train/58726/\n",
            "  inflating: train/58726/58726.csv   \n",
            "  inflating: train/58726/58726.jpg   \n",
            "  inflating: train/58726/58726.json  \n",
            "   creating: train/58734/\n",
            "  inflating: train/58734/58734.csv   \n",
            "  inflating: train/58734/58734.jpg   \n",
            "  inflating: train/58734/58734.json  \n",
            "   creating: train/58735/\n",
            "  inflating: train/58735/58735.csv   \n",
            "  inflating: train/58735/58735.jpg   \n",
            "  inflating: train/58735/58735.json  \n",
            "   creating: train/58765/\n",
            "  inflating: train/58765/58765.csv   \n",
            "  inflating: train/58765/58765.jpg   \n",
            "  inflating: train/58765/58765.json  \n",
            "   creating: train/58781/\n",
            "  inflating: train/58781/58781.csv   \n",
            "  inflating: train/58781/58781.jpg   \n",
            "  inflating: train/58781/58781.json  \n",
            "   creating: train/58820/\n",
            "  inflating: train/58820/58820.csv   \n",
            "  inflating: train/58820/58820.jpg   \n",
            "  inflating: train/58820/58820.json  \n",
            "   creating: train/58822/\n",
            "  inflating: train/58822/58822.csv   \n",
            "  inflating: train/58822/58822.jpg   \n",
            "  inflating: train/58822/58822.json  \n",
            "   creating: train/58837/\n",
            "  inflating: train/58837/58837.csv   \n",
            "  inflating: train/58837/58837.jpg   \n",
            "  inflating: train/58837/58837.json  \n",
            "   creating: train/58841/\n",
            "  inflating: train/58841/58841.csv   \n",
            "  inflating: train/58841/58841.jpg   \n",
            "  inflating: train/58841/58841.json  \n",
            "   creating: train/58844/\n",
            "  inflating: train/58844/58844.csv   \n",
            "  inflating: train/58844/58844.jpg   \n",
            "  inflating: train/58844/58844.json  \n",
            "   creating: train/58849/\n",
            "  inflating: train/58849/58849.csv   \n",
            "  inflating: train/58849/58849.jpg   \n",
            "  inflating: train/58849/58849.json  \n",
            "   creating: train/58856/\n",
            "  inflating: train/58856/58856.csv   \n",
            "  inflating: train/58856/58856.jpg   \n",
            "  inflating: train/58856/58856.json  \n",
            "   creating: train/58860/\n",
            "  inflating: train/58860/58860.csv   \n",
            "  inflating: train/58860/58860.jpg   \n",
            "  inflating: train/58860/58860.json  \n",
            "   creating: train/58868/\n",
            "  inflating: train/58868/58868.csv   \n",
            "  inflating: train/58868/58868.jpg   \n",
            "  inflating: train/58868/58868.json  \n",
            "   creating: train/58880/\n",
            "  inflating: train/58880/58880.csv   \n",
            "  inflating: train/58880/58880.jpg   \n",
            "  inflating: train/58880/58880.json  \n",
            "   creating: train/58887/\n",
            "  inflating: train/58887/58887.csv   \n",
            "  inflating: train/58887/58887.jpg   \n",
            "  inflating: train/58887/58887.json  \n",
            "   creating: train/58890/\n",
            "  inflating: train/58890/58890.csv   \n",
            "  inflating: train/58890/58890.jpg   \n",
            "  inflating: train/58890/58890.json  \n",
            "   creating: train/58894/\n",
            "  inflating: train/58894/58894.csv   \n",
            "  inflating: train/58894/58894.jpg   \n",
            "  inflating: train/58894/58894.json  \n",
            "   creating: train/58915/\n",
            "  inflating: train/58915/58915.csv   \n",
            "  inflating: train/58915/58915.jpg   \n",
            "  inflating: train/58915/58915.json  \n",
            "   creating: train/58938/\n",
            "  inflating: train/58938/58938.csv   \n",
            "  inflating: train/58938/58938.jpg   \n",
            "  inflating: train/58938/58938.json  \n",
            "   creating: train/58950/\n",
            "  inflating: train/58950/58950.csv   \n",
            "  inflating: train/58950/58950.jpg   \n",
            "  inflating: train/58950/58950.json  \n",
            "   creating: train/58963/\n",
            "  inflating: train/58963/58963.csv   \n",
            "  inflating: train/58963/58963.jpg   \n",
            "  inflating: train/58963/58963.json  \n",
            "   creating: train/58971/\n",
            "  inflating: train/58971/58971.csv   \n",
            "  inflating: train/58971/58971.jpg   \n",
            "  inflating: train/58971/58971.json  \n",
            "   creating: train/58977/\n",
            "  inflating: train/58977/58977.csv   \n",
            "  inflating: train/58977/58977.jpg   \n",
            "  inflating: train/58977/58977.json  \n",
            "   creating: train/59011/\n",
            "  inflating: train/59011/59011.csv   \n",
            "  inflating: train/59011/59011.jpg   \n",
            "  inflating: train/59011/59011.json  \n",
            "   creating: train/59030/\n",
            "  inflating: train/59030/59030.csv   \n",
            "  inflating: train/59030/59030.jpg   \n",
            "  inflating: train/59030/59030.json  \n",
            "   creating: train/59085/\n",
            "  inflating: train/59085/59085.csv   \n",
            "  inflating: train/59085/59085.jpg   \n",
            "  inflating: train/59085/59085.json  \n",
            "   creating: train/59097/\n",
            "  inflating: train/59097/59097.csv   \n",
            "  inflating: train/59097/59097.jpg   \n",
            "  inflating: train/59097/59097.json  \n",
            "   creating: train/59104/\n",
            "  inflating: train/59104/59104.csv   \n",
            "  inflating: train/59104/59104.jpg   \n",
            "  inflating: train/59104/59104.json  \n",
            "   creating: train/59106/\n",
            "  inflating: train/59106/59106.csv   \n",
            "  inflating: train/59106/59106.jpg   \n",
            "  inflating: train/59106/59106.json  \n",
            "   creating: train/59123/\n",
            "  inflating: train/59123/59123.csv   \n",
            "  inflating: train/59123/59123.jpg   \n",
            "  inflating: train/59123/59123.json  \n",
            "   creating: train/59125/\n",
            "  inflating: train/59125/59125.csv   \n",
            "  inflating: train/59125/59125.jpg   \n",
            "  inflating: train/59125/59125.json  \n",
            "   creating: train/59126/\n",
            "  inflating: train/59126/59126.csv   \n",
            "  inflating: train/59126/59126.jpg   \n",
            "  inflating: train/59126/59126.json  \n",
            "   creating: train/59138/\n",
            "  inflating: train/59138/59138.csv   \n",
            "  inflating: train/59138/59138.jpg   \n",
            "  inflating: train/59138/59138.json  \n",
            "   creating: train/59160/\n",
            "  inflating: train/59160/59160.csv   \n",
            "  inflating: train/59160/59160.jpg   \n",
            "  inflating: train/59160/59160.json  \n",
            "   creating: train/59171/\n",
            "  inflating: train/59171/59171.csv   \n",
            "  inflating: train/59171/59171.jpg   \n",
            "  inflating: train/59171/59171.json  \n",
            "   creating: train/59179/\n",
            "  inflating: train/59179/59179.csv   \n",
            "  inflating: train/59179/59179.jpg   \n",
            "  inflating: train/59179/59179.json  \n",
            "   creating: train/59190/\n",
            "  inflating: train/59190/59190.csv   \n",
            "  inflating: train/59190/59190.jpg   \n",
            "  inflating: train/59190/59190.json  \n",
            "   creating: train/59195/\n",
            "  inflating: train/59195/59195.csv   \n",
            "  inflating: train/59195/59195.jpg   \n",
            "  inflating: train/59195/59195.json  \n",
            "   creating: train/59217/\n",
            "  inflating: train/59217/59217.csv   \n",
            "  inflating: train/59217/59217.jpg   \n",
            "  inflating: train/59217/59217.json  \n",
            "   creating: train/59218/\n",
            "  inflating: train/59218/59218.csv   \n",
            "  inflating: train/59218/59218.jpg   \n",
            "  inflating: train/59218/59218.json  \n",
            "   creating: train/59242/\n",
            "  inflating: train/59242/59242.csv   \n",
            "  inflating: train/59242/59242.jpg   \n",
            "  inflating: train/59242/59242.json  \n",
            "   creating: train/59256/\n",
            "  inflating: train/59256/59256.csv   \n",
            "  inflating: train/59256/59256.jpg   \n",
            "  inflating: train/59256/59256.json  \n",
            "   creating: train/59259/\n",
            "  inflating: train/59259/59259.csv   \n",
            "  inflating: train/59259/59259.jpg   \n",
            "  inflating: train/59259/59259.json  \n",
            "   creating: train/59266/\n",
            "  inflating: train/59266/59266.csv   \n",
            "  inflating: train/59266/59266.jpg   \n",
            "  inflating: train/59266/59266.json  \n",
            "   creating: train/59282/\n",
            "  inflating: train/59282/59282.csv   \n",
            "  inflating: train/59282/59282.jpg   \n",
            "  inflating: train/59282/59282.json  \n",
            "   creating: train/59294/\n",
            "  inflating: train/59294/59294.csv   \n",
            "  inflating: train/59294/59294.jpg   \n",
            "  inflating: train/59294/59294.json  \n",
            "   creating: train/59303/\n",
            "  inflating: train/59303/59303.csv   \n",
            "  inflating: train/59303/59303.jpg   \n",
            "  inflating: train/59303/59303.json  \n",
            "   creating: train/59308/\n",
            "  inflating: train/59308/59308.csv   \n",
            "  inflating: train/59308/59308.jpg   \n",
            "  inflating: train/59308/59308.json  \n",
            "   creating: train/59310/\n",
            "  inflating: train/59310/59310.csv   \n",
            "  inflating: train/59310/59310.jpg   \n",
            "  inflating: train/59310/59310.json  \n",
            "   creating: train/59313/\n",
            "  inflating: train/59313/59313.csv   \n",
            "  inflating: train/59313/59313.jpg   \n",
            "  inflating: train/59313/59313.json  \n",
            "   creating: train/59319/\n",
            "  inflating: train/59319/59319.csv   \n",
            "  inflating: train/59319/59319.jpg   \n",
            "  inflating: train/59319/59319.json  \n",
            "   creating: train/59332/\n",
            "  inflating: train/59332/59332.csv   \n",
            "  inflating: train/59332/59332.jpg   \n",
            "  inflating: train/59332/59332.json  \n",
            "   creating: train/59337/\n",
            "  inflating: train/59337/59337.csv   \n",
            "  inflating: train/59337/59337.jpg   \n",
            "  inflating: train/59337/59337.json  \n",
            "   creating: train/59362/\n",
            "  inflating: train/59362/59362.csv   \n",
            "  inflating: train/59362/59362.jpg   \n",
            "  inflating: train/59362/59362.json  \n",
            "   creating: train/59374/\n",
            "  inflating: train/59374/59374.csv   \n",
            "  inflating: train/59374/59374.jpg   \n",
            "  inflating: train/59374/59374.json  \n",
            "   creating: train/59406/\n",
            "  inflating: train/59406/59406.csv   \n",
            "  inflating: train/59406/59406.jpg   \n",
            "  inflating: train/59406/59406.json  \n",
            "   creating: train/59408/\n",
            "  inflating: train/59408/59408.csv   \n",
            "  inflating: train/59408/59408.jpg   \n",
            "  inflating: train/59408/59408.json  \n",
            "   creating: train/59418/\n",
            "  inflating: train/59418/59418.csv   \n",
            "  inflating: train/59418/59418.jpg   \n",
            "  inflating: train/59418/59418.json  \n",
            "   creating: train/59435/\n",
            "  inflating: train/59435/59435.csv   \n",
            "  inflating: train/59435/59435.jpg   \n",
            "  inflating: train/59435/59435.json  \n",
            "   creating: train/59436/\n",
            "  inflating: train/59436/59436.csv   \n",
            "  inflating: train/59436/59436.jpg   \n",
            "  inflating: train/59436/59436.json  \n",
            "   creating: train/59447/\n",
            "  inflating: train/59447/59447.csv   \n",
            "  inflating: train/59447/59447.jpg   \n",
            "  inflating: train/59447/59447.json  \n",
            "   creating: train/59448/\n",
            "  inflating: train/59448/59448.csv   \n",
            "  inflating: train/59448/59448.jpg   \n",
            "  inflating: train/59448/59448.json  \n",
            "   creating: train/59451/\n",
            "  inflating: train/59451/59451.csv   \n",
            "  inflating: train/59451/59451.jpg   \n",
            "  inflating: train/59451/59451.json  \n",
            "   creating: train/59458/\n",
            "  inflating: train/59458/59458.csv   \n",
            "  inflating: train/59458/59458.jpg   \n",
            "  inflating: train/59458/59458.json  \n",
            "   creating: train/59460/\n",
            "  inflating: train/59460/59460.csv   \n",
            "  inflating: train/59460/59460.jpg   \n",
            "  inflating: train/59460/59460.json  \n",
            "   creating: train/59465/\n",
            "  inflating: train/59465/59465.csv   \n",
            "  inflating: train/59465/59465.jpg   \n",
            "  inflating: train/59465/59465.json  \n",
            "   creating: train/59473/\n",
            "  inflating: train/59473/59473.csv   \n",
            "  inflating: train/59473/59473.jpg   \n",
            "  inflating: train/59473/59473.json  \n",
            "   creating: train/59474/\n",
            "  inflating: train/59474/59474.csv   \n",
            "  inflating: train/59474/59474.jpg   \n",
            "  inflating: train/59474/59474.json  \n",
            "   creating: train/59480/\n",
            "  inflating: train/59480/59480.csv   \n",
            "  inflating: train/59480/59480.jpg   \n",
            "  inflating: train/59480/59480.json  \n",
            "   creating: train/59492/\n",
            "  inflating: train/59492/59492.csv   \n",
            "  inflating: train/59492/59492.jpg   \n",
            "  inflating: train/59492/59492.json  \n",
            "   creating: train/59500/\n",
            "  inflating: train/59500/59500.csv   \n",
            "  inflating: train/59500/59500.jpg   \n",
            "  inflating: train/59500/59500.json  \n",
            "   creating: train/59501/\n",
            "  inflating: train/59501/59501.csv   \n",
            "  inflating: train/59501/59501.jpg   \n",
            "  inflating: train/59501/59501.json  \n",
            "   creating: train/59509/\n",
            "  inflating: train/59509/59509.csv   \n",
            "  inflating: train/59509/59509.jpg   \n",
            "  inflating: train/59509/59509.json  \n",
            "   creating: train/59518/\n",
            "  inflating: train/59518/59518.csv   \n",
            "  inflating: train/59518/59518.jpg   \n",
            "  inflating: train/59518/59518.json  \n",
            "   creating: train/59522/\n",
            "  inflating: train/59522/59522.csv   \n",
            "  inflating: train/59522/59522.jpg   \n",
            "  inflating: train/59522/59522.json  \n",
            "   creating: train/59556/\n",
            "  inflating: train/59556/59556.csv   \n",
            "  inflating: train/59556/59556.jpg   \n",
            "  inflating: train/59556/59556.json  \n",
            "   creating: train/59566/\n",
            "  inflating: train/59566/59566.csv   \n",
            "  inflating: train/59566/59566.jpg   \n",
            "  inflating: train/59566/59566.json  \n",
            "   creating: train/59580/\n",
            "  inflating: train/59580/59580.csv   \n",
            "  inflating: train/59580/59580.jpg   \n",
            "  inflating: train/59580/59580.json  \n",
            "   creating: train/59597/\n",
            "  inflating: train/59597/59597.csv   \n",
            "  inflating: train/59597/59597.jpg   \n",
            "  inflating: train/59597/59597.json  \n",
            "   creating: train/59598/\n",
            "  inflating: train/59598/59598.csv   \n",
            "  inflating: train/59598/59598.jpg   \n",
            "  inflating: train/59598/59598.json  \n",
            "   creating: train/59600/\n",
            "  inflating: train/59600/59600.csv   \n",
            "  inflating: train/59600/59600.jpg   \n",
            "  inflating: train/59600/59600.json  \n",
            "   creating: train/59607/\n",
            "  inflating: train/59607/59607.csv   \n",
            "  inflating: train/59607/59607.jpg   \n",
            "  inflating: train/59607/59607.json  \n",
            "   creating: train/59631/\n",
            "  inflating: train/59631/59631.csv   \n",
            "  inflating: train/59631/59631.jpg   \n",
            "  inflating: train/59631/59631.json  \n",
            "   creating: train/59635/\n",
            "  inflating: train/59635/59635.csv   \n",
            "  inflating: train/59635/59635.jpg   \n",
            "  inflating: train/59635/59635.json  \n",
            "   creating: train/59645/\n",
            "  inflating: train/59645/59645.csv   \n",
            "  inflating: train/59645/59645.jpg   \n",
            "  inflating: train/59645/59645.json  \n",
            "   creating: train/59648/\n",
            "  inflating: train/59648/59648.csv   \n",
            "  inflating: train/59648/59648.jpg   \n",
            "  inflating: train/59648/59648.json  \n",
            "   creating: train/59653/\n",
            "  inflating: train/59653/59653.csv   \n",
            "  inflating: train/59653/59653.jpg   \n",
            "  inflating: train/59653/59653.json  \n",
            "   creating: train/59666/\n",
            "  inflating: train/59666/59666.csv   \n",
            "  inflating: train/59666/59666.jpg   \n",
            "  inflating: train/59666/59666.json  \n",
            "   creating: train/59671/\n",
            "  inflating: train/59671/59671.csv   \n",
            "  inflating: train/59671/59671.jpg   \n",
            "  inflating: train/59671/59671.json  \n",
            "   creating: train/59680/\n",
            "  inflating: train/59680/59680.csv   \n",
            "  inflating: train/59680/59680.jpg   \n",
            "  inflating: train/59680/59680.json  \n",
            "   creating: train/59690/\n",
            "  inflating: train/59690/59690.csv   \n",
            "  inflating: train/59690/59690.jpg   \n",
            "  inflating: train/59690/59690.json  \n",
            "   creating: train/59713/\n",
            "  inflating: train/59713/59713.csv   \n",
            "  inflating: train/59713/59713.jpg   \n",
            "  inflating: train/59713/59713.json  \n",
            "   creating: train/59715/\n",
            "  inflating: train/59715/59715.csv   \n",
            "  inflating: train/59715/59715.jpg   \n",
            "  inflating: train/59715/59715.json  \n",
            "   creating: train/59716/\n",
            "  inflating: train/59716/59716.csv   \n",
            "  inflating: train/59716/59716.jpg   \n",
            "  inflating: train/59716/59716.json  \n",
            "   creating: train/59728/\n",
            "  inflating: train/59728/59728.csv   \n",
            "  inflating: train/59728/59728.jpg   \n",
            "  inflating: train/59728/59728.json  \n",
            "   creating: train/59753/\n",
            "  inflating: train/59753/59753.csv   \n",
            "  inflating: train/59753/59753.jpg   \n",
            "  inflating: train/59753/59753.json  \n",
            "   creating: train/59755/\n",
            "  inflating: train/59755/59755.csv   \n",
            "  inflating: train/59755/59755.jpg   \n",
            "  inflating: train/59755/59755.json  \n",
            "   creating: train/59766/\n",
            "  inflating: train/59766/59766.csv   \n",
            "  inflating: train/59766/59766.jpg   \n",
            "  inflating: train/59766/59766.json  \n",
            "   creating: train/59772/\n",
            "  inflating: train/59772/59772.csv   \n",
            "  inflating: train/59772/59772.jpg   \n",
            "  inflating: train/59772/59772.json  \n",
            "   creating: train/59783/\n",
            "  inflating: train/59783/59783.csv   \n",
            "  inflating: train/59783/59783.jpg   \n",
            "  inflating: train/59783/59783.json  \n",
            "   creating: train/59787/\n",
            "  inflating: train/59787/59787.csv   \n",
            "  inflating: train/59787/59787.jpg   \n",
            "  inflating: train/59787/59787.json  \n",
            "   creating: train/59791/\n",
            "  inflating: train/59791/59791.csv   \n",
            "  inflating: train/59791/59791.jpg   \n",
            "  inflating: train/59791/59791.json  \n",
            "   creating: train/59795/\n",
            "  inflating: train/59795/59795.csv   \n",
            "  inflating: train/59795/59795.jpg   \n",
            "  inflating: train/59795/59795.json  \n",
            "   creating: train/59796/\n",
            "  inflating: train/59796/59796.csv   \n",
            "  inflating: train/59796/59796.jpg   \n",
            "  inflating: train/59796/59796.json  \n",
            "   creating: train/59808/\n",
            "  inflating: train/59808/59808.csv   \n",
            "  inflating: train/59808/59808.jpg   \n",
            "  inflating: train/59808/59808.json  \n",
            "   creating: train/59830/\n",
            "  inflating: train/59830/59830.csv   \n",
            "  inflating: train/59830/59830.jpg   \n",
            "  inflating: train/59830/59830.json  \n",
            "   creating: train/59836/\n",
            "  inflating: train/59836/59836.csv   \n",
            "  inflating: train/59836/59836.jpg   \n",
            "  inflating: train/59836/59836.json  \n",
            "   creating: train/59837/\n",
            "  inflating: train/59837/59837.csv   \n",
            "  inflating: train/59837/59837.jpg   \n",
            "  inflating: train/59837/59837.json  \n",
            "   creating: train/59845/\n",
            "  inflating: train/59845/59845.csv   \n",
            "  inflating: train/59845/59845.jpg   \n",
            "  inflating: train/59845/59845.json  \n",
            "   creating: train/59855/\n",
            "  inflating: train/59855/59855.csv   \n",
            "  inflating: train/59855/59855.jpg   \n",
            "  inflating: train/59855/59855.json  \n",
            "   creating: train/59866/\n",
            "  inflating: train/59866/59866.csv   \n",
            "  inflating: train/59866/59866.jpg   \n",
            "  inflating: train/59866/59866.json  \n",
            "   creating: train/59869/\n",
            "  inflating: train/59869/59869.csv   \n",
            "  inflating: train/59869/59869.jpg   \n",
            "  inflating: train/59869/59869.json  \n",
            "   creating: train/59875/\n",
            "  inflating: train/59875/59875.csv   \n",
            "  inflating: train/59875/59875.jpg   \n",
            "  inflating: train/59875/59875.json  \n",
            "   creating: train/59898/\n",
            "  inflating: train/59898/59898.csv   \n",
            "  inflating: train/59898/59898.jpg   \n",
            "  inflating: train/59898/59898.json  \n",
            "   creating: train/59904/\n",
            "  inflating: train/59904/59904.csv   \n",
            "  inflating: train/59904/59904.jpg   \n",
            "  inflating: train/59904/59904.json  \n",
            "   creating: train/59918/\n",
            "  inflating: train/59918/59918.csv   \n",
            "  inflating: train/59918/59918.jpg   \n",
            "  inflating: train/59918/59918.json  \n",
            "   creating: train/59923/\n",
            "  inflating: train/59923/59923.csv   \n",
            "  inflating: train/59923/59923.jpg   \n",
            "  inflating: train/59923/59923.json  \n",
            "   creating: train/59926/\n",
            "  inflating: train/59926/59926.csv   \n",
            "  inflating: train/59926/59926.jpg   \n",
            "  inflating: train/59926/59926.json  \n",
            "   creating: train/59930/\n",
            "  inflating: train/59930/59930.csv   \n",
            "  inflating: train/59930/59930.jpg   \n",
            "  inflating: train/59930/59930.json  \n",
            "   creating: train/59933/\n",
            "  inflating: train/59933/59933.csv   \n",
            "  inflating: train/59933/59933.jpg   \n",
            "  inflating: train/59933/59933.json  \n",
            "   creating: train/59937/\n",
            "  inflating: train/59937/59937.csv   \n",
            "  inflating: train/59937/59937.jpg   \n",
            "  inflating: train/59937/59937.json  \n",
            "   creating: train/59945/\n",
            "  inflating: train/59945/59945.csv   \n",
            "  inflating: train/59945/59945.jpg   \n",
            "  inflating: train/59945/59945.json  \n",
            "   creating: train/59952/\n",
            "  inflating: train/59952/59952.csv   \n",
            "  inflating: train/59952/59952.jpg   \n",
            "  inflating: train/59952/59952.json  \n",
            "   creating: train/59957/\n",
            "  inflating: train/59957/59957.csv   \n",
            "  inflating: train/59957/59957.jpg   \n",
            "  inflating: train/59957/59957.json  \n",
            "   creating: train/59959/\n",
            "  inflating: train/59959/59959.csv   \n",
            "  inflating: train/59959/59959.jpg   \n",
            "  inflating: train/59959/59959.json  \n",
            "   creating: train/59963/\n",
            "  inflating: train/59963/59963.csv   \n",
            "  inflating: train/59963/59963.jpg   \n",
            "  inflating: train/59963/59963.json  \n",
            "   creating: train/59979/\n",
            "  inflating: train/59979/59979.csv   \n",
            "  inflating: train/59979/59979.jpg   \n",
            "  inflating: train/59979/59979.json  \n",
            "   creating: train/59981/\n",
            "  inflating: train/59981/59981.csv   \n",
            "  inflating: train/59981/59981.jpg   \n",
            "  inflating: train/59981/59981.json  \n",
            "   creating: train/59988/\n",
            "  inflating: train/59988/59988.csv   \n",
            "  inflating: train/59988/59988.jpg   \n",
            "  inflating: train/59988/59988.json  \n",
            "   creating: train/60006/\n",
            "  inflating: train/60006/60006.csv   \n",
            "  inflating: train/60006/60006.jpg   \n",
            "  inflating: train/60006/60006.json  \n",
            "   creating: train/60009/\n",
            "  inflating: train/60009/60009.csv   \n",
            "  inflating: train/60009/60009.jpg   \n",
            "  inflating: train/60009/60009.json  \n",
            "   creating: train/60011/\n",
            "  inflating: train/60011/60011.csv   \n",
            "  inflating: train/60011/60011.jpg   \n",
            "  inflating: train/60011/60011.json  \n",
            "   creating: train/60032/\n",
            "  inflating: train/60032/60032.csv   \n",
            "  inflating: train/60032/60032.jpg   \n",
            "  inflating: train/60032/60032.json  \n",
            "   creating: train/60036/\n",
            "  inflating: train/60036/60036.csv   \n",
            "  inflating: train/60036/60036.jpg   \n",
            "  inflating: train/60036/60036.json  \n",
            "   creating: train/60037/\n",
            "  inflating: train/60037/60037.csv   \n",
            "  inflating: train/60037/60037.jpg   \n",
            "  inflating: train/60037/60037.json  \n",
            "   creating: train/60041/\n",
            "  inflating: train/60041/60041.csv   \n",
            "  inflating: train/60041/60041.jpg   \n",
            "  inflating: train/60041/60041.json  \n",
            "   creating: train/60042/\n",
            "  inflating: train/60042/60042.csv   \n",
            "  inflating: train/60042/60042.jpg   \n",
            "  inflating: train/60042/60042.json  \n",
            "   creating: train/60045/\n",
            "  inflating: train/60045/60045.csv   \n",
            "  inflating: train/60045/60045.jpg   \n",
            "  inflating: train/60045/60045.json  \n",
            "   creating: train/60046/\n",
            "  inflating: train/60046/60046.csv   \n",
            "  inflating: train/60046/60046.jpg   \n",
            "  inflating: train/60046/60046.json  \n",
            "   creating: train/60047/\n",
            "  inflating: train/60047/60047.csv   \n",
            "  inflating: train/60047/60047.jpg   \n",
            "  inflating: train/60047/60047.json  \n",
            "   creating: train/60062/\n",
            "  inflating: train/60062/60062.csv   \n",
            "  inflating: train/60062/60062.jpg   \n",
            "  inflating: train/60062/60062.json  \n",
            "   creating: train/60072/\n",
            "  inflating: train/60072/60072.csv   \n",
            "  inflating: train/60072/60072.jpg   \n",
            "  inflating: train/60072/60072.json  \n",
            "   creating: train/60074/\n",
            "  inflating: train/60074/60074.csv   \n",
            "  inflating: train/60074/60074.jpg   \n",
            "  inflating: train/60074/60074.json  \n",
            "   creating: train/60090/\n",
            "  inflating: train/60090/60090.csv   \n",
            "  inflating: train/60090/60090.jpg   \n",
            "  inflating: train/60090/60090.json  \n",
            "   creating: train/60102/\n",
            "  inflating: train/60102/60102.csv   \n",
            "  inflating: train/60102/60102.jpg   \n",
            "  inflating: train/60102/60102.json  \n",
            "   creating: train/60107/\n",
            "  inflating: train/60107/60107.csv   \n",
            "  inflating: train/60107/60107.jpg   \n",
            "  inflating: train/60107/60107.json  \n",
            "   creating: train/60126/\n",
            "  inflating: train/60126/60126.csv   \n",
            "  inflating: train/60126/60126.jpg   \n",
            "  inflating: train/60126/60126.json  \n",
            "   creating: train/60133/\n",
            "  inflating: train/60133/60133.csv   \n",
            "  inflating: train/60133/60133.jpg   \n",
            "  inflating: train/60133/60133.json  \n",
            "   creating: train/60150/\n",
            "  inflating: train/60150/60150.csv   \n",
            "  inflating: train/60150/60150.jpg   \n",
            "  inflating: train/60150/60150.json  \n",
            "   creating: train/60154/\n",
            "  inflating: train/60154/60154.csv   \n",
            "  inflating: train/60154/60154.jpg   \n",
            "  inflating: train/60154/60154.json  \n",
            "   creating: train/60156/\n",
            "  inflating: train/60156/60156.csv   \n",
            "  inflating: train/60156/60156.jpg   \n",
            "  inflating: train/60156/60156.json  \n",
            "   creating: train/60209/\n",
            "  inflating: train/60209/60209.csv   \n",
            "  inflating: train/60209/60209.jpg   \n",
            "  inflating: train/60209/60209.json  \n",
            "   creating: train/60220/\n",
            "  inflating: train/60220/60220.csv   \n",
            "  inflating: train/60220/60220.jpg   \n",
            "  inflating: train/60220/60220.json  \n",
            "   creating: train/60224/\n",
            "  inflating: train/60224/60224.csv   \n",
            "  inflating: train/60224/60224.jpg   \n",
            "  inflating: train/60224/60224.json  \n",
            "   creating: train/60226/\n",
            "  inflating: train/60226/60226.csv   \n",
            "  inflating: train/60226/60226.jpg   \n",
            "  inflating: train/60226/60226.json  \n",
            "   creating: train/60229/\n",
            "  inflating: train/60229/60229.csv   \n",
            "  inflating: train/60229/60229.jpg   \n",
            "  inflating: train/60229/60229.json  \n",
            "   creating: train/60246/\n",
            "  inflating: train/60246/60246.csv   \n",
            "  inflating: train/60246/60246.jpg   \n",
            "  inflating: train/60246/60246.json  \n",
            "   creating: train/60251/\n",
            "  inflating: train/60251/60251.csv   \n",
            "  inflating: train/60251/60251.jpg   \n",
            "  inflating: train/60251/60251.json  \n",
            "   creating: train/60284/\n",
            "  inflating: train/60284/60284.csv   \n",
            "  inflating: train/60284/60284.jpg   \n",
            "  inflating: train/60284/60284.json  \n",
            "   creating: train/60307/\n",
            "  inflating: train/60307/60307.csv   \n",
            "  inflating: train/60307/60307.jpg   \n",
            "  inflating: train/60307/60307.json  \n",
            "   creating: train/60312/\n",
            "  inflating: train/60312/60312.csv   \n",
            "  inflating: train/60312/60312.jpg   \n",
            "  inflating: train/60312/60312.json  \n",
            "   creating: train/60332/\n",
            "  inflating: train/60332/60332.csv   \n",
            "  inflating: train/60332/60332.jpg   \n",
            "  inflating: train/60332/60332.json  \n",
            "   creating: train/60343/\n",
            "  inflating: train/60343/60343.csv   \n",
            "  inflating: train/60343/60343.jpg   \n",
            "  inflating: train/60343/60343.json  \n",
            "   creating: train/60347/\n",
            "  inflating: train/60347/60347.csv   \n",
            "  inflating: train/60347/60347.jpg   \n",
            "  inflating: train/60347/60347.json  \n",
            "   creating: train/60351/\n",
            "  inflating: train/60351/60351.csv   \n",
            "  inflating: train/60351/60351.jpg   \n",
            "  inflating: train/60351/60351.json  \n",
            "   creating: train/60357/\n",
            "  inflating: train/60357/60357.csv   \n",
            "  inflating: train/60357/60357.jpg   \n",
            "  inflating: train/60357/60357.json  \n",
            "   creating: train/60378/\n",
            "  inflating: train/60378/60378.csv   \n",
            "  inflating: train/60378/60378.jpg   \n",
            "  inflating: train/60378/60378.json  \n",
            "   creating: train/60389/\n",
            "  inflating: train/60389/60389.csv   \n",
            "  inflating: train/60389/60389.jpg   \n",
            "  inflating: train/60389/60389.json  \n",
            "   creating: train/60409/\n",
            "  inflating: train/60409/60409.csv   \n",
            "  inflating: train/60409/60409.jpg   \n",
            "  inflating: train/60409/60409.json  \n",
            "   creating: train/60421/\n",
            "  inflating: train/60421/60421.csv   \n",
            "  inflating: train/60421/60421.jpg   \n",
            "  inflating: train/60421/60421.json  \n",
            "   creating: train/60450/\n",
            "  inflating: train/60450/60450.csv   \n",
            "  inflating: train/60450/60450.jpg   \n",
            "  inflating: train/60450/60450.json  \n",
            "   creating: train/60462/\n",
            "  inflating: train/60462/60462.csv   \n",
            "  inflating: train/60462/60462.jpg   \n",
            "  inflating: train/60462/60462.json  \n",
            "   creating: train/60468/\n",
            "  inflating: train/60468/60468.csv   \n",
            "  inflating: train/60468/60468.jpg   \n",
            "  inflating: train/60468/60468.json  \n",
            "   creating: train/60473/\n",
            "  inflating: train/60473/60473.csv   \n",
            "  inflating: train/60473/60473.jpg   \n",
            "  inflating: train/60473/60473.json  \n",
            "   creating: train/60478/\n",
            "  inflating: train/60478/60478.csv   \n",
            "  inflating: train/60478/60478.jpg   \n",
            "  inflating: train/60478/60478.json  \n",
            "   creating: train/60482/\n",
            "  inflating: train/60482/60482.csv   \n",
            "  inflating: train/60482/60482.jpg   \n",
            "  inflating: train/60482/60482.json  \n",
            "   creating: train/60499/\n",
            "  inflating: train/60499/60499.csv   \n",
            "  inflating: train/60499/60499.jpg   \n",
            "  inflating: train/60499/60499.json  \n",
            "   creating: train/60500/\n",
            "  inflating: train/60500/60500.csv   \n",
            "  inflating: train/60500/60500.jpg   \n",
            "  inflating: train/60500/60500.json  \n",
            "   creating: train/60516/\n",
            "  inflating: train/60516/60516.csv   \n",
            "  inflating: train/60516/60516.jpg   \n",
            "  inflating: train/60516/60516.json  \n",
            "   creating: train/60523/\n",
            "  inflating: train/60523/60523.csv   \n",
            "  inflating: train/60523/60523.jpg   \n",
            "  inflating: train/60523/60523.json  \n",
            "   creating: train/60529/\n",
            "  inflating: train/60529/60529.csv   \n",
            "  inflating: train/60529/60529.jpg   \n",
            "  inflating: train/60529/60529.json  \n",
            "   creating: train/60531/\n",
            "  inflating: train/60531/60531.csv   \n",
            "  inflating: train/60531/60531.jpg   \n",
            "  inflating: train/60531/60531.json  \n",
            "   creating: train/60544/\n",
            "  inflating: train/60544/60544.csv   \n",
            "  inflating: train/60544/60544.jpg   \n",
            "  inflating: train/60544/60544.json  \n",
            "   creating: train/60548/\n",
            "  inflating: train/60548/60548.csv   \n",
            "  inflating: train/60548/60548.jpg   \n",
            "  inflating: train/60548/60548.json  \n",
            "   creating: train/60560/\n",
            "  inflating: train/60560/60560.csv   \n",
            "  inflating: train/60560/60560.jpg   \n",
            "  inflating: train/60560/60560.json  \n",
            "   creating: train/60566/\n",
            "  inflating: train/60566/60566.csv   \n",
            "  inflating: train/60566/60566.jpg   \n",
            "  inflating: train/60566/60566.json  \n",
            "   creating: train/60567/\n",
            "  inflating: train/60567/60567.csv   \n",
            "  inflating: train/60567/60567.jpg   \n",
            "  inflating: train/60567/60567.json  \n",
            "   creating: train/60569/\n",
            "  inflating: train/60569/60569.csv   \n",
            "  inflating: train/60569/60569.jpg   \n",
            "  inflating: train/60569/60569.json  \n",
            "   creating: train/60576/\n",
            "  inflating: train/60576/60576.csv   \n",
            "  inflating: train/60576/60576.jpg   \n",
            "  inflating: train/60576/60576.json  \n",
            "   creating: train/60578/\n",
            "  inflating: train/60578/60578.csv   \n",
            "  inflating: train/60578/60578.jpg   \n",
            "  inflating: train/60578/60578.json  \n",
            "   creating: train/60579/\n",
            "  inflating: train/60579/60579.csv   \n",
            "  inflating: train/60579/60579.jpg   \n",
            "  inflating: train/60579/60579.json  \n",
            "   creating: train/60584/\n",
            "  inflating: train/60584/60584.csv   \n",
            "  inflating: train/60584/60584.jpg   \n",
            "  inflating: train/60584/60584.json  \n",
            "   creating: train/60610/\n",
            "  inflating: train/60610/60610.csv   \n",
            "  inflating: train/60610/60610.jpg   \n",
            "  inflating: train/60610/60610.json  \n",
            "   creating: train/60614/\n",
            "  inflating: train/60614/60614.csv   \n",
            "  inflating: train/60614/60614.jpg   \n",
            "  inflating: train/60614/60614.json  \n",
            "   creating: train/60616/\n",
            "  inflating: train/60616/60616.csv   \n",
            "  inflating: train/60616/60616.jpg   \n",
            "  inflating: train/60616/60616.json  \n",
            "   creating: train/60617/\n",
            "  inflating: train/60617/60617.csv   \n",
            "  inflating: train/60617/60617.jpg   \n",
            "  inflating: train/60617/60617.json  \n",
            "   creating: train/60627/\n",
            "  inflating: train/60627/60627.csv   \n",
            "  inflating: train/60627/60627.jpg   \n",
            "  inflating: train/60627/60627.json  \n",
            "   creating: train/60643/\n",
            "  inflating: train/60643/60643.csv   \n",
            "  inflating: train/60643/60643.jpg   \n",
            "  inflating: train/60643/60643.json  \n",
            "   creating: train/60647/\n",
            "  inflating: train/60647/60647.csv   \n",
            "  inflating: train/60647/60647.jpg   \n",
            "  inflating: train/60647/60647.json  \n",
            "   creating: train/60652/\n",
            "  inflating: train/60652/60652.csv   \n",
            "  inflating: train/60652/60652.jpg   \n",
            "  inflating: train/60652/60652.json  \n",
            "   creating: train/60653/\n",
            "  inflating: train/60653/60653.csv   \n",
            "  inflating: train/60653/60653.jpg   \n",
            "  inflating: train/60653/60653.json  \n",
            "   creating: train/60659/\n",
            "  inflating: train/60659/60659.csv   \n",
            "  inflating: train/60659/60659.jpg   \n",
            "  inflating: train/60659/60659.json  \n",
            "   creating: train/60665/\n",
            "  inflating: train/60665/60665.csv   \n",
            "  inflating: train/60665/60665.jpg   \n",
            "  inflating: train/60665/60665.json  \n",
            "   creating: train/60681/\n",
            "  inflating: train/60681/60681.csv   \n",
            "  inflating: train/60681/60681.jpg   \n",
            "  inflating: train/60681/60681.json  \n",
            "   creating: train/60685/\n",
            "  inflating: train/60685/60685.csv   \n",
            "  inflating: train/60685/60685.jpg   \n",
            "  inflating: train/60685/60685.json  \n",
            "   creating: train/60686/\n",
            "  inflating: train/60686/60686.csv   \n",
            "  inflating: train/60686/60686.jpg   \n",
            "  inflating: train/60686/60686.json  \n",
            "   creating: train/60688/\n",
            "  inflating: train/60688/60688.csv   \n",
            "  inflating: train/60688/60688.jpg   \n",
            "  inflating: train/60688/60688.json  \n",
            "   creating: train/60705/\n",
            "  inflating: train/60705/60705.csv   \n",
            "  inflating: train/60705/60705.jpg   \n",
            "  inflating: train/60705/60705.json  \n",
            "   creating: train/60740/\n",
            "  inflating: train/60740/60740.csv   \n",
            "  inflating: train/60740/60740.jpg   \n",
            "  inflating: train/60740/60740.json  \n",
            "   creating: train/60746/\n",
            "  inflating: train/60746/60746.csv   \n",
            "  inflating: train/60746/60746.jpg   \n",
            "  inflating: train/60746/60746.json  \n",
            "   creating: train/60759/\n",
            "  inflating: train/60759/60759.csv   \n",
            "  inflating: train/60759/60759.jpg   \n",
            "  inflating: train/60759/60759.json  \n",
            "   creating: train/60787/\n",
            "  inflating: train/60787/60787.csv   \n",
            "  inflating: train/60787/60787.jpg   \n",
            "  inflating: train/60787/60787.json  \n",
            "   creating: train/60799/\n",
            "  inflating: train/60799/60799.csv   \n",
            "  inflating: train/60799/60799.jpg   \n",
            "  inflating: train/60799/60799.json  \n",
            "   creating: train/60800/\n",
            "  inflating: train/60800/60800.csv   \n",
            "  inflating: train/60800/60800.jpg   \n",
            "  inflating: train/60800/60800.json  \n",
            "   creating: train/60808/\n",
            "  inflating: train/60808/60808.csv   \n",
            "  inflating: train/60808/60808.jpg   \n",
            "  inflating: train/60808/60808.json  \n",
            "   creating: train/60818/\n",
            "  inflating: train/60818/60818.csv   \n",
            "  inflating: train/60818/60818.jpg   \n",
            "  inflating: train/60818/60818.json  \n",
            "   creating: train/60838/\n",
            "  inflating: train/60838/60838.csv   \n",
            "  inflating: train/60838/60838.jpg   \n",
            "  inflating: train/60838/60838.json  \n",
            "   creating: train/60843/\n",
            "  inflating: train/60843/60843.csv   \n",
            "  inflating: train/60843/60843.jpg   \n",
            "  inflating: train/60843/60843.json  \n",
            "   creating: train/60855/\n",
            "  inflating: train/60855/60855.csv   \n",
            "  inflating: train/60855/60855.jpg   \n",
            "  inflating: train/60855/60855.json  \n",
            "   creating: train/60864/\n",
            "  inflating: train/60864/60864.csv   \n",
            "  inflating: train/60864/60864.jpg   \n",
            "  inflating: train/60864/60864.json  \n",
            "   creating: train/60871/\n",
            "  inflating: train/60871/60871.csv   \n",
            "  inflating: train/60871/60871.jpg   \n",
            "  inflating: train/60871/60871.json  \n",
            "   creating: train/60896/\n",
            "  inflating: train/60896/60896.csv   \n",
            "  inflating: train/60896/60896.jpg   \n",
            "  inflating: train/60896/60896.json  \n",
            "   creating: train/60900/\n",
            "  inflating: train/60900/60900.csv   \n",
            "  inflating: train/60900/60900.jpg   \n",
            "  inflating: train/60900/60900.json  \n",
            "   creating: train/60912/\n",
            "  inflating: train/60912/60912.csv   \n",
            "  inflating: train/60912/60912.jpg   \n",
            "  inflating: train/60912/60912.json  \n",
            "   creating: train/60921/\n",
            "  inflating: train/60921/60921.csv   \n",
            "  inflating: train/60921/60921.jpg   \n",
            "  inflating: train/60921/60921.json  \n",
            "   creating: train/60938/\n",
            "  inflating: train/60938/60938.csv   \n",
            "  inflating: train/60938/60938.jpg   \n",
            "  inflating: train/60938/60938.json  \n",
            "   creating: train/60947/\n",
            "  inflating: train/60947/60947.csv   \n",
            "  inflating: train/60947/60947.jpg   \n",
            "  inflating: train/60947/60947.json  \n",
            "   creating: train/60974/\n",
            "  inflating: train/60974/60974.csv   \n",
            "  inflating: train/60974/60974.jpg   \n",
            "  inflating: train/60974/60974.json  \n",
            "   creating: train/60976/\n",
            "  inflating: train/60976/60976.csv   \n",
            "  inflating: train/60976/60976.jpg   \n",
            "  inflating: train/60976/60976.json  \n",
            "   creating: train/60979/\n",
            "  inflating: train/60979/60979.csv   \n",
            "  inflating: train/60979/60979.jpg   \n",
            "  inflating: train/60979/60979.json  \n",
            "   creating: train/60990/\n",
            "  inflating: train/60990/60990.csv   \n",
            "  inflating: train/60990/60990.jpg   \n",
            "  inflating: train/60990/60990.json  \n",
            "   creating: train/61001/\n",
            "  inflating: train/61001/61001.csv   \n",
            "  inflating: train/61001/61001.jpg   \n",
            "  inflating: train/61001/61001.json  \n",
            "   creating: train/61004/\n",
            "  inflating: train/61004/61004.csv   \n",
            "  inflating: train/61004/61004.jpg   \n",
            "  inflating: train/61004/61004.json  \n",
            "   creating: train/61006/\n",
            "  inflating: train/61006/61006.csv   \n",
            "  inflating: train/61006/61006.jpg   \n",
            "  inflating: train/61006/61006.json  \n",
            "   creating: train/61019/\n",
            "  inflating: train/61019/61019.csv   \n",
            "  inflating: train/61019/61019.jpg   \n",
            "  inflating: train/61019/61019.json  \n",
            "   creating: train/61024/\n",
            "  inflating: train/61024/61024.csv   \n",
            "  inflating: train/61024/61024.jpg   \n",
            "  inflating: train/61024/61024.json  \n",
            "   creating: train/61029/\n",
            "  inflating: train/61029/61029.csv   \n",
            "  inflating: train/61029/61029.jpg   \n",
            "  inflating: train/61029/61029.json  \n",
            "   creating: train/61041/\n",
            "  inflating: train/61041/61041.csv   \n",
            "  inflating: train/61041/61041.jpg   \n",
            "  inflating: train/61041/61041.json  \n",
            "   creating: train/61055/\n",
            "  inflating: train/61055/61055.csv   \n",
            "  inflating: train/61055/61055.jpg   \n",
            "  inflating: train/61055/61055.json  \n",
            "   creating: train/61075/\n",
            "  inflating: train/61075/61075.csv   \n",
            "  inflating: train/61075/61075.jpg   \n",
            "  inflating: train/61075/61075.json  \n",
            "   creating: train/61085/\n",
            "  inflating: train/61085/61085.csv   \n",
            "  inflating: train/61085/61085.jpg   \n",
            "  inflating: train/61085/61085.json  \n",
            "   creating: train/61087/\n",
            "  inflating: train/61087/61087.csv   \n",
            "  inflating: train/61087/61087.jpg   \n",
            "  inflating: train/61087/61087.json  \n",
            "   creating: train/61118/\n",
            "  inflating: train/61118/61118.csv   \n",
            "  inflating: train/61118/61118.jpg   \n",
            "  inflating: train/61118/61118.json  \n",
            "   creating: train/61126/\n",
            "  inflating: train/61126/61126.csv   \n",
            "  inflating: train/61126/61126.jpg   \n",
            "  inflating: train/61126/61126.json  \n",
            "   creating: train/61137/\n",
            "  inflating: train/61137/61137.csv   \n",
            "  inflating: train/61137/61137.jpg   \n",
            "  inflating: train/61137/61137.json  \n",
            "   creating: train/61153/\n",
            "  inflating: train/61153/61153.csv   \n",
            "  inflating: train/61153/61153.jpg   \n",
            "  inflating: train/61153/61153.json  \n",
            "   creating: train/61156/\n",
            "  inflating: train/61156/61156.csv   \n",
            "  inflating: train/61156/61156.jpg   \n",
            "  inflating: train/61156/61156.json  \n",
            "   creating: train/61190/\n",
            "  inflating: train/61190/61190.csv   \n",
            "  inflating: train/61190/61190.jpg   \n",
            "  inflating: train/61190/61190.json  \n",
            "   creating: train/61195/\n",
            "  inflating: train/61195/61195.csv   \n",
            "  inflating: train/61195/61195.jpg   \n",
            "  inflating: train/61195/61195.json  \n",
            "   creating: train/61200/\n",
            "  inflating: train/61200/61200.csv   \n",
            "  inflating: train/61200/61200.jpg   \n",
            "  inflating: train/61200/61200.json  \n",
            "   creating: train/61205/\n",
            "  inflating: train/61205/61205.csv   \n",
            "  inflating: train/61205/61205.jpg   \n",
            "  inflating: train/61205/61205.json  \n",
            "   creating: train/61245/\n",
            "  inflating: train/61245/61245.csv   \n",
            "  inflating: train/61245/61245.jpg   \n",
            "  inflating: train/61245/61245.json  \n",
            "   creating: train/61251/\n",
            "  inflating: train/61251/61251.csv   \n",
            "  inflating: train/61251/61251.jpg   \n",
            "  inflating: train/61251/61251.json  \n",
            "   creating: train/61253/\n",
            "  inflating: train/61253/61253.csv   \n",
            "  inflating: train/61253/61253.jpg   \n",
            "  inflating: train/61253/61253.json  \n",
            "   creating: train/61271/\n",
            "  inflating: train/61271/61271.csv   \n",
            "  inflating: train/61271/61271.jpg   \n",
            "  inflating: train/61271/61271.json  \n",
            "   creating: train/61275/\n",
            "  inflating: train/61275/61275.csv   \n",
            "  inflating: train/61275/61275.jpg   \n",
            "  inflating: train/61275/61275.json  \n",
            "   creating: train/61279/\n",
            "  inflating: train/61279/61279.csv   \n",
            "  inflating: train/61279/61279.jpg   \n",
            "  inflating: train/61279/61279.json  \n",
            "   creating: train/61310/\n",
            "  inflating: train/61310/61310.csv   \n",
            "  inflating: train/61310/61310.jpg   \n",
            "  inflating: train/61310/61310.json  \n",
            "   creating: train/61324/\n",
            "  inflating: train/61324/61324.csv   \n",
            "  inflating: train/61324/61324.jpg   \n",
            "  inflating: train/61324/61324.json  \n",
            "   creating: train/61328/\n",
            "  inflating: train/61328/61328.csv   \n",
            "  inflating: train/61328/61328.jpg   \n",
            "  inflating: train/61328/61328.json  \n",
            "   creating: train/61331/\n",
            "  inflating: train/61331/61331.csv   \n",
            "  inflating: train/61331/61331.jpg   \n",
            "  inflating: train/61331/61331.json  \n",
            "   creating: train/61354/\n",
            "  inflating: train/61354/61354.csv   \n",
            "  inflating: train/61354/61354.jpg   \n",
            "  inflating: train/61354/61354.json  \n",
            "   creating: train/61359/\n",
            "  inflating: train/61359/61359.csv   \n",
            "  inflating: train/61359/61359.jpg   \n",
            "  inflating: train/61359/61359.json  \n",
            "   creating: train/61363/\n",
            "  inflating: train/61363/61363.csv   \n",
            "  inflating: train/61363/61363.jpg   \n",
            "  inflating: train/61363/61363.json  \n",
            "   creating: train/61366/\n",
            "  inflating: train/61366/61366.csv   \n",
            "  inflating: train/61366/61366.jpg   \n",
            "  inflating: train/61366/61366.json  \n",
            "   creating: train/61367/\n",
            "  inflating: train/61367/61367.csv   \n",
            "  inflating: train/61367/61367.jpg   \n",
            "  inflating: train/61367/61367.json  \n",
            "   creating: train/61373/\n",
            "  inflating: train/61373/61373.csv   \n",
            "  inflating: train/61373/61373.jpg   \n",
            "  inflating: train/61373/61373.json  \n",
            "   creating: train/61378/\n",
            "  inflating: train/61378/61378.csv   \n",
            "  inflating: train/61378/61378.jpg   \n",
            "  inflating: train/61378/61378.json  \n",
            "   creating: train/61383/\n",
            "  inflating: train/61383/61383.csv   \n",
            "  inflating: train/61383/61383.jpg   \n",
            "  inflating: train/61383/61383.json  \n",
            "   creating: train/61397/\n",
            "  inflating: train/61397/61397.csv   \n",
            "  inflating: train/61397/61397.jpg   \n",
            "  inflating: train/61397/61397.json  \n",
            "   creating: train/61402/\n",
            "  inflating: train/61402/61402.csv   \n",
            "  inflating: train/61402/61402.jpg   \n",
            "  inflating: train/61402/61402.json  \n",
            "   creating: train/61405/\n",
            "  inflating: train/61405/61405.csv   \n",
            "  inflating: train/61405/61405.jpg   \n",
            "  inflating: train/61405/61405.json  \n",
            "   creating: train/61416/\n",
            "  inflating: train/61416/61416.csv   \n",
            "  inflating: train/61416/61416.jpg   \n",
            "  inflating: train/61416/61416.json  \n",
            "   creating: train/61421/\n",
            "  inflating: train/61421/61421.csv   \n",
            "  inflating: train/61421/61421.jpg   \n",
            "  inflating: train/61421/61421.json  \n",
            "   creating: train/61435/\n",
            "  inflating: train/61435/61435.csv   \n",
            "  inflating: train/61435/61435.jpg   \n",
            "  inflating: train/61435/61435.json  \n",
            "   creating: train/61444/\n",
            "  inflating: train/61444/61444.csv   \n",
            "  inflating: train/61444/61444.jpg   \n",
            "  inflating: train/61444/61444.json  \n",
            "   creating: train/61453/\n",
            "  inflating: train/61453/61453.csv   \n",
            "  inflating: train/61453/61453.jpg   \n",
            "  inflating: train/61453/61453.json  \n",
            "   creating: train/61476/\n",
            "  inflating: train/61476/61476.csv   \n",
            "  inflating: train/61476/61476.jpg   \n",
            "  inflating: train/61476/61476.json  \n",
            "   creating: train/61487/\n",
            "  inflating: train/61487/61487.csv   \n",
            "  inflating: train/61487/61487.jpg   \n",
            "  inflating: train/61487/61487.json  \n",
            "   creating: train/61507/\n",
            "  inflating: train/61507/61507.csv   \n",
            "  inflating: train/61507/61507.jpg   \n",
            "  inflating: train/61507/61507.json  \n",
            "   creating: train/61508/\n",
            "  inflating: train/61508/61508.csv   \n",
            "  inflating: train/61508/61508.jpg   \n",
            "  inflating: train/61508/61508.json  \n",
            "   creating: train/61511/\n",
            "  inflating: train/61511/61511.csv   \n",
            "  inflating: train/61511/61511.jpg   \n",
            "  inflating: train/61511/61511.json  \n",
            "   creating: train/61513/\n",
            "  inflating: train/61513/61513.csv   \n",
            "  inflating: train/61513/61513.jpg   \n",
            "  inflating: train/61513/61513.json  \n",
            "   creating: train/61515/\n",
            "  inflating: train/61515/61515.csv   \n",
            "  inflating: train/61515/61515.jpg   \n",
            "  inflating: train/61515/61515.json  \n",
            "   creating: train/61517/\n",
            "  inflating: train/61517/61517.csv   \n",
            "  inflating: train/61517/61517.jpg   \n",
            "  inflating: train/61517/61517.json  \n",
            "   creating: train/61528/\n",
            "  inflating: train/61528/61528.csv   \n",
            "  inflating: train/61528/61528.jpg   \n",
            "  inflating: train/61528/61528.json  \n",
            "   creating: train/61571/\n",
            "  inflating: train/61571/61571.csv   \n",
            "  inflating: train/61571/61571.jpg   \n",
            "  inflating: train/61571/61571.json  \n",
            "   creating: train/61579/\n",
            "  inflating: train/61579/61579.csv   \n",
            "  inflating: train/61579/61579.jpg   \n",
            "  inflating: train/61579/61579.json  \n",
            "   creating: train/61582/\n",
            "  inflating: train/61582/61582.csv   \n",
            "  inflating: train/61582/61582.jpg   \n",
            "  inflating: train/61582/61582.json  \n",
            "   creating: train/61586/\n",
            "  inflating: train/61586/61586.csv   \n",
            "  inflating: train/61586/61586.jpg   \n",
            "  inflating: train/61586/61586.json  \n",
            "   creating: train/61592/\n",
            "  inflating: train/61592/61592.csv   \n",
            "  inflating: train/61592/61592.jpg   \n",
            "  inflating: train/61592/61592.json  \n",
            "   creating: train/61595/\n",
            "  inflating: train/61595/61595.csv   \n",
            "  inflating: train/61595/61595.jpg   \n",
            "  inflating: train/61595/61595.json  \n",
            "   creating: train/61604/\n",
            "  inflating: train/61604/61604.csv   \n",
            "  inflating: train/61604/61604.jpg   \n",
            "  inflating: train/61604/61604.json  \n",
            "   creating: train/61605/\n",
            "  inflating: train/61605/61605.csv   \n",
            "  inflating: train/61605/61605.jpg   \n",
            "  inflating: train/61605/61605.json  \n",
            "   creating: train/61611/\n",
            "  inflating: train/61611/61611.csv   \n",
            "  inflating: train/61611/61611.jpg   \n",
            "  inflating: train/61611/61611.json  \n",
            "   creating: train/61612/\n",
            "  inflating: train/61612/61612.csv   \n",
            "  inflating: train/61612/61612.jpg   \n",
            "  inflating: train/61612/61612.json  \n",
            "   creating: train/61622/\n",
            "  inflating: train/61622/61622.csv   \n",
            "  inflating: train/61622/61622.jpg   \n",
            "  inflating: train/61622/61622.json  \n",
            "   creating: train/61626/\n",
            "  inflating: train/61626/61626.csv   \n",
            "  inflating: train/61626/61626.jpg   \n",
            "  inflating: train/61626/61626.json  \n",
            "   creating: train/61644/\n",
            "  inflating: train/61644/61644.csv   \n",
            "  inflating: train/61644/61644.jpg   \n",
            "  inflating: train/61644/61644.json  \n",
            "   creating: train/61648/\n",
            "  inflating: train/61648/61648.csv   \n",
            "  inflating: train/61648/61648.jpg   \n",
            "  inflating: train/61648/61648.json  \n",
            "   creating: train/61660/\n",
            "  inflating: train/61660/61660.csv   \n",
            "  inflating: train/61660/61660.jpg   \n",
            "  inflating: train/61660/61660.json  \n",
            "   creating: train/61665/\n",
            "  inflating: train/61665/61665.csv   \n",
            "  inflating: train/61665/61665.jpg   \n",
            "  inflating: train/61665/61665.json  \n",
            "   creating: train/61680/\n",
            "  inflating: train/61680/61680.csv   \n",
            "  inflating: train/61680/61680.jpg   \n",
            "  inflating: train/61680/61680.json  \n",
            "   creating: train/61683/\n",
            "  inflating: train/61683/61683.csv   \n",
            "  inflating: train/61683/61683.jpg   \n",
            "  inflating: train/61683/61683.json  \n",
            "   creating: train/61684/\n",
            "  inflating: train/61684/61684.csv   \n",
            "  inflating: train/61684/61684.jpg   \n",
            "  inflating: train/61684/61684.json  \n",
            "   creating: train/61700/\n",
            "  inflating: train/61700/61700.csv   \n",
            "  inflating: train/61700/61700.jpg   \n",
            "  inflating: train/61700/61700.json  \n",
            "   creating: train/61714/\n",
            "  inflating: train/61714/61714.csv   \n",
            "  inflating: train/61714/61714.jpg   \n",
            "  inflating: train/61714/61714.json  \n",
            "   creating: train/61725/\n",
            "  inflating: train/61725/61725.csv   \n",
            "  inflating: train/61725/61725.jpg   \n",
            "  inflating: train/61725/61725.json  \n",
            "   creating: train/61727/\n",
            "  inflating: train/61727/61727.csv   \n",
            "  inflating: train/61727/61727.jpg   \n",
            "  inflating: train/61727/61727.json  \n",
            "   creating: train/61730/\n",
            "  inflating: train/61730/61730.csv   \n",
            "  inflating: train/61730/61730.jpg   \n",
            "  inflating: train/61730/61730.json  \n",
            "   creating: train/61762/\n",
            "  inflating: train/61762/61762.csv   \n",
            "  inflating: train/61762/61762.jpg   \n",
            "  inflating: train/61762/61762.json  \n",
            "   creating: train/61769/\n",
            "  inflating: train/61769/61769.csv   \n",
            "  inflating: train/61769/61769.jpg   \n",
            "  inflating: train/61769/61769.json  \n",
            "   creating: train/61774/\n",
            "  inflating: train/61774/61774.csv   \n",
            "  inflating: train/61774/61774.jpg   \n",
            "  inflating: train/61774/61774.json  \n",
            "   creating: train/61781/\n",
            "  inflating: train/61781/61781.csv   \n",
            "  inflating: train/61781/61781.jpg   \n",
            "  inflating: train/61781/61781.json  \n",
            "   creating: train/61795/\n",
            "  inflating: train/61795/61795.csv   \n",
            "  inflating: train/61795/61795.jpg   \n",
            "  inflating: train/61795/61795.json  \n",
            "   creating: train/61798/\n",
            "  inflating: train/61798/61798.csv   \n",
            "  inflating: train/61798/61798.jpg   \n",
            "  inflating: train/61798/61798.json  \n",
            "   creating: train/61800/\n",
            "  inflating: train/61800/61800.csv   \n",
            "  inflating: train/61800/61800.jpg   \n",
            "  inflating: train/61800/61800.json  \n",
            "   creating: train/61807/\n",
            "  inflating: train/61807/61807.csv   \n",
            "  inflating: train/61807/61807.jpg   \n",
            "  inflating: train/61807/61807.json  \n",
            "   creating: train/61817/\n",
            "  inflating: train/61817/61817.csv   \n",
            "  inflating: train/61817/61817.jpg   \n",
            "  inflating: train/61817/61817.json  \n",
            "   creating: train/61826/\n",
            "  inflating: train/61826/61826.csv   \n",
            "  inflating: train/61826/61826.jpg   \n",
            "  inflating: train/61826/61826.json  \n",
            "   creating: train/61838/\n",
            "  inflating: train/61838/61838.csv   \n",
            "  inflating: train/61838/61838.jpg   \n",
            "  inflating: train/61838/61838.json  \n",
            "   creating: train/61875/\n",
            "  inflating: train/61875/61875.csv   \n",
            "  inflating: train/61875/61875.jpg   \n",
            "  inflating: train/61875/61875.json  \n",
            "   creating: train/61878/\n",
            "  inflating: train/61878/61878.csv   \n",
            "  inflating: train/61878/61878.jpg   \n",
            "  inflating: train/61878/61878.json  \n",
            "   creating: train/61890/\n",
            "  inflating: train/61890/61890.csv   \n",
            "  inflating: train/61890/61890.jpg   \n",
            "  inflating: train/61890/61890.json  \n",
            "   creating: train/61907/\n",
            "  inflating: train/61907/61907.csv   \n",
            "  inflating: train/61907/61907.jpg   \n",
            "  inflating: train/61907/61907.json  \n",
            "   creating: train/61909/\n",
            "  inflating: train/61909/61909.csv   \n",
            "  inflating: train/61909/61909.jpg   \n",
            "  inflating: train/61909/61909.json  \n",
            "   creating: train/61914/\n",
            "  inflating: train/61914/61914.csv   \n",
            "  inflating: train/61914/61914.jpg   \n",
            "  inflating: train/61914/61914.json  \n",
            "   creating: train/61917/\n",
            "  inflating: train/61917/61917.csv   \n",
            "  inflating: train/61917/61917.jpg   \n",
            "  inflating: train/61917/61917.json  \n",
            "   creating: train/61930/\n",
            "  inflating: train/61930/61930.csv   \n",
            "  inflating: train/61930/61930.jpg   \n",
            "  inflating: train/61930/61930.json  \n",
            "   creating: train/61943/\n",
            "  inflating: train/61943/61943.csv   \n",
            "  inflating: train/61943/61943.jpg   \n",
            "  inflating: train/61943/61943.json  \n",
            "   creating: train/61944/\n",
            "  inflating: train/61944/61944.csv   \n",
            "  inflating: train/61944/61944.jpg   \n",
            "  inflating: train/61944/61944.json  \n",
            "   creating: train/61953/\n",
            "  inflating: train/61953/61953.csv   \n",
            "  inflating: train/61953/61953.jpg   \n",
            "  inflating: train/61953/61953.json  \n",
            "   creating: train/61961/\n",
            "  inflating: train/61961/61961.csv   \n",
            "  inflating: train/61961/61961.jpg   \n",
            "  inflating: train/61961/61961.json  \n",
            "   creating: train/61965/\n",
            "  inflating: train/61965/61965.csv   \n",
            "  inflating: train/61965/61965.jpg   \n",
            "  inflating: train/61965/61965.json  \n",
            "   creating: train/61984/\n",
            "  inflating: train/61984/61984.csv   \n",
            "  inflating: train/61984/61984.jpg   \n",
            "  inflating: train/61984/61984.json  \n",
            "   creating: train/61988/\n",
            "  inflating: train/61988/61988.csv   \n",
            "  inflating: train/61988/61988.jpg   \n",
            "  inflating: train/61988/61988.json  \n",
            "   creating: train/61989/\n",
            "  inflating: train/61989/61989.csv   \n",
            "  inflating: train/61989/61989.jpg   \n",
            "  inflating: train/61989/61989.json  \n",
            "   creating: train/62003/\n",
            "  inflating: train/62003/62003.csv   \n",
            "  inflating: train/62003/62003.jpg   \n",
            "  inflating: train/62003/62003.json  \n",
            "   creating: train/62008/\n",
            "  inflating: train/62008/62008.csv   \n",
            "  inflating: train/62008/62008.jpg   \n",
            "  inflating: train/62008/62008.json  \n",
            "   creating: train/62016/\n",
            "  inflating: train/62016/62016.csv   \n",
            "  inflating: train/62016/62016.jpg   \n",
            "  inflating: train/62016/62016.json  \n",
            "   creating: train/62028/\n",
            "  inflating: train/62028/62028.csv   \n",
            "  inflating: train/62028/62028.jpg   \n",
            "  inflating: train/62028/62028.json  \n",
            "   creating: train/62032/\n",
            "  inflating: train/62032/62032.csv   \n",
            "  inflating: train/62032/62032.jpg   \n",
            "  inflating: train/62032/62032.json  \n",
            "   creating: train/62040/\n",
            "  inflating: train/62040/62040.csv   \n",
            "  inflating: train/62040/62040.jpg   \n",
            "  inflating: train/62040/62040.json  \n",
            "   creating: train/62073/\n",
            "  inflating: train/62073/62073.csv   \n",
            "  inflating: train/62073/62073.jpg   \n",
            "  inflating: train/62073/62073.json  \n",
            "   creating: train/62074/\n",
            "  inflating: train/62074/62074.csv   \n",
            "  inflating: train/62074/62074.jpg   \n",
            "  inflating: train/62074/62074.json  \n",
            "   creating: train/62080/\n",
            "  inflating: train/62080/62080.csv   \n",
            "  inflating: train/62080/62080.jpg   \n",
            "  inflating: train/62080/62080.json  \n",
            "   creating: train/62093/\n",
            "  inflating: train/62093/62093.csv   \n",
            "  inflating: train/62093/62093.jpg   \n",
            "  inflating: train/62093/62093.json  \n",
            "   creating: train/62094/\n",
            "  inflating: train/62094/62094.csv   \n",
            "  inflating: train/62094/62094.jpg   \n",
            "  inflating: train/62094/62094.json  \n",
            "   creating: train/62098/\n",
            "  inflating: train/62098/62098.csv   \n",
            "  inflating: train/62098/62098.jpg   \n",
            "  inflating: train/62098/62098.json  \n",
            "   creating: train/62110/\n",
            "  inflating: train/62110/62110.csv   \n",
            "  inflating: train/62110/62110.jpg   \n",
            "  inflating: train/62110/62110.json  \n",
            "   creating: train/62112/\n",
            "  inflating: train/62112/62112.csv   \n",
            "  inflating: train/62112/62112.jpg   \n",
            "  inflating: train/62112/62112.json  \n",
            "   creating: train/62113/\n",
            "  inflating: train/62113/62113.csv   \n",
            "  inflating: train/62113/62113.jpg   \n",
            "  inflating: train/62113/62113.json  \n",
            "   creating: train/62118/\n",
            "  inflating: train/62118/62118.csv   \n",
            "  inflating: train/62118/62118.jpg   \n",
            "  inflating: train/62118/62118.json  \n",
            "   creating: train/62123/\n",
            "  inflating: train/62123/62123.csv   \n",
            "  inflating: train/62123/62123.jpg   \n",
            "  inflating: train/62123/62123.json  \n",
            "   creating: train/62125/\n",
            "  inflating: train/62125/62125.csv   \n",
            "  inflating: train/62125/62125.jpg   \n",
            "  inflating: train/62125/62125.json  \n",
            "   creating: train/62131/\n",
            "  inflating: train/62131/62131.csv   \n",
            "  inflating: train/62131/62131.jpg   \n",
            "  inflating: train/62131/62131.json  \n",
            "   creating: train/62136/\n",
            "  inflating: train/62136/62136.csv   \n",
            "  inflating: train/62136/62136.jpg   \n",
            "  inflating: train/62136/62136.json  \n",
            "   creating: train/62141/\n",
            "  inflating: train/62141/62141.csv   \n",
            "  inflating: train/62141/62141.jpg   \n",
            "  inflating: train/62141/62141.json  \n",
            "   creating: train/62156/\n",
            "  inflating: train/62156/62156.csv   \n",
            "  inflating: train/62156/62156.jpg   \n",
            "  inflating: train/62156/62156.json  \n",
            "   creating: train/62169/\n",
            "  inflating: train/62169/62169.csv   \n",
            "  inflating: train/62169/62169.jpg   \n",
            "  inflating: train/62169/62169.json  \n",
            "   creating: train/62192/\n",
            "  inflating: train/62192/62192.csv   \n",
            "  inflating: train/62192/62192.jpg   \n",
            "  inflating: train/62192/62192.json  \n",
            "   creating: train/62195/\n",
            "  inflating: train/62195/62195.csv   \n",
            "  inflating: train/62195/62195.jpg   \n",
            "  inflating: train/62195/62195.json  \n",
            "   creating: train/62204/\n",
            "  inflating: train/62204/62204.csv   \n",
            "  inflating: train/62204/62204.jpg   \n",
            "  inflating: train/62204/62204.json  \n",
            "   creating: train/62206/\n",
            "  inflating: train/62206/62206.csv   \n",
            "  inflating: train/62206/62206.jpg   \n",
            "  inflating: train/62206/62206.json  \n",
            "   creating: train/62213/\n",
            "  inflating: train/62213/62213.csv   \n",
            "  inflating: train/62213/62213.jpg   \n",
            "  inflating: train/62213/62213.json  \n",
            "   creating: train/62218/\n",
            "  inflating: train/62218/62218.csv   \n",
            "  inflating: train/62218/62218.jpg   \n",
            "  inflating: train/62218/62218.json  \n",
            "   creating: train/62232/\n",
            "  inflating: train/62232/62232.csv   \n",
            "  inflating: train/62232/62232.jpg   \n",
            "  inflating: train/62232/62232.json  \n",
            "   creating: train/62241/\n",
            "  inflating: train/62241/62241.csv   \n",
            "  inflating: train/62241/62241.jpg   \n",
            "  inflating: train/62241/62241.json  \n",
            "   creating: train/62249/\n",
            "  inflating: train/62249/62249.csv   \n",
            "  inflating: train/62249/62249.jpg   \n",
            "  inflating: train/62249/62249.json  \n",
            "   creating: train/62256/\n",
            "  inflating: train/62256/62256.csv   \n",
            "  inflating: train/62256/62256.jpg   \n",
            "  inflating: train/62256/62256.json  \n",
            "   creating: train/62272/\n",
            "  inflating: train/62272/62272.csv   \n",
            "  inflating: train/62272/62272.jpg   \n",
            "  inflating: train/62272/62272.json  \n",
            "   creating: train/62275/\n",
            "  inflating: train/62275/62275.csv   \n",
            "  inflating: train/62275/62275.jpg   \n",
            "  inflating: train/62275/62275.json  \n",
            "   creating: train/62312/\n",
            "  inflating: train/62312/62312.csv   \n",
            "  inflating: train/62312/62312.jpg   \n",
            "  inflating: train/62312/62312.json  \n",
            "   creating: train/62328/\n",
            "  inflating: train/62328/62328.csv   \n",
            "  inflating: train/62328/62328.jpg   \n",
            "  inflating: train/62328/62328.json  \n",
            "   creating: train/62333/\n",
            "  inflating: train/62333/62333.csv   \n",
            "  inflating: train/62333/62333.jpg   \n",
            "  inflating: train/62333/62333.json  \n",
            "   creating: train/62337/\n",
            "  inflating: train/62337/62337.csv   \n",
            "  inflating: train/62337/62337.jpg   \n",
            "  inflating: train/62337/62337.json  \n",
            "   creating: train/62340/\n",
            "  inflating: train/62340/62340.csv   \n",
            "  inflating: train/62340/62340.jpg   \n",
            "  inflating: train/62340/62340.json  \n",
            "   creating: train/62347/\n",
            "  inflating: train/62347/62347.csv   \n",
            "  inflating: train/62347/62347.jpg   \n",
            "  inflating: train/62347/62347.json  \n",
            "   creating: train/62350/\n",
            "  inflating: train/62350/62350.csv   \n",
            "  inflating: train/62350/62350.jpg   \n",
            "  inflating: train/62350/62350.json  \n",
            "   creating: train/62355/\n",
            "  inflating: train/62355/62355.csv   \n",
            "  inflating: train/62355/62355.jpg   \n",
            "  inflating: train/62355/62355.json  \n",
            "   creating: train/62371/\n",
            "  inflating: train/62371/62371.csv   \n",
            "  inflating: train/62371/62371.jpg   \n",
            "  inflating: train/62371/62371.json  \n",
            "   creating: train/62372/\n",
            "  inflating: train/62372/62372.csv   \n",
            "  inflating: train/62372/62372.jpg   \n",
            "  inflating: train/62372/62372.json  \n",
            "   creating: train/62373/\n",
            "  inflating: train/62373/62373.csv   \n",
            "  inflating: train/62373/62373.jpg   \n",
            "  inflating: train/62373/62373.json  \n",
            "   creating: train/62375/\n",
            "  inflating: train/62375/62375.csv   \n",
            "  inflating: train/62375/62375.jpg   \n",
            "  inflating: train/62375/62375.json  \n",
            "   creating: train/62379/\n",
            "  inflating: train/62379/62379.csv   \n",
            "  inflating: train/62379/62379.jpg   \n",
            "  inflating: train/62379/62379.json  \n",
            "   creating: train/62388/\n",
            "  inflating: train/62388/62388.csv   \n",
            "  inflating: train/62388/62388.jpg   \n",
            "  inflating: train/62388/62388.json  \n",
            "   creating: train/62396/\n",
            "  inflating: train/62396/62396.csv   \n",
            "  inflating: train/62396/62396.jpg   \n",
            "  inflating: train/62396/62396.json  \n",
            "   creating: train/62400/\n",
            "  inflating: train/62400/62400.csv   \n",
            "  inflating: train/62400/62400.jpg   \n",
            "  inflating: train/62400/62400.json  \n",
            "   creating: train/62407/\n",
            "  inflating: train/62407/62407.csv   \n",
            "  inflating: train/62407/62407.jpg   \n",
            "  inflating: train/62407/62407.json  \n",
            "   creating: train/62413/\n",
            "  inflating: train/62413/62413.csv   \n",
            "  inflating: train/62413/62413.jpg   \n",
            "  inflating: train/62413/62413.json  \n",
            "   creating: train/62420/\n",
            "  inflating: train/62420/62420.csv   \n",
            "  inflating: train/62420/62420.jpg   \n",
            "  inflating: train/62420/62420.json  \n",
            "   creating: train/62431/\n",
            "  inflating: train/62431/62431.csv   \n",
            "  inflating: train/62431/62431.jpg   \n",
            "  inflating: train/62431/62431.json  \n",
            "   creating: train/62450/\n",
            "  inflating: train/62450/62450.csv   \n",
            "  inflating: train/62450/62450.jpg   \n",
            "  inflating: train/62450/62450.json  \n",
            "   creating: train/62451/\n",
            "  inflating: train/62451/62451.csv   \n",
            "  inflating: train/62451/62451.jpg   \n",
            "  inflating: train/62451/62451.json  \n",
            "   creating: train/62453/\n",
            "  inflating: train/62453/62453.csv   \n",
            "  inflating: train/62453/62453.jpg   \n",
            "  inflating: train/62453/62453.json  \n",
            "   creating: train/62476/\n",
            "  inflating: train/62476/62476.csv   \n",
            "  inflating: train/62476/62476.jpg   \n",
            "  inflating: train/62476/62476.json  \n",
            "   creating: train/62478/\n",
            "  inflating: train/62478/62478.csv   \n",
            "  inflating: train/62478/62478.jpg   \n",
            "  inflating: train/62478/62478.json  \n",
            "   creating: train/62483/\n",
            "  inflating: train/62483/62483.csv   \n",
            "  inflating: train/62483/62483.jpg   \n",
            "  inflating: train/62483/62483.json  \n",
            "   creating: train/62487/\n",
            "  inflating: train/62487/62487.csv   \n",
            "  inflating: train/62487/62487.jpg   \n",
            "  inflating: train/62487/62487.json  \n",
            "   creating: train/62507/\n",
            "  inflating: train/62507/62507.csv   \n",
            "  inflating: train/62507/62507.jpg   \n",
            "  inflating: train/62507/62507.json  \n",
            "   creating: train/62508/\n",
            "  inflating: train/62508/62508.csv   \n",
            "  inflating: train/62508/62508.jpg   \n",
            "  inflating: train/62508/62508.json  \n",
            "   creating: train/62515/\n",
            "  inflating: train/62515/62515.csv   \n",
            "  inflating: train/62515/62515.jpg   \n",
            "  inflating: train/62515/62515.json  \n",
            "   creating: train/62520/\n",
            "  inflating: train/62520/62520.csv   \n",
            "  inflating: train/62520/62520.jpg   \n",
            "  inflating: train/62520/62520.json  \n",
            "   creating: train/62527/\n",
            "  inflating: train/62527/62527.csv   \n",
            "  inflating: train/62527/62527.jpg   \n",
            "  inflating: train/62527/62527.json  \n",
            "   creating: train/62535/\n",
            "  inflating: train/62535/62535.csv   \n",
            "  inflating: train/62535/62535.jpg   \n",
            "  inflating: train/62535/62535.json  \n",
            "   creating: train/62542/\n",
            "  inflating: train/62542/62542.csv   \n",
            "  inflating: train/62542/62542.jpg   \n",
            "  inflating: train/62542/62542.json  \n",
            "   creating: train/62548/\n",
            "  inflating: train/62548/62548.csv   \n",
            "  inflating: train/62548/62548.jpg   \n",
            "  inflating: train/62548/62548.json  \n",
            "   creating: train/62554/\n",
            "  inflating: train/62554/62554.csv   \n",
            "  inflating: train/62554/62554.jpg   \n",
            "  inflating: train/62554/62554.json  \n",
            "   creating: train/62563/\n",
            "  inflating: train/62563/62563.csv   \n",
            "  inflating: train/62563/62563.jpg   \n",
            "  inflating: train/62563/62563.json  \n",
            "   creating: train/62571/\n",
            "  inflating: train/62571/62571.csv   \n",
            "  inflating: train/62571/62571.jpg   \n",
            "  inflating: train/62571/62571.json  \n",
            "   creating: train/62575/\n",
            "  inflating: train/62575/62575.csv   \n",
            "  inflating: train/62575/62575.jpg   \n",
            "  inflating: train/62575/62575.json  \n",
            "   creating: train/62587/\n",
            "  inflating: train/62587/62587.csv   \n",
            "  inflating: train/62587/62587.jpg   \n",
            "  inflating: train/62587/62587.json  \n",
            "   creating: train/62606/\n",
            "  inflating: train/62606/62606.csv   \n",
            "  inflating: train/62606/62606.jpg   \n",
            "  inflating: train/62606/62606.json  \n",
            "   creating: train/62607/\n",
            "  inflating: train/62607/62607.csv   \n",
            "  inflating: train/62607/62607.jpg   \n",
            "  inflating: train/62607/62607.json  \n",
            "   creating: train/62618/\n",
            "  inflating: train/62618/62618.csv   \n",
            "  inflating: train/62618/62618.jpg   \n",
            "  inflating: train/62618/62618.json  \n",
            "   creating: train/62625/\n",
            "  inflating: train/62625/62625.csv   \n",
            "  inflating: train/62625/62625.jpg   \n",
            "  inflating: train/62625/62625.json  \n",
            "   creating: train/62627/\n",
            "  inflating: train/62627/62627.csv   \n",
            "  inflating: train/62627/62627.jpg   \n",
            "  inflating: train/62627/62627.json  \n",
            "   creating: train/62640/\n",
            "  inflating: train/62640/62640.csv   \n",
            "  inflating: train/62640/62640.jpg   \n",
            "  inflating: train/62640/62640.json  \n",
            "   creating: train/62655/\n",
            "  inflating: train/62655/62655.csv   \n",
            "  inflating: train/62655/62655.jpg   \n",
            "  inflating: train/62655/62655.json  \n",
            "   creating: train/62662/\n",
            "  inflating: train/62662/62662.csv   \n",
            "  inflating: train/62662/62662.jpg   \n",
            "  inflating: train/62662/62662.json  \n",
            "   creating: train/62668/\n",
            "  inflating: train/62668/62668.csv   \n",
            "  inflating: train/62668/62668.jpg   \n",
            "  inflating: train/62668/62668.json  \n",
            "   creating: train/62676/\n",
            "  inflating: train/62676/62676.csv   \n",
            "  inflating: train/62676/62676.jpg   \n",
            "  inflating: train/62676/62676.json  \n",
            "   creating: train/62683/\n",
            "  inflating: train/62683/62683.csv   \n",
            "  inflating: train/62683/62683.jpg   \n",
            "  inflating: train/62683/62683.json  \n",
            "   creating: train/62686/\n",
            "  inflating: train/62686/62686.csv   \n",
            "  inflating: train/62686/62686.jpg   \n",
            "  inflating: train/62686/62686.json  \n",
            "   creating: train/62687/\n",
            "  inflating: train/62687/62687.csv   \n",
            "  inflating: train/62687/62687.jpg   \n",
            "  inflating: train/62687/62687.json  \n",
            "   creating: train/62700/\n",
            "  inflating: train/62700/62700.csv   \n",
            "  inflating: train/62700/62700.jpg   \n",
            "  inflating: train/62700/62700.json  \n",
            "   creating: train/62702/\n",
            "  inflating: train/62702/62702.csv   \n",
            "  inflating: train/62702/62702.jpg   \n",
            "  inflating: train/62702/62702.json  \n",
            "   creating: train/62718/\n",
            "  inflating: train/62718/62718.csv   \n",
            "  inflating: train/62718/62718.jpg   \n",
            "  inflating: train/62718/62718.json  \n",
            "   creating: train/62720/\n",
            "  inflating: train/62720/62720.csv   \n",
            "  inflating: train/62720/62720.jpg   \n",
            "  inflating: train/62720/62720.json  \n",
            "   creating: train/62721/\n",
            "  inflating: train/62721/62721.csv   \n",
            "  inflating: train/62721/62721.jpg   \n",
            "  inflating: train/62721/62721.json  \n",
            "   creating: train/62740/\n",
            "  inflating: train/62740/62740.csv   \n",
            "  inflating: train/62740/62740.jpg   \n",
            "  inflating: train/62740/62740.json  \n",
            "   creating: train/62741/\n",
            "  inflating: train/62741/62741.csv   \n",
            "  inflating: train/62741/62741.jpg   \n",
            "  inflating: train/62741/62741.json  \n",
            "   creating: train/62755/\n",
            "  inflating: train/62755/62755.csv   \n",
            "  inflating: train/62755/62755.jpg   \n",
            "  inflating: train/62755/62755.json  \n",
            "   creating: train/62775/\n",
            "  inflating: train/62775/62775.csv   \n",
            "  inflating: train/62775/62775.jpg   \n",
            "  inflating: train/62775/62775.json  \n",
            "   creating: train/62778/\n",
            "  inflating: train/62778/62778.csv   \n",
            "  inflating: train/62778/62778.jpg   \n",
            "  inflating: train/62778/62778.json  \n",
            "   creating: train/62783/\n",
            "  inflating: train/62783/62783.csv   \n",
            "  inflating: train/62783/62783.jpg   \n",
            "  inflating: train/62783/62783.json  \n",
            "   creating: train/62816/\n",
            "  inflating: train/62816/62816.csv   \n",
            "  inflating: train/62816/62816.jpg   \n",
            "  inflating: train/62816/62816.json  \n",
            "   creating: train/62821/\n",
            "  inflating: train/62821/62821.csv   \n",
            "  inflating: train/62821/62821.jpg   \n",
            "  inflating: train/62821/62821.json  \n",
            "   creating: train/62824/\n",
            "  inflating: train/62824/62824.csv   \n",
            "  inflating: train/62824/62824.jpg   \n",
            "  inflating: train/62824/62824.json  \n",
            "   creating: train/62827/\n",
            "  inflating: train/62827/62827.csv   \n",
            "  inflating: train/62827/62827.jpg   \n",
            "  inflating: train/62827/62827.json  \n",
            "   creating: train/62828/\n",
            "  inflating: train/62828/62828.csv   \n",
            "  inflating: train/62828/62828.jpg   \n",
            "  inflating: train/62828/62828.json  \n",
            "   creating: train/62835/\n",
            "  inflating: train/62835/62835.csv   \n",
            "  inflating: train/62835/62835.jpg   \n",
            "  inflating: train/62835/62835.json  \n",
            "   creating: train/62841/\n",
            "  inflating: train/62841/62841.csv   \n",
            "  inflating: train/62841/62841.jpg   \n",
            "  inflating: train/62841/62841.json  \n",
            "   creating: train/62846/\n",
            "  inflating: train/62846/62846.csv   \n",
            "  inflating: train/62846/62846.jpg   \n",
            "  inflating: train/62846/62846.json  \n",
            "   creating: train/62850/\n",
            "  inflating: train/62850/62850.csv   \n",
            "  inflating: train/62850/62850.jpg   \n",
            "  inflating: train/62850/62850.json  \n",
            "   creating: train/62864/\n",
            "  inflating: train/62864/62864.csv   \n",
            "  inflating: train/62864/62864.jpg   \n",
            "  inflating: train/62864/62864.json  \n",
            "   creating: train/62866/\n",
            "  inflating: train/62866/62866.csv   \n",
            "  inflating: train/62866/62866.jpg   \n",
            "  inflating: train/62866/62866.json  \n",
            "   creating: train/62871/\n",
            "  inflating: train/62871/62871.csv   \n",
            "  inflating: train/62871/62871.jpg   \n",
            "  inflating: train/62871/62871.json  \n",
            "   creating: train/62881/\n",
            "  inflating: train/62881/62881.csv   \n",
            "  inflating: train/62881/62881.jpg   \n",
            "  inflating: train/62881/62881.json  \n",
            "   creating: train/62890/\n",
            "  inflating: train/62890/62890.csv   \n",
            "  inflating: train/62890/62890.jpg   \n",
            "  inflating: train/62890/62890.json  \n",
            "   creating: train/62893/\n",
            "  inflating: train/62893/62893.csv   \n",
            "  inflating: train/62893/62893.jpg   \n",
            "  inflating: train/62893/62893.json  \n",
            "   creating: train/62912/\n",
            "  inflating: train/62912/62912.csv   \n",
            "  inflating: train/62912/62912.jpg   \n",
            "  inflating: train/62912/62912.json  \n",
            "   creating: train/62924/\n",
            "  inflating: train/62924/62924.csv   \n",
            "  inflating: train/62924/62924.jpg   \n",
            "  inflating: train/62924/62924.json  \n",
            "   creating: train/62928/\n",
            "  inflating: train/62928/62928.csv   \n",
            "  inflating: train/62928/62928.jpg   \n",
            "  inflating: train/62928/62928.json  \n",
            "   creating: train/62940/\n",
            "  inflating: train/62940/62940.csv   \n",
            "  inflating: train/62940/62940.jpg   \n",
            "  inflating: train/62940/62940.json  \n",
            "   creating: train/62955/\n",
            "  inflating: train/62955/62955.csv   \n",
            "  inflating: train/62955/62955.jpg   \n",
            "  inflating: train/62955/62955.json  \n",
            "   creating: train/62960/\n",
            "  inflating: train/62960/62960.csv   \n",
            "  inflating: train/62960/62960.jpg   \n",
            "  inflating: train/62960/62960.json  \n",
            "   creating: train/62961/\n",
            "  inflating: train/62961/62961.csv   \n",
            "  inflating: train/62961/62961.jpg   \n",
            "  inflating: train/62961/62961.json  \n",
            "   creating: train/62963/\n",
            "  inflating: train/62963/62963.csv   \n",
            "  inflating: train/62963/62963.jpg   \n",
            "  inflating: train/62963/62963.json  \n",
            "   creating: train/62968/\n",
            "  inflating: train/62968/62968.csv   \n",
            "  inflating: train/62968/62968.jpg   \n",
            "  inflating: train/62968/62968.json  \n",
            "   creating: train/62969/\n",
            "  inflating: train/62969/62969.csv   \n",
            "  inflating: train/62969/62969.jpg   \n",
            "  inflating: train/62969/62969.json  \n",
            "   creating: train/62974/\n",
            "  inflating: train/62974/62974.csv   \n",
            "  inflating: train/62974/62974.jpg   \n",
            "  inflating: train/62974/62974.json  \n",
            "   creating: train/62976/\n",
            "  inflating: train/62976/62976.csv   \n",
            "  inflating: train/62976/62976.jpg   \n",
            "  inflating: train/62976/62976.json  \n",
            "   creating: train/63006/\n",
            "  inflating: train/63006/63006.csv   \n",
            "  inflating: train/63006/63006.jpg   \n",
            "  inflating: train/63006/63006.json  \n",
            "   creating: train/63012/\n",
            "  inflating: train/63012/63012.csv   \n",
            "  inflating: train/63012/63012.jpg   \n",
            "  inflating: train/63012/63012.json  \n",
            "   creating: train/63015/\n",
            "  inflating: train/63015/63015.csv   \n",
            "  inflating: train/63015/63015.jpg   \n",
            "  inflating: train/63015/63015.json  \n",
            "   creating: train/63016/\n",
            "  inflating: train/63016/63016.csv   \n",
            "  inflating: train/63016/63016.jpg   \n",
            "  inflating: train/63016/63016.json  \n",
            "   creating: train/63030/\n",
            "  inflating: train/63030/63030.csv   \n",
            "  inflating: train/63030/63030.jpg   \n",
            "  inflating: train/63030/63030.json  \n",
            "   creating: train/63066/\n",
            "  inflating: train/63066/63066.csv   \n",
            "  inflating: train/63066/63066.jpg   \n",
            "  inflating: train/63066/63066.json  \n",
            "   creating: train/63075/\n",
            "  inflating: train/63075/63075.csv   \n",
            "  inflating: train/63075/63075.jpg   \n",
            "  inflating: train/63075/63075.json  \n",
            "   creating: train/63086/\n",
            "  inflating: train/63086/63086.csv   \n",
            "  inflating: train/63086/63086.jpg   \n",
            "  inflating: train/63086/63086.json  \n",
            "   creating: train/63094/\n",
            "  inflating: train/63094/63094.csv   \n",
            "  inflating: train/63094/63094.jpg   \n",
            "  inflating: train/63094/63094.json  \n",
            "   creating: train/63130/\n",
            "  inflating: train/63130/63130.csv   \n",
            "  inflating: train/63130/63130.jpg   \n",
            "  inflating: train/63130/63130.json  \n",
            "   creating: train/63136/\n",
            "  inflating: train/63136/63136.csv   \n",
            "  inflating: train/63136/63136.jpg   \n",
            "  inflating: train/63136/63136.json  \n",
            "   creating: train/63154/\n",
            "  inflating: train/63154/63154.csv   \n",
            "  inflating: train/63154/63154.jpg   \n",
            "  inflating: train/63154/63154.json  \n",
            "   creating: train/63163/\n",
            "  inflating: train/63163/63163.csv   \n",
            "  inflating: train/63163/63163.jpg   \n",
            "  inflating: train/63163/63163.json  \n",
            "   creating: train/63191/\n",
            "  inflating: train/63191/63191.csv   \n",
            "  inflating: train/63191/63191.jpg   \n",
            "  inflating: train/63191/63191.json  \n",
            "   creating: train/63209/\n",
            "  inflating: train/63209/63209.csv   \n",
            "  inflating: train/63209/63209.jpg   \n",
            "  inflating: train/63209/63209.json  \n",
            "   creating: train/63215/\n",
            "  inflating: train/63215/63215.csv   \n",
            "  inflating: train/63215/63215.jpg   \n",
            "  inflating: train/63215/63215.json  \n",
            "   creating: train/63221/\n",
            "  inflating: train/63221/63221.csv   \n",
            "  inflating: train/63221/63221.jpg   \n",
            "  inflating: train/63221/63221.json  \n",
            "   creating: train/63260/\n",
            "  inflating: train/63260/63260.csv   \n",
            "  inflating: train/63260/63260.jpg   \n",
            "  inflating: train/63260/63260.json  \n",
            "   creating: train/63262/\n",
            "  inflating: train/63262/63262.csv   \n",
            "  inflating: train/63262/63262.jpg   \n",
            "  inflating: train/63262/63262.json  \n",
            "   creating: train/63277/\n",
            "  inflating: train/63277/63277.csv   \n",
            "  inflating: train/63277/63277.jpg   \n",
            "  inflating: train/63277/63277.json  \n",
            "   creating: train/63286/\n",
            "  inflating: train/63286/63286.csv   \n",
            "  inflating: train/63286/63286.jpg   \n",
            "  inflating: train/63286/63286.json  \n",
            "   creating: train/63330/\n",
            "  inflating: train/63330/63330.csv   \n",
            "  inflating: train/63330/63330.jpg   \n",
            "  inflating: train/63330/63330.json  \n",
            "   creating: train/63333/\n",
            "  inflating: train/63333/63333.csv   \n",
            "  inflating: train/63333/63333.jpg   \n",
            "  inflating: train/63333/63333.json  \n",
            "   creating: train/63337/\n",
            "  inflating: train/63337/63337.csv   \n",
            "  inflating: train/63337/63337.jpg   \n",
            "  inflating: train/63337/63337.json  \n",
            "   creating: train/63347/\n",
            "  inflating: train/63347/63347.csv   \n",
            "  inflating: train/63347/63347.jpg   \n",
            "  inflating: train/63347/63347.json  \n",
            "   creating: train/63376/\n",
            "  inflating: train/63376/63376.csv   \n",
            "  inflating: train/63376/63376.jpg   \n",
            "  inflating: train/63376/63376.json  \n",
            "   creating: train/63389/\n",
            "  inflating: train/63389/63389.csv   \n",
            "  inflating: train/63389/63389.jpg   \n",
            "  inflating: train/63389/63389.json  \n",
            "   creating: train/63412/\n",
            "  inflating: train/63412/63412.csv   \n",
            "  inflating: train/63412/63412.jpg   \n",
            "  inflating: train/63412/63412.json  \n",
            "   creating: train/63423/\n",
            "  inflating: train/63423/63423.csv   \n",
            "  inflating: train/63423/63423.jpg   \n",
            "  inflating: train/63423/63423.json  \n",
            "   creating: train/63436/\n",
            "  inflating: train/63436/63436.csv   \n",
            "  inflating: train/63436/63436.jpg   \n",
            "  inflating: train/63436/63436.json  \n",
            "   creating: train/63443/\n",
            "  inflating: train/63443/63443.csv   \n",
            "  inflating: train/63443/63443.jpg   \n",
            "  inflating: train/63443/63443.json  \n",
            "   creating: train/63482/\n",
            "  inflating: train/63482/63482.csv   \n",
            "  inflating: train/63482/63482.jpg   \n",
            "  inflating: train/63482/63482.json  \n",
            "   creating: train/63488/\n",
            "  inflating: train/63488/63488.csv   \n",
            "  inflating: train/63488/63488.jpg   \n",
            "  inflating: train/63488/63488.json  \n",
            "   creating: train/63496/\n",
            "  inflating: train/63496/63496.csv   \n",
            "  inflating: train/63496/63496.jpg   \n",
            "  inflating: train/63496/63496.json  \n",
            "   creating: train/63509/\n",
            "  inflating: train/63509/63509.csv   \n",
            "  inflating: train/63509/63509.jpg   \n",
            "  inflating: train/63509/63509.json  \n",
            "   creating: train/63514/\n",
            "  inflating: train/63514/63514.csv   \n",
            "  inflating: train/63514/63514.jpg   \n",
            "  inflating: train/63514/63514.json  \n",
            "   creating: train/63538/\n",
            "  inflating: train/63538/63538.csv   \n",
            "  inflating: train/63538/63538.jpg   \n",
            "  inflating: train/63538/63538.json  \n",
            "   creating: train/63540/\n",
            "  inflating: train/63540/63540.csv   \n",
            "  inflating: train/63540/63540.jpg   \n",
            "  inflating: train/63540/63540.json  \n",
            "   creating: train/63553/\n",
            "  inflating: train/63553/63553.csv   \n",
            "  inflating: train/63553/63553.jpg   \n",
            "  inflating: train/63553/63553.json  \n",
            "   creating: train/63568/\n",
            "  inflating: train/63568/63568.csv   \n",
            "  inflating: train/63568/63568.jpg   \n",
            "  inflating: train/63568/63568.json  \n",
            "   creating: train/63570/\n",
            "  inflating: train/63570/63570.csv   \n",
            "  inflating: train/63570/63570.jpg   \n",
            "  inflating: train/63570/63570.json  \n",
            "   creating: train/63576/\n",
            "  inflating: train/63576/63576.csv   \n",
            "  inflating: train/63576/63576.jpg   \n",
            "  inflating: train/63576/63576.json  \n",
            "   creating: train/63601/\n",
            "  inflating: train/63601/63601.csv   \n",
            "  inflating: train/63601/63601.jpg   \n",
            "  inflating: train/63601/63601.json  \n",
            "   creating: train/63608/\n",
            "  inflating: train/63608/63608.csv   \n",
            "  inflating: train/63608/63608.jpg   \n",
            "  inflating: train/63608/63608.json  \n",
            "   creating: train/63610/\n",
            "  inflating: train/63610/63610.csv   \n",
            "  inflating: train/63610/63610.jpg   \n",
            "  inflating: train/63610/63610.json  \n",
            "   creating: train/63614/\n",
            "  inflating: train/63614/63614.csv   \n",
            "  inflating: train/63614/63614.jpg   \n",
            "  inflating: train/63614/63614.json  \n",
            "   creating: train/63625/\n",
            "  inflating: train/63625/63625.csv   \n",
            "  inflating: train/63625/63625.jpg   \n",
            "  inflating: train/63625/63625.json  \n",
            "   creating: train/63631/\n",
            "  inflating: train/63631/63631.csv   \n",
            "  inflating: train/63631/63631.jpg   \n",
            "  inflating: train/63631/63631.json  \n",
            "   creating: train/63632/\n",
            "  inflating: train/63632/63632.csv   \n",
            "  inflating: train/63632/63632.jpg   \n",
            "  inflating: train/63632/63632.json  \n",
            "   creating: train/63640/\n",
            "  inflating: train/63640/63640.csv   \n",
            "  inflating: train/63640/63640.jpg   \n",
            "  inflating: train/63640/63640.json  \n",
            "   creating: train/63658/\n",
            "  inflating: train/63658/63658.csv   \n",
            "  inflating: train/63658/63658.jpg   \n",
            "  inflating: train/63658/63658.json  \n",
            "   creating: train/63660/\n",
            "  inflating: train/63660/63660.csv   \n",
            "  inflating: train/63660/63660.jpg   \n",
            "  inflating: train/63660/63660.json  \n",
            "   creating: train/63665/\n",
            "  inflating: train/63665/63665.csv   \n",
            "  inflating: train/63665/63665.jpg   \n",
            "  inflating: train/63665/63665.json  \n",
            "   creating: train/63672/\n",
            "  inflating: train/63672/63672.csv   \n",
            "  inflating: train/63672/63672.jpg   \n",
            "  inflating: train/63672/63672.json  \n",
            "   creating: train/63680/\n",
            "  inflating: train/63680/63680.csv   \n",
            "  inflating: train/63680/63680.jpg   \n",
            "  inflating: train/63680/63680.json  \n",
            "   creating: train/63683/\n",
            "  inflating: train/63683/63683.csv   \n",
            "  inflating: train/63683/63683.jpg   \n",
            "  inflating: train/63683/63683.json  \n",
            "   creating: train/63702/\n",
            "  inflating: train/63702/63702.csv   \n",
            "  inflating: train/63702/63702.jpg   \n",
            "  inflating: train/63702/63702.json  \n",
            "   creating: train/63711/\n",
            "  inflating: train/63711/63711.csv   \n",
            "  inflating: train/63711/63711.jpg   \n",
            "  inflating: train/63711/63711.json  \n",
            "   creating: train/63718/\n",
            "  inflating: train/63718/63718.csv   \n",
            "  inflating: train/63718/63718.jpg   \n",
            "  inflating: train/63718/63718.json  \n",
            "   creating: train/63721/\n",
            "  inflating: train/63721/63721.csv   \n",
            "  inflating: train/63721/63721.jpg   \n",
            "  inflating: train/63721/63721.json  \n",
            "   creating: train/63737/\n",
            "  inflating: train/63737/63737.csv   \n",
            "  inflating: train/63737/63737.jpg   \n",
            "  inflating: train/63737/63737.json  \n",
            "   creating: train/63738/\n",
            "  inflating: train/63738/63738.csv   \n",
            "  inflating: train/63738/63738.jpg   \n",
            "  inflating: train/63738/63738.json  \n",
            "   creating: train/63756/\n",
            "  inflating: train/63756/63756.csv   \n",
            "  inflating: train/63756/63756.jpg   \n",
            "  inflating: train/63756/63756.json  \n",
            "   creating: train/63764/\n",
            "  inflating: train/63764/63764.csv   \n",
            "  inflating: train/63764/63764.jpg   \n",
            "  inflating: train/63764/63764.json  \n",
            "   creating: train/63769/\n",
            "  inflating: train/63769/63769.csv   \n",
            "  inflating: train/63769/63769.jpg   \n",
            "  inflating: train/63769/63769.json  \n",
            "   creating: train/63797/\n",
            "  inflating: train/63797/63797.csv   \n",
            "  inflating: train/63797/63797.jpg   \n",
            "  inflating: train/63797/63797.json  \n",
            "   creating: train/63805/\n",
            "  inflating: train/63805/63805.csv   \n",
            "  inflating: train/63805/63805.jpg   \n",
            "  inflating: train/63805/63805.json  \n",
            "   creating: train/63814/\n",
            "  inflating: train/63814/63814.csv   \n",
            "  inflating: train/63814/63814.jpg   \n",
            "  inflating: train/63814/63814.json  \n",
            "   creating: train/63815/\n",
            "  inflating: train/63815/63815.csv   \n",
            "  inflating: train/63815/63815.jpg   \n",
            "  inflating: train/63815/63815.json  \n",
            "   creating: train/63828/\n",
            "  inflating: train/63828/63828.csv   \n",
            "  inflating: train/63828/63828.jpg   \n",
            "  inflating: train/63828/63828.json  \n",
            "   creating: train/63830/\n",
            "  inflating: train/63830/63830.csv   \n",
            "  inflating: train/63830/63830.jpg   \n",
            "  inflating: train/63830/63830.json  \n",
            "   creating: train/63831/\n",
            "  inflating: train/63831/63831.csv   \n",
            "  inflating: train/63831/63831.jpg   \n",
            "  inflating: train/63831/63831.json  \n",
            "   creating: train/63832/\n",
            "  inflating: train/63832/63832.csv   \n",
            "  inflating: train/63832/63832.jpg   \n",
            "  inflating: train/63832/63832.json  \n",
            "   creating: train/63839/\n",
            "  inflating: train/63839/63839.csv   \n",
            "  inflating: train/63839/63839.jpg   \n",
            "  inflating: train/63839/63839.json  \n",
            "   creating: train/63840/\n",
            "  inflating: train/63840/63840.csv   \n",
            "  inflating: train/63840/63840.jpg   \n",
            "  inflating: train/63840/63840.json  \n",
            "   creating: train/63870/\n",
            "  inflating: train/63870/63870.csv   \n",
            "  inflating: train/63870/63870.jpg   \n",
            "  inflating: train/63870/63870.json  \n",
            "   creating: train/63887/\n",
            "  inflating: train/63887/63887.csv   \n",
            "  inflating: train/63887/63887.jpg   \n",
            "  inflating: train/63887/63887.json  \n",
            "   creating: train/63895/\n",
            "  inflating: train/63895/63895.csv   \n",
            "  inflating: train/63895/63895.jpg   \n",
            "  inflating: train/63895/63895.json  \n",
            "   creating: train/63897/\n",
            "  inflating: train/63897/63897.csv   \n",
            "  inflating: train/63897/63897.jpg   \n",
            "  inflating: train/63897/63897.json  \n",
            "   creating: train/63914/\n",
            "  inflating: train/63914/63914.csv   \n",
            "  inflating: train/63914/63914.jpg   \n",
            "  inflating: train/63914/63914.json  \n",
            "   creating: train/63921/\n",
            "  inflating: train/63921/63921.csv   \n",
            "  inflating: train/63921/63921.jpg   \n",
            "  inflating: train/63921/63921.json  \n",
            "   creating: train/63923/\n",
            "  inflating: train/63923/63923.csv   \n",
            "  inflating: train/63923/63923.jpg   \n",
            "  inflating: train/63923/63923.json  \n",
            "   creating: train/63938/\n",
            "  inflating: train/63938/63938.csv   \n",
            "  inflating: train/63938/63938.jpg   \n",
            "  inflating: train/63938/63938.json  \n",
            "   creating: train/63949/\n",
            "  inflating: train/63949/63949.csv   \n",
            "  inflating: train/63949/63949.jpg   \n",
            "  inflating: train/63949/63949.json  \n",
            "   creating: train/63950/\n",
            "  inflating: train/63950/63950.csv   \n",
            "  inflating: train/63950/63950.jpg   \n",
            "  inflating: train/63950/63950.json  \n",
            "   creating: train/63992/\n",
            "  inflating: train/63992/63992.csv   \n",
            "  inflating: train/63992/63992.jpg   \n",
            "  inflating: train/63992/63992.json  \n",
            "   creating: train/63997/\n",
            "  inflating: train/63997/63997.csv   \n",
            "  inflating: train/63997/63997.jpg   \n",
            "  inflating: train/63997/63997.json  \n",
            "   creating: train/64001/\n",
            "  inflating: train/64001/64001.csv   \n",
            "  inflating: train/64001/64001.jpg   \n",
            "  inflating: train/64001/64001.json  \n",
            "   creating: train/64018/\n",
            "  inflating: train/64018/64018.csv   \n",
            "  inflating: train/64018/64018.jpg   \n",
            "  inflating: train/64018/64018.json  \n",
            "   creating: train/64029/\n",
            "  inflating: train/64029/64029.csv   \n",
            "  inflating: train/64029/64029.jpg   \n",
            "  inflating: train/64029/64029.json  \n",
            "   creating: train/64030/\n",
            "  inflating: train/64030/64030.csv   \n",
            "  inflating: train/64030/64030.jpg   \n",
            "  inflating: train/64030/64030.json  \n",
            "   creating: train/64043/\n",
            "  inflating: train/64043/64043.csv   \n",
            "  inflating: train/64043/64043.jpg   \n",
            "  inflating: train/64043/64043.json  \n",
            "   creating: train/64060/\n",
            "  inflating: train/64060/64060.csv   \n",
            "  inflating: train/64060/64060.jpg   \n",
            "  inflating: train/64060/64060.json  \n",
            "   creating: train/64099/\n",
            "  inflating: train/64099/64099.csv   \n",
            "  inflating: train/64099/64099.jpg   \n",
            "  inflating: train/64099/64099.json  \n",
            "   creating: train/64101/\n",
            "  inflating: train/64101/64101.csv   \n",
            "  inflating: train/64101/64101.jpg   \n",
            "  inflating: train/64101/64101.json  \n",
            "   creating: train/64103/\n",
            "  inflating: train/64103/64103.csv   \n",
            "  inflating: train/64103/64103.jpg   \n",
            "  inflating: train/64103/64103.json  \n",
            "   creating: train/64119/\n",
            "  inflating: train/64119/64119.csv   \n",
            "  inflating: train/64119/64119.jpg   \n",
            "  inflating: train/64119/64119.json  \n",
            "   creating: train/64120/\n",
            "  inflating: train/64120/64120.csv   \n",
            "  inflating: train/64120/64120.jpg   \n",
            "  inflating: train/64120/64120.json  \n",
            "   creating: train/64150/\n",
            "  inflating: train/64150/64150.csv   \n",
            "  inflating: train/64150/64150.jpg   \n",
            "  inflating: train/64150/64150.json  \n",
            "   creating: train/64182/\n",
            "  inflating: train/64182/64182.csv   \n",
            "  inflating: train/64182/64182.jpg   \n",
            "  inflating: train/64182/64182.json  \n",
            "   creating: train/64188/\n",
            "  inflating: train/64188/64188.csv   \n",
            "  inflating: train/64188/64188.jpg   \n",
            "  inflating: train/64188/64188.json  \n",
            "   creating: train/64192/\n",
            "  inflating: train/64192/64192.csv   \n",
            "  inflating: train/64192/64192.jpg   \n",
            "  inflating: train/64192/64192.json  \n",
            "   creating: train/64208/\n",
            "  inflating: train/64208/64208.csv   \n",
            "  inflating: train/64208/64208.jpg   \n",
            "  inflating: train/64208/64208.json  \n",
            "   creating: train/64211/\n",
            "  inflating: train/64211/64211.csv   \n",
            "  inflating: train/64211/64211.jpg   \n",
            "  inflating: train/64211/64211.json  \n",
            "   creating: train/64220/\n",
            "  inflating: train/64220/64220.csv   \n",
            "  inflating: train/64220/64220.jpg   \n",
            "  inflating: train/64220/64220.json  \n",
            "   creating: train/64225/\n",
            "  inflating: train/64225/64225.csv   \n",
            "  inflating: train/64225/64225.jpg   \n",
            "  inflating: train/64225/64225.json  \n",
            "   creating: train/64243/\n",
            "  inflating: train/64243/64243.csv   \n",
            "  inflating: train/64243/64243.jpg   \n",
            "  inflating: train/64243/64243.json  \n",
            "   creating: train/64246/\n",
            "  inflating: train/64246/64246.csv   \n",
            "  inflating: train/64246/64246.jpg   \n",
            "  inflating: train/64246/64246.json  \n",
            "   creating: train/64247/\n",
            "  inflating: train/64247/64247.csv   \n",
            "  inflating: train/64247/64247.jpg   \n",
            "  inflating: train/64247/64247.json  \n",
            "   creating: train/64248/\n",
            "  inflating: train/64248/64248.csv   \n",
            "  inflating: train/64248/64248.jpg   \n",
            "  inflating: train/64248/64248.json  \n",
            "   creating: train/64253/\n",
            "  inflating: train/64253/64253.csv   \n",
            "  inflating: train/64253/64253.jpg   \n",
            "  inflating: train/64253/64253.json  \n",
            "   creating: train/64254/\n",
            "  inflating: train/64254/64254.csv   \n",
            "  inflating: train/64254/64254.jpg   \n",
            "  inflating: train/64254/64254.json  \n",
            "   creating: train/64285/\n",
            "  inflating: train/64285/64285.csv   \n",
            "  inflating: train/64285/64285.jpg   \n",
            "  inflating: train/64285/64285.json  \n",
            "   creating: train/64289/\n",
            "  inflating: train/64289/64289.csv   \n",
            "  inflating: train/64289/64289.jpg   \n",
            "  inflating: train/64289/64289.json  \n",
            "   creating: train/64303/\n",
            "  inflating: train/64303/64303.csv   \n",
            "  inflating: train/64303/64303.jpg   \n",
            "  inflating: train/64303/64303.json  \n",
            "   creating: train/64313/\n",
            "  inflating: train/64313/64313.csv   \n",
            "  inflating: train/64313/64313.jpg   \n",
            "  inflating: train/64313/64313.json  \n",
            "   creating: train/64314/\n",
            "  inflating: train/64314/64314.csv   \n",
            "  inflating: train/64314/64314.jpg   \n",
            "  inflating: train/64314/64314.json  \n",
            "   creating: train/64323/\n",
            "  inflating: train/64323/64323.csv   \n",
            "  inflating: train/64323/64323.jpg   \n",
            "  inflating: train/64323/64323.json  \n",
            "   creating: train/64324/\n",
            "  inflating: train/64324/64324.csv   \n",
            "  inflating: train/64324/64324.jpg   \n",
            "  inflating: train/64324/64324.json  \n",
            "   creating: train/64325/\n",
            "  inflating: train/64325/64325.csv   \n",
            "  inflating: train/64325/64325.jpg   \n",
            "  inflating: train/64325/64325.json  \n",
            "   creating: train/64330/\n",
            "  inflating: train/64330/64330.csv   \n",
            "  inflating: train/64330/64330.jpg   \n",
            "  inflating: train/64330/64330.json  \n",
            "   creating: train/64336/\n",
            "  inflating: train/64336/64336.csv   \n",
            "  inflating: train/64336/64336.jpg   \n",
            "  inflating: train/64336/64336.json  \n",
            "   creating: train/64346/\n",
            "  inflating: train/64346/64346.csv   \n",
            "  inflating: train/64346/64346.jpg   \n",
            "  inflating: train/64346/64346.json  \n",
            "   creating: train/64349/\n",
            "  inflating: train/64349/64349.csv   \n",
            "  inflating: train/64349/64349.jpg   \n",
            "  inflating: train/64349/64349.json  \n",
            "   creating: train/64372/\n",
            "  inflating: train/64372/64372.csv   \n",
            "  inflating: train/64372/64372.jpg   \n",
            "  inflating: train/64372/64372.json  \n",
            "   creating: train/64373/\n",
            "  inflating: train/64373/64373.csv   \n",
            "  inflating: train/64373/64373.jpg   \n",
            "  inflating: train/64373/64373.json  \n",
            "   creating: train/64376/\n",
            "  inflating: train/64376/64376.csv   \n",
            "  inflating: train/64376/64376.jpg   \n",
            "  inflating: train/64376/64376.json  \n",
            "   creating: train/64384/\n",
            "  inflating: train/64384/64384.csv   \n",
            "  inflating: train/64384/64384.jpg   \n",
            "  inflating: train/64384/64384.json  \n",
            "   creating: train/64388/\n",
            "  inflating: train/64388/64388.csv   \n",
            "  inflating: train/64388/64388.jpg   \n",
            "  inflating: train/64388/64388.json  \n",
            "   creating: train/64390/\n",
            "  inflating: train/64390/64390.csv   \n",
            "  inflating: train/64390/64390.jpg   \n",
            "  inflating: train/64390/64390.json  \n",
            "   creating: train/64401/\n",
            "  inflating: train/64401/64401.csv   \n",
            "  inflating: train/64401/64401.jpg   \n",
            "  inflating: train/64401/64401.json  \n",
            "   creating: train/64403/\n",
            "  inflating: train/64403/64403.csv   \n",
            "  inflating: train/64403/64403.jpg   \n",
            "  inflating: train/64403/64403.json  \n",
            "   creating: train/64408/\n",
            "  inflating: train/64408/64408.csv   \n",
            "  inflating: train/64408/64408.jpg   \n",
            "  inflating: train/64408/64408.json  \n",
            "   creating: train/64421/\n",
            "  inflating: train/64421/64421.csv   \n",
            "  inflating: train/64421/64421.jpg   \n",
            "  inflating: train/64421/64421.json  \n",
            "   creating: train/64441/\n",
            "  inflating: train/64441/64441.csv   \n",
            "  inflating: train/64441/64441.jpg   \n",
            "  inflating: train/64441/64441.json  \n",
            "   creating: train/64445/\n",
            "  inflating: train/64445/64445.csv   \n",
            "  inflating: train/64445/64445.jpg   \n",
            "  inflating: train/64445/64445.json  \n",
            "   creating: train/64453/\n",
            "  inflating: train/64453/64453.csv   \n",
            "  inflating: train/64453/64453.jpg   \n",
            "  inflating: train/64453/64453.json  \n",
            "   creating: train/64460/\n",
            "  inflating: train/64460/64460.csv   \n",
            "  inflating: train/64460/64460.jpg   \n",
            "  inflating: train/64460/64460.json  \n",
            "   creating: train/64464/\n",
            "  inflating: train/64464/64464.csv   \n",
            "  inflating: train/64464/64464.jpg   \n",
            "  inflating: train/64464/64464.json  \n",
            "   creating: train/64494/\n",
            "  inflating: train/64494/64494.csv   \n",
            "  inflating: train/64494/64494.jpg   \n",
            "  inflating: train/64494/64494.json  \n",
            "   creating: train/64496/\n",
            "  inflating: train/64496/64496.csv   \n",
            "  inflating: train/64496/64496.jpg   \n",
            "  inflating: train/64496/64496.json  \n",
            "   creating: train/64503/\n",
            "  inflating: train/64503/64503.csv   \n",
            "  inflating: train/64503/64503.jpg   \n",
            "  inflating: train/64503/64503.json  \n",
            "   creating: train/64518/\n",
            "  inflating: train/64518/64518.csv   \n",
            "  inflating: train/64518/64518.jpg   \n",
            "  inflating: train/64518/64518.json  \n",
            "   creating: train/64523/\n",
            "  inflating: train/64523/64523.csv   \n",
            "  inflating: train/64523/64523.jpg   \n",
            "  inflating: train/64523/64523.json  \n",
            "   creating: train/64524/\n",
            "  inflating: train/64524/64524.csv   \n",
            "  inflating: train/64524/64524.jpg   \n",
            "  inflating: train/64524/64524.json  \n",
            "   creating: train/64528/\n",
            "  inflating: train/64528/64528.csv   \n",
            "  inflating: train/64528/64528.jpg   \n",
            "  inflating: train/64528/64528.json  \n",
            "   creating: train/64535/\n",
            "  inflating: train/64535/64535.csv   \n",
            "  inflating: train/64535/64535.jpg   \n",
            "  inflating: train/64535/64535.json  \n",
            "   creating: train/64539/\n",
            "  inflating: train/64539/64539.csv   \n",
            "  inflating: train/64539/64539.jpg   \n",
            "  inflating: train/64539/64539.json  \n",
            "   creating: train/64540/\n",
            "  inflating: train/64540/64540.csv   \n",
            "  inflating: train/64540/64540.jpg   \n",
            "  inflating: train/64540/64540.json  \n",
            "   creating: train/64546/\n",
            "  inflating: train/64546/64546.csv   \n",
            "  inflating: train/64546/64546.jpg   \n",
            "  inflating: train/64546/64546.json  \n",
            "   creating: train/64549/\n",
            "  inflating: train/64549/64549.csv   \n",
            "  inflating: train/64549/64549.jpg   \n",
            "  inflating: train/64549/64549.json  \n",
            "   creating: train/64567/\n",
            "  inflating: train/64567/64567.csv   \n",
            "  inflating: train/64567/64567.jpg   \n",
            "  inflating: train/64567/64567.json  \n",
            "   creating: train/64576/\n",
            "  inflating: train/64576/64576.csv   \n",
            "  inflating: train/64576/64576.jpg   \n",
            "  inflating: train/64576/64576.json  \n",
            "   creating: train/64580/\n",
            "  inflating: train/64580/64580.csv   \n",
            "  inflating: train/64580/64580.jpg   \n",
            "  inflating: train/64580/64580.json  \n",
            "   creating: train/64585/\n",
            "  inflating: train/64585/64585.csv   \n",
            "  inflating: train/64585/64585.jpg   \n",
            "  inflating: train/64585/64585.json  \n",
            "   creating: train/64591/\n",
            "  inflating: train/64591/64591.csv   \n",
            "  inflating: train/64591/64591.jpg   \n",
            "  inflating: train/64591/64591.json  \n",
            "   creating: train/64594/\n",
            "  inflating: train/64594/64594.csv   \n",
            "  inflating: train/64594/64594.jpg   \n",
            "  inflating: train/64594/64594.json  \n",
            "   creating: train/64603/\n",
            "  inflating: train/64603/64603.csv   \n",
            "  inflating: train/64603/64603.jpg   \n",
            "  inflating: train/64603/64603.json  \n",
            "   creating: train/64615/\n",
            "  inflating: train/64615/64615.csv   \n",
            "  inflating: train/64615/64615.jpg   \n",
            "  inflating: train/64615/64615.json  \n",
            "   creating: train/64650/\n",
            "  inflating: train/64650/64650.csv   \n",
            "  inflating: train/64650/64650.jpg   \n",
            "  inflating: train/64650/64650.json  \n",
            "   creating: train/64655/\n",
            "  inflating: train/64655/64655.csv   \n",
            "  inflating: train/64655/64655.jpg   \n",
            "  inflating: train/64655/64655.json  \n",
            "   creating: train/64661/\n",
            "  inflating: train/64661/64661.csv   \n",
            "  inflating: train/64661/64661.jpg   \n",
            "  inflating: train/64661/64661.json  \n",
            "   creating: train/64665/\n",
            "  inflating: train/64665/64665.csv   \n",
            "  inflating: train/64665/64665.jpg   \n",
            "  inflating: train/64665/64665.json  \n",
            "   creating: train/64678/\n",
            "  inflating: train/64678/64678.csv   \n",
            "  inflating: train/64678/64678.jpg   \n",
            "  inflating: train/64678/64678.json  \n",
            "   creating: train/64684/\n",
            "  inflating: train/64684/64684.csv   \n",
            "  inflating: train/64684/64684.jpg   \n",
            "  inflating: train/64684/64684.json  \n",
            "   creating: train/64690/\n",
            "  inflating: train/64690/64690.csv   \n",
            "  inflating: train/64690/64690.jpg   \n",
            "  inflating: train/64690/64690.json  \n",
            "   creating: train/64710/\n",
            "  inflating: train/64710/64710.csv   \n",
            "  inflating: train/64710/64710.jpg   \n",
            "  inflating: train/64710/64710.json  \n",
            "   creating: train/64711/\n",
            "  inflating: train/64711/64711.csv   \n",
            "  inflating: train/64711/64711.jpg   \n",
            "  inflating: train/64711/64711.json  \n",
            "   creating: train/64715/\n",
            "  inflating: train/64715/64715.csv   \n",
            "  inflating: train/64715/64715.jpg   \n",
            "  inflating: train/64715/64715.json  \n",
            "   creating: train/64736/\n",
            "  inflating: train/64736/64736.csv   \n",
            "  inflating: train/64736/64736.jpg   \n",
            "  inflating: train/64736/64736.json  \n",
            "   creating: train/64745/\n",
            "  inflating: train/64745/64745.csv   \n",
            "  inflating: train/64745/64745.jpg   \n",
            "  inflating: train/64745/64745.json  \n",
            "   creating: train/64761/\n",
            "  inflating: train/64761/64761.csv   \n",
            "  inflating: train/64761/64761.jpg   \n",
            "  inflating: train/64761/64761.json  \n",
            "   creating: train/64777/\n",
            "  inflating: train/64777/64777.csv   \n",
            "  inflating: train/64777/64777.jpg   \n",
            "  inflating: train/64777/64777.json  \n",
            "   creating: train/64797/\n",
            "  inflating: train/64797/64797.csv   \n",
            "  inflating: train/64797/64797.jpg   \n",
            "  inflating: train/64797/64797.json  \n",
            "   creating: train/64799/\n",
            "  inflating: train/64799/64799.csv   \n",
            "  inflating: train/64799/64799.jpg   \n",
            "  inflating: train/64799/64799.json  \n",
            "   creating: train/64801/\n",
            "  inflating: train/64801/64801.csv   \n",
            "  inflating: train/64801/64801.jpg   \n",
            "  inflating: train/64801/64801.json  \n",
            "   creating: train/64804/\n",
            "  inflating: train/64804/64804.csv   \n",
            "  inflating: train/64804/64804.jpg   \n",
            "  inflating: train/64804/64804.json  \n",
            "   creating: train/64816/\n",
            "  inflating: train/64816/64816.csv   \n",
            "  inflating: train/64816/64816.jpg   \n",
            "  inflating: train/64816/64816.json  \n",
            "   creating: train/64838/\n",
            "  inflating: train/64838/64838.csv   \n",
            "  inflating: train/64838/64838.jpg   \n",
            "  inflating: train/64838/64838.json  \n",
            "   creating: train/64842/\n",
            "  inflating: train/64842/64842.csv   \n",
            "  inflating: train/64842/64842.jpg   \n",
            "  inflating: train/64842/64842.json  \n",
            "   creating: train/64884/\n",
            "  inflating: train/64884/64884.csv   \n",
            "  inflating: train/64884/64884.jpg   \n",
            "  inflating: train/64884/64884.json  \n",
            "   creating: train/64886/\n",
            "  inflating: train/64886/64886.csv   \n",
            "  inflating: train/64886/64886.jpg   \n",
            "  inflating: train/64886/64886.json  \n",
            "   creating: train/64906/\n",
            "  inflating: train/64906/64906.csv   \n",
            "  inflating: train/64906/64906.jpg   \n",
            "  inflating: train/64906/64906.json  \n",
            "   creating: train/64909/\n",
            "  inflating: train/64909/64909.csv   \n",
            "  inflating: train/64909/64909.jpg   \n",
            "  inflating: train/64909/64909.json  \n",
            "   creating: train/64911/\n",
            "  inflating: train/64911/64911.csv   \n",
            "  inflating: train/64911/64911.jpg   \n",
            "  inflating: train/64911/64911.json  \n",
            "   creating: train/64927/\n",
            "  inflating: train/64927/64927.csv   \n",
            "  inflating: train/64927/64927.jpg   \n",
            "  inflating: train/64927/64927.json  \n",
            "   creating: train/64931/\n",
            "  inflating: train/64931/64931.csv   \n",
            "  inflating: train/64931/64931.jpg   \n",
            "  inflating: train/64931/64931.json  \n",
            "   creating: train/64935/\n",
            "  inflating: train/64935/64935.csv   \n",
            "  inflating: train/64935/64935.jpg   \n",
            "  inflating: train/64935/64935.json  \n",
            "   creating: train/64939/\n",
            "  inflating: train/64939/64939.csv   \n",
            "  inflating: train/64939/64939.jpg   \n",
            "  inflating: train/64939/64939.json  \n",
            "   creating: train/64943/\n",
            "  inflating: train/64943/64943.csv   \n",
            "  inflating: train/64943/64943.jpg   \n",
            "  inflating: train/64943/64943.json  \n",
            "   creating: train/64944/\n",
            "  inflating: train/64944/64944.csv   \n",
            "  inflating: train/64944/64944.jpg   \n",
            "  inflating: train/64944/64944.json  \n",
            "   creating: train/64955/\n",
            "  inflating: train/64955/64955.csv   \n",
            "  inflating: train/64955/64955.jpg   \n",
            "  inflating: train/64955/64955.json  \n",
            "   creating: train/64963/\n",
            "  inflating: train/64963/64963.csv   \n",
            "  inflating: train/64963/64963.jpg   \n",
            "  inflating: train/64963/64963.json  \n",
            "   creating: train/64965/\n",
            "  inflating: train/64965/64965.csv   \n",
            "  inflating: train/64965/64965.jpg   \n",
            "  inflating: train/64965/64965.json  \n",
            "   creating: train/64970/\n",
            "  inflating: train/64970/64970.csv   \n",
            "  inflating: train/64970/64970.jpg   \n",
            "  inflating: train/64970/64970.json  \n",
            "   creating: train/64982/\n",
            "  inflating: train/64982/64982.csv   \n",
            "  inflating: train/64982/64982.jpg   \n",
            "  inflating: train/64982/64982.json  \n",
            "   creating: train/64998/\n",
            "  inflating: train/64998/64998.csv   \n",
            "  inflating: train/64998/64998.jpg   \n",
            "  inflating: train/64998/64998.json  \n",
            "   creating: train/65008/\n",
            "  inflating: train/65008/65008.csv   \n",
            "  inflating: train/65008/65008.jpg   \n",
            "  inflating: train/65008/65008.json  \n",
            "   creating: train/65010/\n",
            "  inflating: train/65010/65010.csv   \n",
            "  inflating: train/65010/65010.jpg   \n",
            "  inflating: train/65010/65010.json  \n",
            "   creating: train/65014/\n",
            "  inflating: train/65014/65014.csv   \n",
            "  inflating: train/65014/65014.jpg   \n",
            "  inflating: train/65014/65014.json  \n",
            "   creating: train/65017/\n",
            "  inflating: train/65017/65017.csv   \n",
            "  inflating: train/65017/65017.jpg   \n",
            "  inflating: train/65017/65017.json  \n",
            "   creating: train/65023/\n",
            "  inflating: train/65023/65023.csv   \n",
            "  inflating: train/65023/65023.jpg   \n",
            "  inflating: train/65023/65023.json  \n",
            "   creating: train/65030/\n",
            "  inflating: train/65030/65030.csv   \n",
            "  inflating: train/65030/65030.jpg   \n",
            "  inflating: train/65030/65030.json  \n",
            "   creating: train/65042/\n",
            "  inflating: train/65042/65042.csv   \n",
            "  inflating: train/65042/65042.jpg   \n",
            "  inflating: train/65042/65042.json  \n",
            "   creating: train/65043/\n",
            "  inflating: train/65043/65043.csv   \n",
            "  inflating: train/65043/65043.jpg   \n",
            "  inflating: train/65043/65043.json  \n",
            "   creating: train/65054/\n",
            "  inflating: train/65054/65054.csv   \n",
            "  inflating: train/65054/65054.jpg   \n",
            "  inflating: train/65054/65054.json  \n",
            "   creating: train/65055/\n",
            "  inflating: train/65055/65055.csv   \n",
            "  inflating: train/65055/65055.jpg   \n",
            "  inflating: train/65055/65055.json  \n",
            "   creating: train/65073/\n",
            "  inflating: train/65073/65073.csv   \n",
            "  inflating: train/65073/65073.jpg   \n",
            "  inflating: train/65073/65073.json  \n",
            "   creating: train/65081/\n",
            "  inflating: train/65081/65081.csv   \n",
            "  inflating: train/65081/65081.jpg   \n",
            "  inflating: train/65081/65081.json  \n",
            "   creating: train/65083/\n",
            "  inflating: train/65083/65083.csv   \n",
            "  inflating: train/65083/65083.jpg   \n",
            "  inflating: train/65083/65083.json  \n",
            "   creating: train/65096/\n",
            "  inflating: train/65096/65096.csv   \n",
            "  inflating: train/65096/65096.jpg   \n",
            "  inflating: train/65096/65096.json  \n",
            "   creating: train/65106/\n",
            "  inflating: train/65106/65106.csv   \n",
            "  inflating: train/65106/65106.jpg   \n",
            "  inflating: train/65106/65106.json  \n",
            "   creating: train/65119/\n",
            "  inflating: train/65119/65119.csv   \n",
            "  inflating: train/65119/65119.jpg   \n",
            "  inflating: train/65119/65119.json  \n",
            "   creating: train/65176/\n",
            "  inflating: train/65176/65176.csv   \n",
            "  inflating: train/65176/65176.jpg   \n",
            "  inflating: train/65176/65176.json  \n",
            "   creating: train/65186/\n",
            "  inflating: train/65186/65186.csv   \n",
            "  inflating: train/65186/65186.jpg   \n",
            "  inflating: train/65186/65186.json  \n",
            "   creating: train/65200/\n",
            "  inflating: train/65200/65200.csv   \n",
            "  inflating: train/65200/65200.jpg   \n",
            "  inflating: train/65200/65200.json  \n",
            "   creating: train/65203/\n",
            "  inflating: train/65203/65203.csv   \n",
            "  inflating: train/65203/65203.jpg   \n",
            "  inflating: train/65203/65203.json  \n",
            "   creating: train/65213/\n",
            "  inflating: train/65213/65213.csv   \n",
            "  inflating: train/65213/65213.jpg   \n",
            "  inflating: train/65213/65213.json  \n",
            "   creating: train/65215/\n",
            "  inflating: train/65215/65215.csv   \n",
            "  inflating: train/65215/65215.jpg   \n",
            "  inflating: train/65215/65215.json  \n",
            "   creating: train/65221/\n",
            "  inflating: train/65221/65221.csv   \n",
            "  inflating: train/65221/65221.jpg   \n",
            "  inflating: train/65221/65221.json  \n",
            "   creating: train/65246/\n",
            "  inflating: train/65246/65246.csv   \n",
            "  inflating: train/65246/65246.jpg   \n",
            "  inflating: train/65246/65246.json  \n",
            "   creating: train/65256/\n",
            "  inflating: train/65256/65256.csv   \n",
            "  inflating: train/65256/65256.jpg   \n",
            "  inflating: train/65256/65256.json  \n",
            "   creating: train/65269/\n",
            "  inflating: train/65269/65269.csv   \n",
            "  inflating: train/65269/65269.jpg   \n",
            "  inflating: train/65269/65269.json  \n",
            "   creating: train/65278/\n",
            "  inflating: train/65278/65278.csv   \n",
            "  inflating: train/65278/65278.jpg   \n",
            "  inflating: train/65278/65278.json  \n",
            "   creating: train/65280/\n",
            "  inflating: train/65280/65280.csv   \n",
            "  inflating: train/65280/65280.jpg   \n",
            "  inflating: train/65280/65280.json  \n",
            "   creating: train/65281/\n",
            "  inflating: train/65281/65281.csv   \n",
            "  inflating: train/65281/65281.jpg   \n",
            "  inflating: train/65281/65281.json  \n",
            "   creating: train/65287/\n",
            "  inflating: train/65287/65287.csv   \n",
            "  inflating: train/65287/65287.jpg   \n",
            "  inflating: train/65287/65287.json  \n",
            "   creating: train/65295/\n",
            "  inflating: train/65295/65295.csv   \n",
            "  inflating: train/65295/65295.jpg   \n",
            "  inflating: train/65295/65295.json  \n",
            "   creating: train/65296/\n",
            "  inflating: train/65296/65296.csv   \n",
            "  inflating: train/65296/65296.jpg   \n",
            "  inflating: train/65296/65296.json  \n",
            "   creating: train/65301/\n",
            "  inflating: train/65301/65301.csv   \n",
            "  inflating: train/65301/65301.jpg   \n",
            "  inflating: train/65301/65301.json  \n",
            "   creating: train/65312/\n",
            "  inflating: train/65312/65312.csv   \n",
            "  inflating: train/65312/65312.jpg   \n",
            "  inflating: train/65312/65312.json  \n",
            "   creating: train/65324/\n",
            "  inflating: train/65324/65324.csv   \n",
            "  inflating: train/65324/65324.jpg   \n",
            "  inflating: train/65324/65324.json  \n",
            "   creating: train/65356/\n",
            "  inflating: train/65356/65356.csv   \n",
            "  inflating: train/65356/65356.jpg   \n",
            "  inflating: train/65356/65356.json  \n",
            "   creating: train/65359/\n",
            "  inflating: train/65359/65359.csv   \n",
            "  inflating: train/65359/65359.jpg   \n",
            "  inflating: train/65359/65359.json  \n",
            "   creating: train/65374/\n",
            "  inflating: train/65374/65374.csv   \n",
            "  inflating: train/65374/65374.jpg   \n",
            "  inflating: train/65374/65374.json  \n",
            "   creating: train/65382/\n",
            "  inflating: train/65382/65382.csv   \n",
            "  inflating: train/65382/65382.jpg   \n",
            "  inflating: train/65382/65382.json  \n",
            "   creating: train/65408/\n",
            "  inflating: train/65408/65408.csv   \n",
            "  inflating: train/65408/65408.jpg   \n",
            "  inflating: train/65408/65408.json  \n",
            "   creating: train/65424/\n",
            "  inflating: train/65424/65424.csv   \n",
            "  inflating: train/65424/65424.jpg   \n",
            "  inflating: train/65424/65424.json  \n",
            "   creating: train/65428/\n",
            "  inflating: train/65428/65428.csv   \n",
            "  inflating: train/65428/65428.jpg   \n",
            "  inflating: train/65428/65428.json  \n",
            "   creating: train/65429/\n",
            "  inflating: train/65429/65429.csv   \n",
            "  inflating: train/65429/65429.jpg   \n",
            "  inflating: train/65429/65429.json  \n",
            "   creating: train/65435/\n",
            "  inflating: train/65435/65435.csv   \n",
            "  inflating: train/65435/65435.jpg   \n",
            "  inflating: train/65435/65435.json  \n",
            "   creating: train/65436/\n",
            "  inflating: train/65436/65436.csv   \n",
            "  inflating: train/65436/65436.jpg   \n",
            "  inflating: train/65436/65436.json  \n",
            "   creating: train/65463/\n",
            "  inflating: train/65463/65463.csv   \n",
            "  inflating: train/65463/65463.jpg   \n",
            "  inflating: train/65463/65463.json  \n",
            "   creating: train/65480/\n",
            "  inflating: train/65480/65480.csv   \n",
            "  inflating: train/65480/65480.jpg   \n",
            "  inflating: train/65480/65480.json  \n",
            "   creating: train/65499/\n",
            "  inflating: train/65499/65499.csv   \n",
            "  inflating: train/65499/65499.jpg   \n",
            "  inflating: train/65499/65499.json  \n",
            "   creating: train/65504/\n",
            "  inflating: train/65504/65504.csv   \n",
            "  inflating: train/65504/65504.jpg   \n",
            "  inflating: train/65504/65504.json  \n",
            "   creating: train/65510/\n",
            "  inflating: train/65510/65510.csv   \n",
            "  inflating: train/65510/65510.jpg   \n",
            "  inflating: train/65510/65510.json  \n",
            "   creating: train/65518/\n",
            "  inflating: train/65518/65518.csv   \n",
            "  inflating: train/65518/65518.jpg   \n",
            "  inflating: train/65518/65518.json  \n",
            "   creating: train/65533/\n",
            "  inflating: train/65533/65533.csv   \n",
            "  inflating: train/65533/65533.jpg   \n",
            "  inflating: train/65533/65533.json  \n",
            "   creating: train/65537/\n",
            "  inflating: train/65537/65537.csv   \n",
            "  inflating: train/65537/65537.jpg   \n",
            "  inflating: train/65537/65537.json  \n",
            "   creating: train/65564/\n",
            "  inflating: train/65564/65564.csv   \n",
            "  inflating: train/65564/65564.jpg   \n",
            "  inflating: train/65564/65564.json  \n",
            "   creating: train/65569/\n",
            "  inflating: train/65569/65569.csv   \n",
            "  inflating: train/65569/65569.jpg   \n",
            "  inflating: train/65569/65569.json  \n",
            "   creating: train/65589/\n",
            "  inflating: train/65589/65589.csv   \n",
            "  inflating: train/65589/65589.jpg   \n",
            "  inflating: train/65589/65589.json  \n",
            "   creating: train/65592/\n",
            "  inflating: train/65592/65592.csv   \n",
            "  inflating: train/65592/65592.jpg   \n",
            "  inflating: train/65592/65592.json  \n",
            "   creating: train/65613/\n",
            "  inflating: train/65613/65613.csv   \n",
            "  inflating: train/65613/65613.jpg   \n",
            "  inflating: train/65613/65613.json  \n",
            "   creating: train/65620/\n",
            "  inflating: train/65620/65620.csv   \n",
            "  inflating: train/65620/65620.jpg   \n",
            "  inflating: train/65620/65620.json  \n",
            "   creating: train/65621/\n",
            "  inflating: train/65621/65621.csv   \n",
            "  inflating: train/65621/65621.jpg   \n",
            "  inflating: train/65621/65621.json  \n",
            "   creating: train/65690/\n",
            "  inflating: train/65690/65690.csv   \n",
            "  inflating: train/65690/65690.jpg   \n",
            "  inflating: train/65690/65690.json  \n",
            "   creating: train/65694/\n",
            "  inflating: train/65694/65694.csv   \n",
            "  inflating: train/65694/65694.jpg   \n",
            "  inflating: train/65694/65694.json  \n",
            "   creating: train/65716/\n",
            "  inflating: train/65716/65716.csv   \n",
            "  inflating: train/65716/65716.jpg   \n",
            "  inflating: train/65716/65716.json  \n",
            "   creating: train/65724/\n",
            "  inflating: train/65724/65724.csv   \n",
            "  inflating: train/65724/65724.jpg   \n",
            "  inflating: train/65724/65724.json  \n",
            "   creating: train/65725/\n",
            "  inflating: train/65725/65725.csv   \n",
            "  inflating: train/65725/65725.jpg   \n",
            "  inflating: train/65725/65725.json  \n",
            "   creating: train/65733/\n",
            "  inflating: train/65733/65733.csv   \n",
            "  inflating: train/65733/65733.jpg   \n",
            "  inflating: train/65733/65733.json  \n",
            "   creating: train/65744/\n",
            "  inflating: train/65744/65744.csv   \n",
            "  inflating: train/65744/65744.jpg   \n",
            "  inflating: train/65744/65744.json  \n",
            "   creating: train/65757/\n",
            "  inflating: train/65757/65757.csv   \n",
            "  inflating: train/65757/65757.jpg   \n",
            "  inflating: train/65757/65757.json  \n",
            "   creating: train/65763/\n",
            "  inflating: train/65763/65763.csv   \n",
            "  inflating: train/65763/65763.jpg   \n",
            "  inflating: train/65763/65763.json  \n",
            "   creating: train/65779/\n",
            "  inflating: train/65779/65779.csv   \n",
            "  inflating: train/65779/65779.jpg   \n",
            "  inflating: train/65779/65779.json  \n",
            "   creating: train/65789/\n",
            "  inflating: train/65789/65789.csv   \n",
            "  inflating: train/65789/65789.jpg   \n",
            "  inflating: train/65789/65789.json  \n",
            "   creating: train/65826/\n",
            "  inflating: train/65826/65826.csv   \n",
            "  inflating: train/65826/65826.jpg   \n",
            "  inflating: train/65826/65826.json  \n",
            "   creating: train/65834/\n",
            "  inflating: train/65834/65834.csv   \n",
            "  inflating: train/65834/65834.jpg   \n",
            "  inflating: train/65834/65834.json  \n",
            "   creating: train/65835/\n",
            "  inflating: train/65835/65835.csv   \n",
            "  inflating: train/65835/65835.jpg   \n",
            "  inflating: train/65835/65835.json  \n",
            "   creating: train/65841/\n",
            "  inflating: train/65841/65841.csv   \n",
            "  inflating: train/65841/65841.jpg   \n",
            "  inflating: train/65841/65841.json  \n",
            "   creating: train/65877/\n",
            "  inflating: train/65877/65877.csv   \n",
            "  inflating: train/65877/65877.jpg   \n",
            "  inflating: train/65877/65877.json  \n",
            "   creating: train/65896/\n",
            "  inflating: train/65896/65896.csv   \n",
            "  inflating: train/65896/65896.jpg   \n",
            "  inflating: train/65896/65896.json  \n",
            "   creating: train/65906/\n",
            "  inflating: train/65906/65906.csv   \n",
            "  inflating: train/65906/65906.jpg   \n",
            "  inflating: train/65906/65906.json  \n",
            "   creating: train/65916/\n",
            "  inflating: train/65916/65916.csv   \n",
            "  inflating: train/65916/65916.jpg   \n",
            "  inflating: train/65916/65916.json  \n",
            "   creating: train/65941/\n",
            "  inflating: train/65941/65941.csv   \n",
            "  inflating: train/65941/65941.jpg   \n",
            "  inflating: train/65941/65941.json  \n",
            "   creating: train/65957/\n",
            "  inflating: train/65957/65957.csv   \n",
            "  inflating: train/65957/65957.jpg   \n",
            "  inflating: train/65957/65957.json  \n",
            "   creating: train/65961/\n",
            "  inflating: train/65961/65961.csv   \n",
            "  inflating: train/65961/65961.jpg   \n",
            "  inflating: train/65961/65961.json  \n",
            "   creating: train/65965/\n",
            "  inflating: train/65965/65965.csv   \n",
            "  inflating: train/65965/65965.jpg   \n",
            "  inflating: train/65965/65965.json  \n",
            "   creating: train/65968/\n",
            "  inflating: train/65968/65968.csv   \n",
            "  inflating: train/65968/65968.jpg   \n",
            "  inflating: train/65968/65968.json  \n",
            "   creating: train/65999/\n",
            "  inflating: train/65999/65999.csv   \n",
            "  inflating: train/65999/65999.jpg   \n",
            "  inflating: train/65999/65999.json  \n",
            "   creating: train/66008/\n",
            "  inflating: train/66008/66008.csv   \n",
            "  inflating: train/66008/66008.jpg   \n",
            "  inflating: train/66008/66008.json  \n",
            "   creating: train/66017/\n",
            "  inflating: train/66017/66017.csv   \n",
            "  inflating: train/66017/66017.jpg   \n",
            "  inflating: train/66017/66017.json  \n",
            "   creating: train/66030/\n",
            "  inflating: train/66030/66030.csv   \n",
            "  inflating: train/66030/66030.jpg   \n",
            "  inflating: train/66030/66030.json  \n",
            "   creating: train/66042/\n",
            "  inflating: train/66042/66042.csv   \n",
            "  inflating: train/66042/66042.jpg   \n",
            "  inflating: train/66042/66042.json  \n",
            "   creating: train/66060/\n",
            "  inflating: train/66060/66060.csv   \n",
            "  inflating: train/66060/66060.jpg   \n",
            "  inflating: train/66060/66060.json  \n",
            "   creating: train/66064/\n",
            "  inflating: train/66064/66064.csv   \n",
            "  inflating: train/66064/66064.jpg   \n",
            "  inflating: train/66064/66064.json  \n",
            "   creating: train/66067/\n",
            "  inflating: train/66067/66067.csv   \n",
            "  inflating: train/66067/66067.jpg   \n",
            "  inflating: train/66067/66067.json  \n",
            "   creating: train/66074/\n",
            "  inflating: train/66074/66074.csv   \n",
            "  inflating: train/66074/66074.jpg   \n",
            "  inflating: train/66074/66074.json  \n",
            "   creating: train/66082/\n",
            "  inflating: train/66082/66082.csv   \n",
            "  inflating: train/66082/66082.jpg   \n",
            "  inflating: train/66082/66082.json  \n",
            "   creating: train/66086/\n",
            "  inflating: train/66086/66086.csv   \n",
            "  inflating: train/66086/66086.jpg   \n",
            "  inflating: train/66086/66086.json  \n",
            "   creating: train/66090/\n",
            "  inflating: train/66090/66090.csv   \n",
            "  inflating: train/66090/66090.jpg   \n",
            "  inflating: train/66090/66090.json  \n",
            "   creating: train/66101/\n",
            "  inflating: train/66101/66101.csv   \n",
            "  inflating: train/66101/66101.jpg   \n",
            "  inflating: train/66101/66101.json  \n",
            "   creating: train/66103/\n",
            "  inflating: train/66103/66103.csv   \n",
            "  inflating: train/66103/66103.jpg   \n",
            "  inflating: train/66103/66103.json  \n",
            "   creating: train/66111/\n",
            "  inflating: train/66111/66111.csv   \n",
            "  inflating: train/66111/66111.jpg   \n",
            "  inflating: train/66111/66111.json  \n",
            "   creating: train/66131/\n",
            "  inflating: train/66131/66131.csv   \n",
            "  inflating: train/66131/66131.jpg   \n",
            "  inflating: train/66131/66131.json  \n",
            "   creating: train/66136/\n",
            "  inflating: train/66136/66136.csv   \n",
            "  inflating: train/66136/66136.jpg   \n",
            "  inflating: train/66136/66136.json  \n",
            "   creating: train/66137/\n",
            "  inflating: train/66137/66137.csv   \n",
            "  inflating: train/66137/66137.jpg   \n",
            "  inflating: train/66137/66137.json  \n",
            "   creating: train/66146/\n",
            "  inflating: train/66146/66146.csv   \n",
            "  inflating: train/66146/66146.jpg   \n",
            "  inflating: train/66146/66146.json  \n",
            "   creating: train/66149/\n",
            "  inflating: train/66149/66149.csv   \n",
            "  inflating: train/66149/66149.jpg   \n",
            "  inflating: train/66149/66149.json  \n",
            "   creating: train/66166/\n",
            "  inflating: train/66166/66166.csv   \n",
            "  inflating: train/66166/66166.jpg   \n",
            "  inflating: train/66166/66166.json  \n",
            "   creating: train/66173/\n",
            "  inflating: train/66173/66173.csv   \n",
            "  inflating: train/66173/66173.jpg   \n",
            "  inflating: train/66173/66173.json  \n",
            "   creating: train/66176/\n",
            "  inflating: train/66176/66176.csv   \n",
            "  inflating: train/66176/66176.jpg   \n",
            "  inflating: train/66176/66176.json  \n",
            "   creating: train/66178/\n",
            "  inflating: train/66178/66178.csv   \n",
            "  inflating: train/66178/66178.jpg   \n",
            "  inflating: train/66178/66178.json  \n",
            "   creating: train/66182/\n",
            "  inflating: train/66182/66182.csv   \n",
            "  inflating: train/66182/66182.jpg   \n",
            "  inflating: train/66182/66182.json  \n",
            "   creating: train/66194/\n",
            "  inflating: train/66194/66194.csv   \n",
            "  inflating: train/66194/66194.jpg   \n",
            "  inflating: train/66194/66194.json  \n",
            "   creating: train/66202/\n",
            "  inflating: train/66202/66202.csv   \n",
            "  inflating: train/66202/66202.jpg   \n",
            "  inflating: train/66202/66202.json  \n",
            "   creating: train/66216/\n",
            "  inflating: train/66216/66216.csv   \n",
            "  inflating: train/66216/66216.jpg   \n",
            "  inflating: train/66216/66216.json  \n",
            "   creating: train/66268/\n",
            "  inflating: train/66268/66268.csv   \n",
            "  inflating: train/66268/66268.jpg   \n",
            "  inflating: train/66268/66268.json  \n",
            "   creating: train/66269/\n",
            "  inflating: train/66269/66269.csv   \n",
            "  inflating: train/66269/66269.jpg   \n",
            "  inflating: train/66269/66269.json  \n",
            "   creating: train/66270/\n",
            "  inflating: train/66270/66270.csv   \n",
            "  inflating: train/66270/66270.jpg   \n",
            "  inflating: train/66270/66270.json  \n",
            "   creating: train/66281/\n",
            "  inflating: train/66281/66281.csv   \n",
            "  inflating: train/66281/66281.jpg   \n",
            "  inflating: train/66281/66281.json  \n",
            "   creating: train/66284/\n",
            "  inflating: train/66284/66284.csv   \n",
            "  inflating: train/66284/66284.jpg   \n",
            "  inflating: train/66284/66284.json  \n",
            "   creating: train/66302/\n",
            "  inflating: train/66302/66302.csv   \n",
            "  inflating: train/66302/66302.jpg   \n",
            "  inflating: train/66302/66302.json  \n",
            "   creating: train/66316/\n",
            "  inflating: train/66316/66316.csv   \n",
            "  inflating: train/66316/66316.jpg   \n",
            "  inflating: train/66316/66316.json  \n",
            "   creating: train/66323/\n",
            "  inflating: train/66323/66323.csv   \n",
            "  inflating: train/66323/66323.jpg   \n",
            "  inflating: train/66323/66323.json  \n",
            "   creating: train/66341/\n",
            "  inflating: train/66341/66341.csv   \n",
            "  inflating: train/66341/66341.jpg   \n",
            "  inflating: train/66341/66341.json  \n",
            "   creating: train/66348/\n",
            "  inflating: train/66348/66348.csv   \n",
            "  inflating: train/66348/66348.jpg   \n",
            "  inflating: train/66348/66348.json  \n",
            "   creating: train/66349/\n",
            "  inflating: train/66349/66349.csv   \n",
            "  inflating: train/66349/66349.jpg   \n",
            "  inflating: train/66349/66349.json  \n",
            "   creating: train/66354/\n",
            "  inflating: train/66354/66354.csv   \n",
            "  inflating: train/66354/66354.jpg   \n",
            "  inflating: train/66354/66354.json  \n",
            "   creating: train/66355/\n",
            "  inflating: train/66355/66355.csv   \n",
            "  inflating: train/66355/66355.jpg   \n",
            "  inflating: train/66355/66355.json  \n",
            "   creating: train/66379/\n",
            "  inflating: train/66379/66379.csv   \n",
            "  inflating: train/66379/66379.jpg   \n",
            "  inflating: train/66379/66379.json  \n",
            "   creating: train/66393/\n",
            "  inflating: train/66393/66393.csv   \n",
            "  inflating: train/66393/66393.jpg   \n",
            "  inflating: train/66393/66393.json  \n",
            "   creating: train/66395/\n",
            "  inflating: train/66395/66395.csv   \n",
            "  inflating: train/66395/66395.jpg   \n",
            "  inflating: train/66395/66395.json  \n",
            "   creating: train/66397/\n",
            "  inflating: train/66397/66397.csv   \n",
            "  inflating: train/66397/66397.jpg   \n",
            "  inflating: train/66397/66397.json  \n",
            "   creating: train/66401/\n",
            "  inflating: train/66401/66401.csv   \n",
            "  inflating: train/66401/66401.jpg   \n",
            "  inflating: train/66401/66401.json  \n",
            "   creating: train/66412/\n",
            "  inflating: train/66412/66412.csv   \n",
            "  inflating: train/66412/66412.jpg   \n",
            "  inflating: train/66412/66412.json  \n",
            "   creating: train/66461/\n",
            "  inflating: train/66461/66461.csv   \n",
            "  inflating: train/66461/66461.jpg   \n",
            "  inflating: train/66461/66461.json  \n",
            "   creating: train/66465/\n",
            "  inflating: train/66465/66465.csv   \n",
            "  inflating: train/66465/66465.jpg   \n",
            "  inflating: train/66465/66465.json  \n",
            "   creating: train/66470/\n",
            "  inflating: train/66470/66470.csv   \n",
            "  inflating: train/66470/66470.jpg   \n",
            "  inflating: train/66470/66470.json  \n",
            "   creating: train/66475/\n",
            "  inflating: train/66475/66475.csv   \n",
            "  inflating: train/66475/66475.jpg   \n",
            "  inflating: train/66475/66475.json  \n",
            "   creating: train/66477/\n",
            "  inflating: train/66477/66477.csv   \n",
            "  inflating: train/66477/66477.jpg   \n",
            "  inflating: train/66477/66477.json  \n",
            "   creating: train/66485/\n",
            "  inflating: train/66485/66485.csv   \n",
            "  inflating: train/66485/66485.jpg   \n",
            "  inflating: train/66485/66485.json  \n",
            "   creating: train/66502/\n",
            "  inflating: train/66502/66502.csv   \n",
            "  inflating: train/66502/66502.jpg   \n",
            "  inflating: train/66502/66502.json  \n",
            "   creating: train/66503/\n",
            "  inflating: train/66503/66503.csv   \n",
            "  inflating: train/66503/66503.jpg   \n",
            "  inflating: train/66503/66503.json  \n",
            "   creating: train/66512/\n",
            "  inflating: train/66512/66512.csv   \n",
            "  inflating: train/66512/66512.jpg   \n",
            "  inflating: train/66512/66512.json  \n",
            "   creating: train/66525/\n",
            "  inflating: train/66525/66525.csv   \n",
            "  inflating: train/66525/66525.jpg   \n",
            "  inflating: train/66525/66525.json  \n",
            "   creating: train/66526/\n",
            "  inflating: train/66526/66526.csv   \n",
            "  inflating: train/66526/66526.jpg   \n",
            "  inflating: train/66526/66526.json  \n",
            "   creating: train/66529/\n",
            "  inflating: train/66529/66529.csv   \n",
            "  inflating: train/66529/66529.jpg   \n",
            "  inflating: train/66529/66529.json  \n",
            "   creating: train/66536/\n",
            "  inflating: train/66536/66536.csv   \n",
            "  inflating: train/66536/66536.jpg   \n",
            "  inflating: train/66536/66536.json  \n",
            "   creating: train/66537/\n",
            "  inflating: train/66537/66537.csv   \n",
            "  inflating: train/66537/66537.jpg   \n",
            "  inflating: train/66537/66537.json  \n",
            "   creating: train/66541/\n",
            "  inflating: train/66541/66541.csv   \n",
            "  inflating: train/66541/66541.jpg   \n",
            "  inflating: train/66541/66541.json  \n",
            "   creating: train/66563/\n",
            "  inflating: train/66563/66563.csv   \n",
            "  inflating: train/66563/66563.jpg   \n",
            "  inflating: train/66563/66563.json  \n",
            "   creating: train/66578/\n",
            "  inflating: train/66578/66578.csv   \n",
            "  inflating: train/66578/66578.jpg   \n",
            "  inflating: train/66578/66578.json  \n",
            "   creating: train/66579/\n",
            "  inflating: train/66579/66579.csv   \n",
            "  inflating: train/66579/66579.jpg   \n",
            "  inflating: train/66579/66579.json  \n",
            "   creating: train/66582/\n",
            "  inflating: train/66582/66582.csv   \n",
            "  inflating: train/66582/66582.jpg   \n",
            "  inflating: train/66582/66582.json  \n",
            "   creating: train/66597/\n",
            "  inflating: train/66597/66597.csv   \n",
            "  inflating: train/66597/66597.jpg   \n",
            "  inflating: train/66597/66597.json  \n",
            "   creating: train/66598/\n",
            "  inflating: train/66598/66598.csv   \n",
            "  inflating: train/66598/66598.jpg   \n",
            "  inflating: train/66598/66598.json  \n",
            "   creating: train/66624/\n",
            "  inflating: train/66624/66624.csv   \n",
            "  inflating: train/66624/66624.jpg   \n",
            "  inflating: train/66624/66624.json  \n",
            "   creating: train/66655/\n",
            "  inflating: train/66655/66655.csv   \n",
            "  inflating: train/66655/66655.jpg   \n",
            "  inflating: train/66655/66655.json  \n",
            "   creating: train/66659/\n",
            "  inflating: train/66659/66659.csv   \n",
            "  inflating: train/66659/66659.jpg   \n",
            "  inflating: train/66659/66659.json  \n",
            "   creating: train/66661/\n",
            "  inflating: train/66661/66661.csv   \n",
            "  inflating: train/66661/66661.jpg   \n",
            "  inflating: train/66661/66661.json  \n",
            "   creating: train/66675/\n",
            "  inflating: train/66675/66675.csv   \n",
            "  inflating: train/66675/66675.jpg   \n",
            "  inflating: train/66675/66675.json  \n",
            "   creating: train/66678/\n",
            "  inflating: train/66678/66678.csv   \n",
            "  inflating: train/66678/66678.jpg   \n",
            "  inflating: train/66678/66678.json  \n",
            "   creating: train/66685/\n",
            "  inflating: train/66685/66685.csv   \n",
            "  inflating: train/66685/66685.jpg   \n",
            "  inflating: train/66685/66685.json  \n",
            "   creating: train/66717/\n",
            "  inflating: train/66717/66717.csv   \n",
            "  inflating: train/66717/66717.jpg   \n",
            "  inflating: train/66717/66717.json  \n",
            "   creating: train/66723/\n",
            "  inflating: train/66723/66723.csv   \n",
            "  inflating: train/66723/66723.jpg   \n",
            "  inflating: train/66723/66723.json  \n",
            "   creating: train/66729/\n",
            "  inflating: train/66729/66729.csv   \n",
            "  inflating: train/66729/66729.jpg   \n",
            "  inflating: train/66729/66729.json  \n",
            "   creating: train/66758/\n",
            "  inflating: train/66758/66758.csv   \n",
            "  inflating: train/66758/66758.jpg   \n",
            "  inflating: train/66758/66758.json  \n",
            "   creating: train/66761/\n",
            "  inflating: train/66761/66761.csv   \n",
            "  inflating: train/66761/66761.jpg   \n",
            "  inflating: train/66761/66761.json  \n",
            "   creating: train/66784/\n",
            "  inflating: train/66784/66784.csv   \n",
            "  inflating: train/66784/66784.jpg   \n",
            "  inflating: train/66784/66784.json  \n",
            "   creating: train/66785/\n",
            "  inflating: train/66785/66785.csv   \n",
            "  inflating: train/66785/66785.jpg   \n",
            "  inflating: train/66785/66785.json  \n",
            "   creating: train/66806/\n",
            "  inflating: train/66806/66806.csv   \n",
            "  inflating: train/66806/66806.jpg   \n",
            "  inflating: train/66806/66806.json  \n",
            "   creating: train/66809/\n",
            "  inflating: train/66809/66809.csv   \n",
            "  inflating: train/66809/66809.jpg   \n",
            "  inflating: train/66809/66809.json  \n",
            "   creating: train/66813/\n",
            "  inflating: train/66813/66813.csv   \n",
            "  inflating: train/66813/66813.jpg   \n",
            "  inflating: train/66813/66813.json  \n",
            "   creating: train/66834/\n",
            "  inflating: train/66834/66834.csv   \n",
            "  inflating: train/66834/66834.jpg   \n",
            "  inflating: train/66834/66834.json  \n",
            "   creating: train/66835/\n",
            "  inflating: train/66835/66835.csv   \n",
            "  inflating: train/66835/66835.jpg   \n",
            "  inflating: train/66835/66835.json  \n",
            "   creating: train/66842/\n",
            "  inflating: train/66842/66842.csv   \n",
            "  inflating: train/66842/66842.jpg   \n",
            "  inflating: train/66842/66842.json  \n",
            "   creating: train/66851/\n",
            "  inflating: train/66851/66851.csv   \n",
            "  inflating: train/66851/66851.jpg   \n",
            "  inflating: train/66851/66851.json  \n",
            "   creating: train/66859/\n",
            "  inflating: train/66859/66859.csv   \n",
            "  inflating: train/66859/66859.jpg   \n",
            "  inflating: train/66859/66859.json  \n",
            "   creating: train/66869/\n",
            "  inflating: train/66869/66869.csv   \n",
            "  inflating: train/66869/66869.jpg   \n",
            "  inflating: train/66869/66869.json  \n",
            "   creating: train/66896/\n",
            "  inflating: train/66896/66896.csv   \n",
            "  inflating: train/66896/66896.jpg   \n",
            "  inflating: train/66896/66896.json  \n",
            "   creating: train/66902/\n",
            "  inflating: train/66902/66902.csv   \n",
            "  inflating: train/66902/66902.jpg   \n",
            "  inflating: train/66902/66902.json  \n",
            "   creating: train/66905/\n",
            "  inflating: train/66905/66905.csv   \n",
            "  inflating: train/66905/66905.jpg   \n",
            "  inflating: train/66905/66905.json  \n",
            "   creating: train/66913/\n",
            "  inflating: train/66913/66913.csv   \n",
            "  inflating: train/66913/66913.jpg   \n",
            "  inflating: train/66913/66913.json  \n",
            "   creating: train/66918/\n",
            "  inflating: train/66918/66918.csv   \n",
            "  inflating: train/66918/66918.jpg   \n",
            "  inflating: train/66918/66918.json  \n",
            "   creating: train/66927/\n",
            "  inflating: train/66927/66927.csv   \n",
            "  inflating: train/66927/66927.jpg   \n",
            "  inflating: train/66927/66927.json  \n",
            "   creating: train/66947/\n",
            "  inflating: train/66947/66947.csv   \n",
            "  inflating: train/66947/66947.jpg   \n",
            "  inflating: train/66947/66947.json  \n",
            "   creating: train/66972/\n",
            "  inflating: train/66972/66972.csv   \n",
            "  inflating: train/66972/66972.jpg   \n",
            "  inflating: train/66972/66972.json  \n",
            "   creating: train/66983/\n",
            "  inflating: train/66983/66983.csv   \n",
            "  inflating: train/66983/66983.jpg   \n",
            "  inflating: train/66983/66983.json  \n",
            "   creating: train/66989/\n",
            "  inflating: train/66989/66989.csv   \n",
            "  inflating: train/66989/66989.jpg   \n",
            "  inflating: train/66989/66989.json  \n",
            "   creating: train/66990/\n",
            "  inflating: train/66990/66990.csv   \n",
            "  inflating: train/66990/66990.jpg   \n",
            "  inflating: train/66990/66990.json  \n",
            "   creating: train/66997/\n",
            "  inflating: train/66997/66997.csv   \n",
            "  inflating: train/66997/66997.jpg   \n",
            "  inflating: train/66997/66997.json  \n",
            "   creating: train/66999/\n",
            "  inflating: train/66999/66999.csv   \n",
            "  inflating: train/66999/66999.jpg   \n",
            "  inflating: train/66999/66999.json  \n",
            "   creating: train/67002/\n",
            "  inflating: train/67002/67002.csv   \n",
            "  inflating: train/67002/67002.jpg   \n",
            "  inflating: train/67002/67002.json  \n",
            "   creating: train/67003/\n",
            "  inflating: train/67003/67003.csv   \n",
            "  inflating: train/67003/67003.jpg   \n",
            "  inflating: train/67003/67003.json  \n",
            "   creating: train/67011/\n",
            "  inflating: train/67011/67011.csv   \n",
            "  inflating: train/67011/67011.jpg   \n",
            "  inflating: train/67011/67011.json  \n",
            "   creating: train/67023/\n",
            "  inflating: train/67023/67023.csv   \n",
            "  inflating: train/67023/67023.jpg   \n",
            "  inflating: train/67023/67023.json  \n",
            "   creating: train/67028/\n",
            "  inflating: train/67028/67028.csv   \n",
            "  inflating: train/67028/67028.jpg   \n",
            "  inflating: train/67028/67028.json  \n",
            "   creating: train/67041/\n",
            "  inflating: train/67041/67041.csv   \n",
            "  inflating: train/67041/67041.jpg   \n",
            "  inflating: train/67041/67041.json  \n",
            "   creating: train/67054/\n",
            "  inflating: train/67054/67054.csv   \n",
            "  inflating: train/67054/67054.jpg   \n",
            "  inflating: train/67054/67054.json  \n",
            "   creating: train/67079/\n",
            "  inflating: train/67079/67079.csv   \n",
            "  inflating: train/67079/67079.jpg   \n",
            "  inflating: train/67079/67079.json  \n",
            "   creating: train/67082/\n",
            "  inflating: train/67082/67082.csv   \n",
            "  inflating: train/67082/67082.jpg   \n",
            "  inflating: train/67082/67082.json  \n",
            "   creating: train/67086/\n",
            "  inflating: train/67086/67086.csv   \n",
            "  inflating: train/67086/67086.jpg   \n",
            "  inflating: train/67086/67086.json  \n",
            "   creating: train/67092/\n",
            "  inflating: train/67092/67092.csv   \n",
            "  inflating: train/67092/67092.jpg   \n",
            "  inflating: train/67092/67092.json  \n",
            "   creating: train/67120/\n",
            "  inflating: train/67120/67120.csv   \n",
            "  inflating: train/67120/67120.jpg   \n",
            "  inflating: train/67120/67120.json  \n",
            "   creating: train/67138/\n",
            "  inflating: train/67138/67138.csv   \n",
            "  inflating: train/67138/67138.jpg   \n",
            "  inflating: train/67138/67138.json  \n",
            "   creating: train/67153/\n",
            "  inflating: train/67153/67153.csv   \n",
            "  inflating: train/67153/67153.jpg   \n",
            "  inflating: train/67153/67153.json  \n",
            "   creating: train/67154/\n",
            "  inflating: train/67154/67154.csv   \n",
            "  inflating: train/67154/67154.jpg   \n",
            "  inflating: train/67154/67154.json  \n",
            "   creating: train/67157/\n",
            "  inflating: train/67157/67157.csv   \n",
            "  inflating: train/67157/67157.jpg   \n",
            "  inflating: train/67157/67157.json  \n",
            "   creating: train/67177/\n",
            "  inflating: train/67177/67177.csv   \n",
            "  inflating: train/67177/67177.jpg   \n",
            "  inflating: train/67177/67177.json  \n",
            "   creating: train/67183/\n",
            "  inflating: train/67183/67183.csv   \n",
            "  inflating: train/67183/67183.jpg   \n",
            "  inflating: train/67183/67183.json  \n",
            "   creating: train/67201/\n",
            "  inflating: train/67201/67201.csv   \n",
            "  inflating: train/67201/67201.jpg   \n",
            "  inflating: train/67201/67201.json  \n",
            "   creating: train/67227/\n",
            "  inflating: train/67227/67227.csv   \n",
            "  inflating: train/67227/67227.jpg   \n",
            "  inflating: train/67227/67227.json  \n",
            "   creating: train/67230/\n",
            "  inflating: train/67230/67230.csv   \n",
            "  inflating: train/67230/67230.jpg   \n",
            "  inflating: train/67230/67230.json  \n",
            "   creating: train/67239/\n",
            "  inflating: train/67239/67239.csv   \n",
            "  inflating: train/67239/67239.jpg   \n",
            "  inflating: train/67239/67239.json  \n",
            "   creating: train/67241/\n",
            "  inflating: train/67241/67241.csv   \n",
            "  inflating: train/67241/67241.jpg   \n",
            "  inflating: train/67241/67241.json  \n",
            "   creating: train/67243/\n",
            "  inflating: train/67243/67243.csv   \n",
            "  inflating: train/67243/67243.jpg   \n",
            "  inflating: train/67243/67243.json  \n",
            "   creating: train/67247/\n",
            "  inflating: train/67247/67247.csv   \n",
            "  inflating: train/67247/67247.jpg   \n",
            "  inflating: train/67247/67247.json  \n",
            "   creating: train/67250/\n",
            "  inflating: train/67250/67250.csv   \n",
            "  inflating: train/67250/67250.jpg   \n",
            "  inflating: train/67250/67250.json  \n",
            "   creating: train/67263/\n",
            "  inflating: train/67263/67263.csv   \n",
            "  inflating: train/67263/67263.jpg   \n",
            "  inflating: train/67263/67263.json  \n",
            "   creating: train/67301/\n",
            "  inflating: train/67301/67301.csv   \n",
            "  inflating: train/67301/67301.jpg   \n",
            "  inflating: train/67301/67301.json  \n",
            "   creating: train/67310/\n",
            "  inflating: train/67310/67310.csv   \n",
            "  inflating: train/67310/67310.jpg   \n",
            "  inflating: train/67310/67310.json  \n",
            "   creating: train/67328/\n",
            "  inflating: train/67328/67328.csv   \n",
            "  inflating: train/67328/67328.jpg   \n",
            "  inflating: train/67328/67328.json  \n",
            "   creating: train/67332/\n",
            "  inflating: train/67332/67332.csv   \n",
            "  inflating: train/67332/67332.jpg   \n",
            "  inflating: train/67332/67332.json  \n",
            "   creating: train/67348/\n",
            "  inflating: train/67348/67348.csv   \n",
            "  inflating: train/67348/67348.jpg   \n",
            "  inflating: train/67348/67348.json  \n",
            "   creating: train/67365/\n",
            "  inflating: train/67365/67365.csv   \n",
            "  inflating: train/67365/67365.jpg   \n",
            "  inflating: train/67365/67365.json  \n",
            "   creating: train/67373/\n",
            "  inflating: train/67373/67373.csv   \n",
            "  inflating: train/67373/67373.jpg   \n",
            "  inflating: train/67373/67373.json  \n",
            "   creating: train/67376/\n",
            "  inflating: train/67376/67376.csv   \n",
            "  inflating: train/67376/67376.jpg   \n",
            "  inflating: train/67376/67376.json  \n",
            "   creating: train/67382/\n",
            "  inflating: train/67382/67382.csv   \n",
            "  inflating: train/67382/67382.jpg   \n",
            "  inflating: train/67382/67382.json  \n",
            "   creating: train/67386/\n",
            "  inflating: train/67386/67386.csv   \n",
            "  inflating: train/67386/67386.jpg   \n",
            "  inflating: train/67386/67386.json  \n",
            "   creating: train/67414/\n",
            "  inflating: train/67414/67414.csv   \n",
            "  inflating: train/67414/67414.jpg   \n",
            "  inflating: train/67414/67414.json  \n",
            "   creating: train/67420/\n",
            "  inflating: train/67420/67420.csv   \n",
            "  inflating: train/67420/67420.jpg   \n",
            "  inflating: train/67420/67420.json  \n",
            "   creating: train/67421/\n",
            "  inflating: train/67421/67421.csv   \n",
            "  inflating: train/67421/67421.jpg   \n",
            "  inflating: train/67421/67421.json  \n",
            "   creating: train/67423/\n",
            "  inflating: train/67423/67423.csv   \n",
            "  inflating: train/67423/67423.jpg   \n",
            "  inflating: train/67423/67423.json  \n",
            "   creating: train/67430/\n",
            "  inflating: train/67430/67430.csv   \n",
            "  inflating: train/67430/67430.jpg   \n",
            "  inflating: train/67430/67430.json  \n",
            "   creating: train/67465/\n",
            "  inflating: train/67465/67465.csv   \n",
            "  inflating: train/67465/67465.jpg   \n",
            "  inflating: train/67465/67465.json  \n",
            "   creating: train/67469/\n",
            "  inflating: train/67469/67469.csv   \n",
            "  inflating: train/67469/67469.jpg   \n",
            "  inflating: train/67469/67469.json  \n",
            "   creating: train/67492/\n",
            "  inflating: train/67492/67492.csv   \n",
            "  inflating: train/67492/67492.jpg   \n",
            "  inflating: train/67492/67492.json  \n",
            "   creating: train/67496/\n",
            "  inflating: train/67496/67496.csv   \n",
            "  inflating: train/67496/67496.jpg   \n",
            "  inflating: train/67496/67496.json  \n",
            "   creating: train/67499/\n",
            "  inflating: train/67499/67499.csv   \n",
            "  inflating: train/67499/67499.jpg   \n",
            "  inflating: train/67499/67499.json  \n",
            "   creating: train/67524/\n",
            "  inflating: train/67524/67524.csv   \n",
            "  inflating: train/67524/67524.jpg   \n",
            "  inflating: train/67524/67524.json  \n",
            "   creating: train/67528/\n",
            "  inflating: train/67528/67528.csv   \n",
            "  inflating: train/67528/67528.jpg   \n",
            "  inflating: train/67528/67528.json  \n",
            "   creating: train/67534/\n",
            "  inflating: train/67534/67534.csv   \n",
            "  inflating: train/67534/67534.jpg   \n",
            "  inflating: train/67534/67534.json  \n",
            "   creating: train/67539/\n",
            "  inflating: train/67539/67539.csv   \n",
            "  inflating: train/67539/67539.jpg   \n",
            "  inflating: train/67539/67539.json  \n",
            "   creating: train/67541/\n",
            "  inflating: train/67541/67541.csv   \n",
            "  inflating: train/67541/67541.jpg   \n",
            "  inflating: train/67541/67541.json  \n",
            "   creating: train/67546/\n",
            "  inflating: train/67546/67546.csv   \n",
            "  inflating: train/67546/67546.jpg   \n",
            "  inflating: train/67546/67546.json  \n",
            "   creating: train/67548/\n",
            "  inflating: train/67548/67548.csv   \n",
            "  inflating: train/67548/67548.jpg   \n",
            "  inflating: train/67548/67548.json  \n",
            "   creating: train/67551/\n",
            "  inflating: train/67551/67551.csv   \n",
            "  inflating: train/67551/67551.jpg   \n",
            "  inflating: train/67551/67551.json  \n",
            "   creating: train/67553/\n",
            "  inflating: train/67553/67553.csv   \n",
            "  inflating: train/67553/67553.jpg   \n",
            "  inflating: train/67553/67553.json  \n",
            "   creating: train/67558/\n",
            "  inflating: train/67558/67558.csv   \n",
            "  inflating: train/67558/67558.jpg   \n",
            "  inflating: train/67558/67558.json  \n",
            "   creating: train/67564/\n",
            "  inflating: train/67564/67564.csv   \n",
            "  inflating: train/67564/67564.jpg   \n",
            "  inflating: train/67564/67564.json  \n",
            "   creating: train/67574/\n",
            "  inflating: train/67574/67574.csv   \n",
            "  inflating: train/67574/67574.jpg   \n",
            "  inflating: train/67574/67574.json  \n",
            "   creating: train/67580/\n",
            "  inflating: train/67580/67580.csv   \n",
            "  inflating: train/67580/67580.jpg   \n",
            "  inflating: train/67580/67580.json  \n",
            "   creating: train/67588/\n",
            "  inflating: train/67588/67588.csv   \n",
            "  inflating: train/67588/67588.jpg   \n",
            "  inflating: train/67588/67588.json  \n",
            "   creating: train/67590/\n",
            "  inflating: train/67590/67590.csv   \n",
            "  inflating: train/67590/67590.jpg   \n",
            "  inflating: train/67590/67590.json  \n",
            "   creating: train/67592/\n",
            "  inflating: train/67592/67592.csv   \n",
            "  inflating: train/67592/67592.jpg   \n",
            "  inflating: train/67592/67592.json  \n",
            "   creating: train/67595/\n",
            "  inflating: train/67595/67595.csv   \n",
            "  inflating: train/67595/67595.jpg   \n",
            "  inflating: train/67595/67595.json  \n",
            "   creating: train/67633/\n",
            "  inflating: train/67633/67633.csv   \n",
            "  inflating: train/67633/67633.jpg   \n",
            "  inflating: train/67633/67633.json  \n",
            "   creating: train/67636/\n",
            "  inflating: train/67636/67636.csv   \n",
            "  inflating: train/67636/67636.jpg   \n",
            "  inflating: train/67636/67636.json  \n",
            "   creating: train/67640/\n",
            "  inflating: train/67640/67640.csv   \n",
            "  inflating: train/67640/67640.jpg   \n",
            "  inflating: train/67640/67640.json  \n",
            "   creating: train/67644/\n",
            "  inflating: train/67644/67644.csv   \n",
            "  inflating: train/67644/67644.jpg   \n",
            "  inflating: train/67644/67644.json  \n",
            "   creating: train/67647/\n",
            "  inflating: train/67647/67647.csv   \n",
            "  inflating: train/67647/67647.jpg   \n",
            "  inflating: train/67647/67647.json  \n",
            "   creating: train/67649/\n",
            "  inflating: train/67649/67649.csv   \n",
            "  inflating: train/67649/67649.jpg   \n",
            "  inflating: train/67649/67649.json  \n",
            "   creating: train/67678/\n",
            "  inflating: train/67678/67678.csv   \n",
            "  inflating: train/67678/67678.jpg   \n",
            "  inflating: train/67678/67678.json  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cThAwfKDjfOA"
      },
      "source": [
        "# 데이터 살펴보기"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "metadata": {
        "id": "gt4Z1VxQjfOA"
      },
      "outputs": [],
      "source": [
        "sample = glob('/content/train/*')[42]\n",
        "\n",
        "sample_csv = pd.read_csv(glob(sample+'/*.csv')[0])\n",
        "sample_image = cv2.imread(glob(sample+'/*.jpg')[0])\n",
        "sample_json = json.load(open(glob(sample+'/*.json')[0], 'r'))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "metadata": {
        "id": "ExJrNTUwjfOB",
        "outputId": "a1f5caed-b999-47ca-bbe0-4431f891d3e7",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 919
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-f4a5726c-6afe-4455-8162-7524ff749684\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>측정시각</th>\n",
              "      <th>내부 온도 1 평균</th>\n",
              "      <th>내부 온도 1 최고</th>\n",
              "      <th>내부 온도 1 최저</th>\n",
              "      <th>내부 온도 2 평균</th>\n",
              "      <th>내부 온도 2 최고</th>\n",
              "      <th>내부 온도 2 최저</th>\n",
              "      <th>내부 온도 3 평균</th>\n",
              "      <th>내부 온도 3 최고</th>\n",
              "      <th>내부 온도 3 최저</th>\n",
              "      <th>내부 온도 4 평균</th>\n",
              "      <th>내부 온도 4 최고</th>\n",
              "      <th>내부 온도 4 최저</th>\n",
              "      <th>내부 습도 1 평균</th>\n",
              "      <th>내부 습도 1 최고</th>\n",
              "      <th>내부 습도 1 최저</th>\n",
              "      <th>내부 습도 2 평균</th>\n",
              "      <th>내부 습도 2 최고</th>\n",
              "      <th>내부 습도 2 최저</th>\n",
              "      <th>내부 습도 3 평균</th>\n",
              "      <th>내부 습도 3 최고</th>\n",
              "      <th>내부 습도 3 최저</th>\n",
              "      <th>내부 습도 4 평균</th>\n",
              "      <th>내부 습도 4 최고</th>\n",
              "      <th>내부 습도 4 최저</th>\n",
              "      <th>내부 이슬점 평균</th>\n",
              "      <th>내부 이슬점 최고</th>\n",
              "      <th>내부 이슬점 최저</th>\n",
              "      <th>내부 CO2 평균</th>\n",
              "      <th>내부 CO2 최고</th>\n",
              "      <th>내부 CO2 최저</th>\n",
              "      <th>외부 풍속 평균</th>\n",
              "      <th>외부 풍속 최고</th>\n",
              "      <th>외부 풍속 최저</th>\n",
              "      <th>내부 EC 1 평균</th>\n",
              "      <th>내부 EC 1 최고</th>\n",
              "      <th>내부 EC 1 최저</th>\n",
              "      <th>내부 PH 1 평균</th>\n",
              "      <th>내부 PH 1 최고</th>\n",
              "      <th>내부 PH 1 최저</th>\n",
              "      <th>배지 중량 평균</th>\n",
              "      <th>배지 중량 최고</th>\n",
              "      <th>배지 중량 최저</th>\n",
              "      <th>양액 온도 평균</th>\n",
              "      <th>양액 온도 최고</th>\n",
              "      <th>양액 온도 최저</th>\n",
              "      <th>외부 풍향 수치</th>\n",
              "      <th>외부 풍향</th>\n",
              "      <th>외부 빗물 시간</th>\n",
              "      <th>외부 누적일사 평균</th>\n",
              "      <th>양액 급액 누적</th>\n",
              "      <th>양액 배액 누적</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2021-06-17 10:00:00</td>\n",
              "      <td>22.8</td>\n",
              "      <td>22.8</td>\n",
              "      <td>22.7</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>78.6</td>\n",
              "      <td>80.0</td>\n",
              "      <td>77.8</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>19.1</td>\n",
              "      <td>19.4</td>\n",
              "      <td>19.0</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2021-06-17 10:00:00</td>\n",
              "      <td>23.0</td>\n",
              "      <td>23.0</td>\n",
              "      <td>22.9</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>78.2</td>\n",
              "      <td>79.2</td>\n",
              "      <td>77.0</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>19.0</td>\n",
              "      <td>19.2</td>\n",
              "      <td>18.8</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>148.8</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2021-06-17 09:50:00</td>\n",
              "      <td>22.7</td>\n",
              "      <td>22.8</td>\n",
              "      <td>22.6</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>79.0</td>\n",
              "      <td>82.0</td>\n",
              "      <td>77.2</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>19.2</td>\n",
              "      <td>19.8</td>\n",
              "      <td>18.8</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2021-06-17 09:50:00</td>\n",
              "      <td>23.0</td>\n",
              "      <td>23.1</td>\n",
              "      <td>22.9</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>77.5</td>\n",
              "      <td>80.1</td>\n",
              "      <td>75.7</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>18.9</td>\n",
              "      <td>19.4</td>\n",
              "      <td>18.6</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>181.4</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2021-06-17 09:40:00</td>\n",
              "      <td>22.1</td>\n",
              "      <td>22.5</td>\n",
              "      <td>21.5</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>83.5</td>\n",
              "      <td>85.6</td>\n",
              "      <td>81.9</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>19.3</td>\n",
              "      <td>20.0</td>\n",
              "      <td>18.8</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>583</th>\n",
              "      <td>2021-06-15 09:30:00</td>\n",
              "      <td>25.3</td>\n",
              "      <td>25.5</td>\n",
              "      <td>24.9</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>82.7</td>\n",
              "      <td>84.7</td>\n",
              "      <td>80.6</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>22.0</td>\n",
              "      <td>22.5</td>\n",
              "      <td>21.7</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>284.4</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>584</th>\n",
              "      <td>2021-06-15 09:20:00</td>\n",
              "      <td>24.7</td>\n",
              "      <td>24.8</td>\n",
              "      <td>24.7</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>82.7</td>\n",
              "      <td>85.0</td>\n",
              "      <td>81.2</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>21.8</td>\n",
              "      <td>22.3</td>\n",
              "      <td>21.5</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>585</th>\n",
              "      <td>2021-06-15 09:20:00</td>\n",
              "      <td>24.7</td>\n",
              "      <td>24.9</td>\n",
              "      <td>24.5</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>82.7</td>\n",
              "      <td>84.7</td>\n",
              "      <td>81.4</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>21.9</td>\n",
              "      <td>22.3</td>\n",
              "      <td>21.5</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>186.3</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>586</th>\n",
              "      <td>2021-06-15 09:10:00</td>\n",
              "      <td>25.0</td>\n",
              "      <td>25.1</td>\n",
              "      <td>24.9</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>81.4</td>\n",
              "      <td>82.0</td>\n",
              "      <td>81.0</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>21.6</td>\n",
              "      <td>21.7</td>\n",
              "      <td>21.5</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>587</th>\n",
              "      <td>2021-06-15 09:10:00</td>\n",
              "      <td>25.0</td>\n",
              "      <td>25.1</td>\n",
              "      <td>24.8</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>81.1</td>\n",
              "      <td>81.5</td>\n",
              "      <td>80.7</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>21.5</td>\n",
              "      <td>21.5</td>\n",
              "      <td>21.5</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>133.5</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>588 rows × 52 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f4a5726c-6afe-4455-8162-7524ff749684')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-f4a5726c-6afe-4455-8162-7524ff749684 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-f4a5726c-6afe-4455-8162-7524ff749684');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "                    측정시각  내부 온도 1 평균  내부 온도 1 최고  ...  외부 누적일사 평균 양액 급액 누적 양액 배액 누적\n",
              "0    2021-06-17 10:00:00        22.8        22.8  ...           -        -        -\n",
              "1    2021-06-17 10:00:00        23.0        23.0  ...       148.8        -        -\n",
              "2    2021-06-17 09:50:00        22.7        22.8  ...           -        -        -\n",
              "3    2021-06-17 09:50:00        23.0        23.1  ...       181.4        -        -\n",
              "4    2021-06-17 09:40:00        22.1        22.5  ...           -        -        -\n",
              "..                   ...         ...         ...  ...         ...      ...      ...\n",
              "583  2021-06-15 09:30:00        25.3        25.5  ...       284.4        -        -\n",
              "584  2021-06-15 09:20:00        24.7        24.8  ...           -        -        -\n",
              "585  2021-06-15 09:20:00        24.7        24.9  ...       186.3        -        -\n",
              "586  2021-06-15 09:10:00        25.0        25.1  ...           -        -        -\n",
              "587  2021-06-15 09:10:00        25.0        25.1  ...       133.5        -        -\n",
              "\n",
              "[588 rows x 52 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ],
      "source": [
        "# csv\n",
        "sample_csv"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 15,
      "metadata": {
        "id": "bIC1LniGjfOC",
        "outputId": "6a9a071a-d0b1-4d3c-9149-acfad3d1d64b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 269
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "# image\n",
        "plt.imshow(cv2.cvtColor(sample_image, cv2.COLOR_BGR2RGB))\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 16,
      "metadata": {
        "id": "zxBn6FJ6jfOC",
        "outputId": "0d155797-c521-49d8-9456-ccea9f48cb46",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'annotations': {'area': 3,\n",
              "  'bbox': [{'h': 428.9523861014994,\n",
              "    'w': 531.8095444059977,\n",
              "    'x': 150.85714028258363,\n",
              "    'y': 83.0476229094579}],\n",
              "  'crop': 6,\n",
              "  'disease': '00',\n",
              "  'grow': 24,\n",
              "  'part': [],\n",
              "  'risk': 0},\n",
              " 'description': {'date': '20210617',\n",
              "  'height': 512,\n",
              "  'image': '54040.jpg',\n",
              "  'region': 0,\n",
              "  'task': 0,\n",
              "  'time': '1004',\n",
              "  'width': 682}}"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ],
      "source": [
        "# json\n",
        "sample_json"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 17,
      "metadata": {
        "id": "Hj6_aj4SjfOD",
        "outputId": "c977acac-44d2-43ef-ad6f-4588d54c3f79",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 345
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 504x504 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "# visualize bbox\n",
        "plt.figure(figsize=(7,7))\n",
        "points = sample_json['annotations']['bbox'][0]\n",
        "part_points = sample_json['annotations']['part']\n",
        "img = cv2.cvtColor(sample_image, cv2.COLOR_BGR2RGB)\n",
        "\n",
        "cv2.rectangle(\n",
        "    img,\n",
        "    (int(points['x']), int(points['y'])),\n",
        "    (int((points['x']+points['w'])), int((points['y']+points['h']))),\n",
        "    (0, 255, 0),\n",
        "    2\n",
        ")\n",
        "for part_point in part_points:\n",
        "    point = part_point\n",
        "    cv2.rectangle(\n",
        "        img,\n",
        "        (int(point['x']), int(point['y'])),\n",
        "        (int((point['x']+point['w'])), int((point['y']+point['h']))),\n",
        "        (255, 0, 0),\n",
        "        1\n",
        "    )\n",
        "plt.imshow(img)\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bfCjMHmBjfOE"
      },
      "source": [
        "# 데이터 로드\n",
        "\n",
        "## 환경 데이터 통계량 계산 for MinMax Scaling"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 19,
      "metadata": {
        "id": "ih9LgSzDjfOE",
        "outputId": "5b23f332-77f7-443c-f634-961083ceac13",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 5766/5766 [00:47<00:00, 121.99it/s]\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'내부 습도 1 최고': [25.9, 100.0],\n",
              " '내부 습도 1 최저': [0.0, 100.0],\n",
              " '내부 습도 1 평균': [23.7, 100.0],\n",
              " '내부 온도 1 최고': [3.4, 47.6],\n",
              " '내부 온도 1 최저': [3.3, 47.0],\n",
              " '내부 온도 1 평균': [3.4, 47.3],\n",
              " '내부 이슬점 최고': [0.2, 34.7],\n",
              " '내부 이슬점 최저': [0.0, 34.4],\n",
              " '내부 이슬점 평균': [0.1, 34.5]}"
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ],
      "source": [
        "# 분석에 사용할 feature 선택\n",
        "csv_features = ['내부 온도 1 평균', '내부 온도 1 최고', '내부 온도 1 최저', '내부 습도 1 평균', '내부 습도 1 최고', \n",
        "                '내부 습도 1 최저', '내부 이슬점 평균', '내부 이슬점 최고', '내부 이슬점 최저']\n",
        "\n",
        "csv_files = sorted(glob('/content/train/*/*.csv'))\n",
        "\n",
        "temp_csv = pd.read_csv(csv_files[0])[csv_features]\n",
        "max_arr, min_arr = temp_csv.max().to_numpy(), temp_csv.min().to_numpy()\n",
        "\n",
        "# feature 별 최대값, 최솟값 계산\n",
        "for csv in tqdm(csv_files[1:]):\n",
        "    temp_csv = pd.read_csv(csv)[csv_features]\n",
        "    temp_csv = temp_csv.replace('-',np.nan).dropna()\n",
        "    if len(temp_csv) == 0:\n",
        "        continue\n",
        "    temp_csv = temp_csv.astype(float)\n",
        "    temp_max, temp_min = temp_csv.max().to_numpy(), temp_csv.min().to_numpy()\n",
        "    max_arr = np.max([max_arr,temp_max], axis=0)\n",
        "    min_arr = np.min([min_arr,temp_min], axis=0)\n",
        "\n",
        "# feature 별 최대값, 최솟값 dictionary 생성\n",
        "csv_feature_dict = {csv_features[i]:[min_arr[i], max_arr[i]] for i in range(len(csv_features))}\n",
        "csv_feature_dict"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Y6nnDIyrjfOF"
      },
      "source": [
        "## CustomDataset 제작"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 20,
      "metadata": {
        "id": "6-uKrof0jfOF"
      },
      "outputs": [],
      "source": [
        "# 변수 설명 csv 파일 참조\n",
        "crop = {'1':'딸기','2':'토마토','3':'파프리카','4':'오이','5':'고추','6':'시설포도'}\n",
        "disease = {'1':{'a1':'딸기잿빛곰팡이병','a2':'딸기흰가루병','b1':'냉해피해','b6':'다량원소결핍 (N)','b7':'다량원소결핍 (P)','b8':'다량원소결핍 (K)'},\n",
        "           '2':{'a5':'토마토흰가루병','a6':'토마토잿빛곰팡이병','b2':'열과','b3':'칼슘결핍','b6':'다량원소결핍 (N)','b7':'다량원소결핍 (P)','b8':'다량원소결핍 (K)'},\n",
        "           '3':{'a9':'파프리카흰가루병','a10':'파프리카잘록병','b3':'칼슘결핍','b6':'다량원소결핍 (N)','b7':'다량원소결핍 (P)','b8':'다량원소결핍 (K)'},\n",
        "           '4':{'a3':'오이노균병','a4':'오이흰가루병','b1':'냉해피해','b6':'다량원소결핍 (N)','b7':'다량원소결핍 (P)','b8':'다량원소결핍 (K)'},\n",
        "           '5':{'a7':'고추탄저병','a8':'고추흰가루병','b3':'칼슘결핍','b6':'다량원소결핍 (N)','b7':'다량원소결핍 (P)','b8':'다량원소결핍 (K)'},\n",
        "           '6':{'a11':'시설포도탄저병','a12':'시설포도노균병','b4':'일소피해','b5':'축과병'}}\n",
        "risk = {'1':'초기','2':'중기','3':'말기'}"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 21,
      "metadata": {
        "id": "5C1EcB9hjfOG",
        "outputId": "d95314ff-af46-40c9-b600-6d343ad1c4b5",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[('1_00_0', '딸기_정상'),\n",
              " ('1_a1_1', '딸기_딸기잿빛곰팡이병_초기'),\n",
              " ('1_a1_2', '딸기_딸기잿빛곰팡이병_중기'),\n",
              " ('1_a1_3', '딸기_딸기잿빛곰팡이병_말기'),\n",
              " ('1_a2_1', '딸기_딸기흰가루병_초기'),\n",
              " ('1_a2_2', '딸기_딸기흰가루병_중기'),\n",
              " ('1_a2_3', '딸기_딸기흰가루병_말기'),\n",
              " ('1_b1_1', '딸기_냉해피해_초기'),\n",
              " ('1_b1_2', '딸기_냉해피해_중기'),\n",
              " ('1_b1_3', '딸기_냉해피해_말기')]"
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ],
      "source": [
        "label_description = {}\n",
        "for key, value in disease.items():\n",
        "    label_description[f'{key}_00_0'] = f'{crop[key]}_정상'\n",
        "    for disease_code in value:\n",
        "        for risk_code in risk:\n",
        "            label = f'{key}_{disease_code}_{risk_code}'\n",
        "            label_description[label] = f'{crop[key]}_{disease[key][disease_code]}_{risk[risk_code]}'\n",
        "list(label_description.items())[:10]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 22,
      "metadata": {
        "id": "dKcSBIcjjfOG"
      },
      "outputs": [],
      "source": [
        "label_encoder = {key:idx for idx, key in enumerate(label_description)}\n",
        "label_decoder = {val:key for key, val in label_encoder.items()}"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 23,
      "metadata": {
        "id": "8bDr_L9ojfOH"
      },
      "outputs": [],
      "source": [
        "class CustomDataset(Dataset):\n",
        "    def __init__(self, files, labels=None, mode='train'):\n",
        "        self.mode = mode\n",
        "        self.files = files\n",
        "        self.csv_feature_dict = csv_feature_dict\n",
        "        self.csv_feature_check = [0]*len(self.files)\n",
        "        self.csv_features = [None]*len(self.files)\n",
        "        self.max_len = 24 * 6\n",
        "        self.label_encoder = label_encoder\n",
        "\n",
        "    def __len__(self):\n",
        "        return len(self.files)\n",
        "    \n",
        "    def __getitem__(self, i):\n",
        "        file = self.files[i]\n",
        "        file_name = file.split('/')[-1]\n",
        "        \n",
        "        # csv\n",
        "        if self.csv_feature_check[i] == 0:\n",
        "            csv_path = f'{file}/{file_name}.csv'\n",
        "            df = pd.read_csv(csv_path)[self.csv_feature_dict.keys()]\n",
        "            df = df.replace('-', 0)\n",
        "            # MinMax scaling\n",
        "            for col in df.columns:\n",
        "                df[col] = df[col].astype(float) - self.csv_feature_dict[col][0]\n",
        "                df[col] = df[col] / (self.csv_feature_dict[col][1]-self.csv_feature_dict[col][0])\n",
        "            # zero padding\n",
        "            pad = np.zeros((self.max_len, len(df.columns)))\n",
        "            length = min(self.max_len, len(df))\n",
        "            pad[-length:] = df.to_numpy()[-length:]\n",
        "            # transpose to sequential data\n",
        "            csv_feature = pad.T\n",
        "            self.csv_features[i] = csv_feature\n",
        "            self.csv_feature_check[i] = 1\n",
        "        else:\n",
        "            csv_feature = self.csv_features[i]\n",
        "        \n",
        "        # image\n",
        "        image_path = f'{file}/{file_name}.jpg'\n",
        "        img = cv2.imread(image_path)\n",
        "        img = cv2.resize(img, dsize=(256, 256), interpolation=cv2.INTER_AREA)\n",
        "        img = img.astype(np.float32)/255\n",
        "        img = np.transpose(img, (2,0,1))\n",
        "        \n",
        "        if self.mode == 'train':\n",
        "            json_path = f'{file}/{file_name}.json'\n",
        "            with open(json_path, 'r') as f:\n",
        "                json_file = json.load(f)\n",
        "            \n",
        "            crop = json_file['annotations']['crop']\n",
        "            disease = json_file['annotations']['disease']\n",
        "            risk = json_file['annotations']['risk']\n",
        "            label = f'{crop}_{disease}_{risk}'\n",
        "            \n",
        "            return {\n",
        "                'img' : torch.tensor(img, dtype=torch.float32),\n",
        "                'csv_feature' : torch.tensor(csv_feature, dtype=torch.float32),\n",
        "                'label' : torch.tensor(self.label_encoder[label], dtype=torch.long)\n",
        "            }\n",
        "        else:\n",
        "            return {\n",
        "                'img' : torch.tensor(img, dtype=torch.float32),\n",
        "                'csv_feature' : torch.tensor(csv_feature, dtype=torch.float32)\n",
        "            }"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uo6F4bUAjfOI"
      },
      "source": [
        "# 하이퍼파라미터 및 변수"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 24,
      "metadata": {
        "id": "dSNRchQojfOJ"
      },
      "outputs": [],
      "source": [
        "device = torch.device(\"cuda:0\")\n",
        "batch_size = 32\n",
        "class_n = len(label_encoder)\n",
        "learning_rate = 1e-4\n",
        "embedding_dim = 512\n",
        "num_features = len(csv_feature_dict)\n",
        "max_len = 24*6\n",
        "dropout_rate = 0.1\n",
        "epochs = 10\n",
        "vision_pretrain = True\n",
        "save_path = 'best_model.pt'"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fpgTwkHfjfOK"
      },
      "source": [
        "# 데이터셋 구성"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 25,
      "metadata": {
        "id": "wCHCa3u6jfOL"
      },
      "outputs": [],
      "source": [
        "train = sorted(glob('/content/train/*'))\n",
        "# test = sorted(glob('data/test/*'))\n",
        "\n",
        "labelsss = pd.read_csv('/content/drive/MyDrive/LG/train.csv')['label']\n",
        "train, val = train_test_split(train, test_size=0.2, stratify=labelsss)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 26,
      "metadata": {
        "id": "WenTlIxyjfOM",
        "outputId": "4a145ffb-2874-4c51-e8d9-92f6ad19663c",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py:481: UserWarning: This DataLoader will create 16 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n",
            "  cpuset_checked))\n"
          ]
        }
      ],
      "source": [
        "train_dataset = CustomDataset(train)\n",
        "val_dataset = CustomDataset(val)\n",
        "# test_dataset = CustomDataset(test, mode = 'test')\n",
        "\n",
        "train_dataloader = torch.utils.data.DataLoader(train_dataset, batch_size=batch_size, num_workers=2, shuffle=True)\n",
        "val_dataloader = torch.utils.data.DataLoader(val_dataset, batch_size=batch_size, num_workers=2, shuffle=False)\n",
        "# test_dataloader = torch.utils.data.DataLoader(test_dataset, batch_size=batch_size, num_workers=2, shuffle=False)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2e31s874jfOM"
      },
      "source": [
        "# 모델\n",
        "\n",
        "## 이미지 분류 모델 : Resnet50"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 27,
      "metadata": {
        "id": "fPV4fHeyjfOM"
      },
      "outputs": [],
      "source": [
        "class CNN_Encoder(nn.Module):\n",
        "    def __init__(self, class_n, rate=0.1):\n",
        "        super(CNN_Encoder, self).__init__()\n",
        "        self.model = models.resnet50(pretrained=True)\n",
        "    \n",
        "    def forward(self, inputs):\n",
        "        output = self.model(inputs)\n",
        "        return output"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ea3gIbnSjfON"
      },
      "source": [
        "## 시계열 모델 : LSTM"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 28,
      "metadata": {
        "id": "faVKptbejfON"
      },
      "outputs": [],
      "source": [
        "class RNN_Decoder(nn.Module):\n",
        "    def __init__(self, max_len, embedding_dim, num_features, class_n, rate):\n",
        "        super(RNN_Decoder, self).__init__()\n",
        "        self.lstm = nn.LSTM(max_len, embedding_dim)\n",
        "        self.rnn_fc = nn.Linear(num_features*embedding_dim, 1000)\n",
        "        self.final_layer = nn.Linear(1000 + 1000, class_n) # resnet out_dim + lstm out_dim\n",
        "        self.dropout = nn.Dropout(rate)\n",
        "\n",
        "    def forward(self, enc_out, dec_inp):\n",
        "        hidden, _ = self.lstm(dec_inp)\n",
        "        hidden = hidden.view(hidden.size(0), -1)\n",
        "        hidden = self.rnn_fc(hidden)\n",
        "        concat = torch.cat([enc_out, hidden], dim=1) # enc_out + hidden \n",
        "        fc_input = concat\n",
        "        output = self.dropout((self.final_layer(fc_input)))\n",
        "        return output"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "N9a9hragjfOO"
      },
      "source": [
        "## 앙상블"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 29,
      "metadata": {
        "id": "qkhV-J_RjfOO"
      },
      "outputs": [],
      "source": [
        "class CNN2RNN(nn.Module):\n",
        "    def __init__(self, max_len, embedding_dim, num_features, class_n, rate):\n",
        "        super(CNN2RNN, self).__init__()\n",
        "        self.cnn = CNN_Encoder(embedding_dim, rate)\n",
        "        self.rnn = RNN_Decoder(max_len, embedding_dim, num_features, class_n, rate)\n",
        "        \n",
        "    def forward(self, img, seq):\n",
        "        cnn_output = self.cnn(img)\n",
        "        output = self.rnn(cnn_output, seq)\n",
        "        \n",
        "        return output"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 30,
      "metadata": {
        "id": "gIHKKyZ-jfOP",
        "outputId": "015b302a-ea63-45c0-a8b5-c06007b6d8ba",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 67,
          "referenced_widgets": [
            "39402eeb04b04d9d88d768394ff73b6f",
            "d6bb2eb8b02945d48af342145b40e4fc",
            "8502b42e16284d0a9ba5b5b75e8c437e",
            "db306ca77caf48ec994775b698d8d3fd",
            "3a92d44d30d645af853000d73d2b2c19",
            "d2dbea2385af4331b9c9ff2a91b17a15",
            "552de2377e4f4481862ea88877fde4be",
            "87e0e639eb78442b989a06d90a761961",
            "0c60a8a47ac24ff2985ab96af5fd5c95",
            "c3dea4e42e534f4cb158f921b7315a1b",
            "a5633d83259d4de3b07e7191c99c4252"
          ]
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Downloading: \"https://download.pytorch.org/models/resnet50-0676ba61.pth\" to /root/.cache/torch/hub/checkpoints/resnet50-0676ba61.pth\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "39402eeb04b04d9d88d768394ff73b6f",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "  0%|          | 0.00/97.8M [00:00<?, ?B/s]"
            ]
          },
          "metadata": {}
        }
      ],
      "source": [
        "model = CNN2RNN(max_len=max_len, embedding_dim=embedding_dim, num_features=num_features, class_n=class_n, rate=dropout_rate)\n",
        "model = model.to(device)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wlIxskMyjfOP"
      },
      "source": [
        "# 학습"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 31,
      "metadata": {
        "id": "ru7FubrKjfOP"
      },
      "outputs": [],
      "source": [
        "optimizer = torch.optim.Adam(model.parameters(), lr=learning_rate)\n",
        "criterion = nn.CrossEntropyLoss()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 32,
      "metadata": {
        "id": "8GFCkAYSjfOP"
      },
      "outputs": [],
      "source": [
        "def accuracy_function(real, pred):    \n",
        "    real = real.cpu()\n",
        "    pred = torch.argmax(pred, dim=1).cpu()\n",
        "    score = f1_score(real, pred, average='macro')\n",
        "    return score\n",
        "\n",
        "def train_step(batch_item, training):\n",
        "    img = batch_item['img'].to(device)\n",
        "    csv_feature = batch_item['csv_feature'].to(device)\n",
        "    label = batch_item['label'].to(device)\n",
        "    if training is True:\n",
        "        model.train()\n",
        "        optimizer.zero_grad()\n",
        "        with torch.cuda.amp.autocast():\n",
        "            output = model(img, csv_feature)\n",
        "            loss = criterion(output, label)\n",
        "        loss.backward()\n",
        "        optimizer.step()\n",
        "        score = accuracy_function(label, output)\n",
        "        return loss, score\n",
        "    else:\n",
        "        model.eval()\n",
        "        with torch.no_grad():\n",
        "            output = model(img, csv_feature)\n",
        "            loss = criterion(output, label)\n",
        "        score = accuracy_function(label, output)\n",
        "        return loss, score"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 33,
      "metadata": {
        "id": "LiOu7Pe-jfOQ",
        "outputId": "20599700-001a-46a2-eff3-22be39fe6da3",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py:481: UserWarning: This DataLoader will create 16 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n",
            "  cpuset_checked))\n",
            "145it [01:22,  1.76it/s, Epoch=1, Loss=0.773873, Mean Loss=0.949095, Mean F-1=0.553989]\n",
            "/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py:481: UserWarning: This DataLoader will create 16 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n",
            "  cpuset_checked))\n",
            "37it [00:19,  1.89it/s, Epoch=1, Val Loss=0.002796, Mean Val Loss=0.177981, Mean Val F-1=0.825658]\n",
            "/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py:481: UserWarning: This DataLoader will create 16 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n",
            "  cpuset_checked))\n",
            "145it [01:24,  1.72it/s, Epoch=2, Loss=1.797281, Mean Loss=0.421994, Mean F-1=0.720641]\n",
            "/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py:481: UserWarning: This DataLoader will create 16 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n",
            "  cpuset_checked))\n",
            "37it [00:19,  1.87it/s, Epoch=2, Val Loss=0.000125, Mean Val Loss=0.183172, Mean Val F-1=0.849605]\n",
            "/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py:481: UserWarning: This DataLoader will create 16 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n",
            "  cpuset_checked))\n",
            "145it [01:24,  1.71it/s, Epoch=3, Loss=1.129247, Mean Loss=0.384334, Mean F-1=0.740734]\n",
            "/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py:481: UserWarning: This DataLoader will create 16 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n",
            "  cpuset_checked))\n",
            "37it [00:19,  1.92it/s, Epoch=3, Val Loss=0.000070, Mean Val Loss=0.211574, Mean Val F-1=0.813450]\n",
            "/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py:481: UserWarning: This DataLoader will create 16 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n",
            "  cpuset_checked))\n",
            "145it [01:23,  1.75it/s, Epoch=4, Loss=0.552247, Mean Loss=0.302021, Mean F-1=0.774616]\n",
            "/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py:481: UserWarning: This DataLoader will create 16 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n",
            "  cpuset_checked))\n",
            "37it [00:19,  1.92it/s, Epoch=4, Val Loss=0.000110, Mean Val Loss=0.168608, Mean Val F-1=0.861593]\n",
            "/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py:481: UserWarning: This DataLoader will create 16 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n",
            "  cpuset_checked))\n",
            "145it [01:23,  1.74it/s, Epoch=5, Loss=0.491396, Mean Loss=0.317304, Mean F-1=0.771509]\n",
            "/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py:481: UserWarning: This DataLoader will create 16 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n",
            "  cpuset_checked))\n",
            "37it [00:19,  1.91it/s, Epoch=5, Val Loss=0.000495, Mean Val Loss=0.178841, Mean Val F-1=0.861129]\n",
            "/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py:481: UserWarning: This DataLoader will create 16 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n",
            "  cpuset_checked))\n",
            "145it [01:23,  1.75it/s, Epoch=6, Loss=0.408458, Mean Loss=0.287137, Mean F-1=0.766879]\n",
            "/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py:481: UserWarning: This DataLoader will create 16 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n",
            "  cpuset_checked))\n",
            "37it [00:18,  1.95it/s, Epoch=6, Val Loss=0.000066, Mean Val Loss=0.176934, Mean Val F-1=0.874006]\n",
            "/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py:481: UserWarning: This DataLoader will create 16 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n",
            "  cpuset_checked))\n",
            "145it [01:22,  1.75it/s, Epoch=7, Loss=0.562429, Mean Loss=0.290869, Mean F-1=0.781583]\n",
            "/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py:481: UserWarning: This DataLoader will create 16 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n",
            "  cpuset_checked))\n",
            "37it [00:19,  1.93it/s, Epoch=7, Val Loss=0.000001, Mean Val Loss=0.178189, Mean Val F-1=0.868503]\n",
            "/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py:481: UserWarning: This DataLoader will create 16 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n",
            "  cpuset_checked))\n",
            "145it [01:23,  1.74it/s, Epoch=8, Loss=0.608981, Mean Loss=0.290799, Mean F-1=0.770743]\n",
            "/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py:481: UserWarning: This DataLoader will create 16 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n",
            "  cpuset_checked))\n",
            "37it [00:19,  1.92it/s, Epoch=8, Val Loss=0.000008, Mean Val Loss=0.163199, Mean Val F-1=0.885414]\n",
            "/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py:481: UserWarning: This DataLoader will create 16 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n",
            "  cpuset_checked))\n",
            "145it [01:24,  1.72it/s, Epoch=9, Loss=1.671840, Mean Loss=0.299926, Mean F-1=0.754317]\n",
            "/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py:481: UserWarning: This DataLoader will create 16 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n",
            "  cpuset_checked))\n",
            "37it [00:19,  1.89it/s, Epoch=9, Val Loss=0.000018, Mean Val Loss=0.382803, Mean Val F-1=0.825590]\n",
            "/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py:481: UserWarning: This DataLoader will create 16 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n",
            "  cpuset_checked))\n",
            "145it [01:23,  1.73it/s, Epoch=10, Loss=2.188004, Mean Loss=0.355047, Mean F-1=0.763443]\n",
            "/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py:481: UserWarning: This DataLoader will create 16 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n",
            "  cpuset_checked))\n",
            "37it [00:19,  1.91it/s, Epoch=10, Val Loss=0.000004, Mean Val Loss=0.191474, Mean Val F-1=0.867430]\n"
          ]
        }
      ],
      "source": [
        "loss_plot, val_loss_plot = [], []\n",
        "metric_plot, val_metric_plot = [], []\n",
        "\n",
        "for epoch in range(epochs):\n",
        "    total_loss, total_val_loss = 0, 0\n",
        "    total_acc, total_val_acc = 0, 0\n",
        "    \n",
        "    tqdm_dataset = tqdm(enumerate(train_dataloader))\n",
        "    training = True\n",
        "    for batch, batch_item in tqdm_dataset:\n",
        "        batch_loss, batch_acc = train_step(batch_item, training)\n",
        "        total_loss += batch_loss\n",
        "        total_acc += batch_acc\n",
        "        \n",
        "        tqdm_dataset.set_postfix({\n",
        "            'Epoch': epoch + 1,\n",
        "            'Loss': '{:06f}'.format(batch_loss.item()),\n",
        "            'Mean Loss' : '{:06f}'.format(total_loss/(batch+1)),\n",
        "            'Mean F-1' : '{:06f}'.format(total_acc/(batch+1))\n",
        "        })\n",
        "    loss_plot.append(total_loss/(batch+1))\n",
        "    metric_plot.append(total_acc/(batch+1))\n",
        "    \n",
        "    tqdm_dataset = tqdm(enumerate(val_dataloader))\n",
        "    training = False\n",
        "    for batch, batch_item in tqdm_dataset:\n",
        "        batch_loss, batch_acc = train_step(batch_item, training)\n",
        "        total_val_loss += batch_loss\n",
        "        total_val_acc += batch_acc\n",
        "        \n",
        "        tqdm_dataset.set_postfix({\n",
        "            'Epoch': epoch + 1,\n",
        "            'Val Loss': '{:06f}'.format(batch_loss.item()),\n",
        "            'Mean Val Loss' : '{:06f}'.format(total_val_loss/(batch+1)),\n",
        "            'Mean Val F-1' : '{:06f}'.format(total_val_acc/(batch+1))\n",
        "        })\n",
        "    val_loss_plot.append(total_val_loss/(batch+1))\n",
        "    val_metric_plot.append(total_val_acc/(batch+1))\n",
        "    \n",
        "    if np.max(val_metric_plot) == val_metric_plot[-1]:\n",
        "        torch.save(model.state_dict(), save_path)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "r6ePFg50jfOQ"
      },
      "source": [
        "# 학습 결과"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 34,
      "metadata": {
        "id": "FiyfQSv1jfOR",
        "outputId": "13721973-b6d6-4e4b-9372-abef5bcec258",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 467
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 720x504 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "plt.figure(figsize=(10,7))\n",
        "plt.grid()\n",
        "plt.plot(loss_plot, label='train_loss')\n",
        "plt.plot(val_loss_plot, label='val_loss')\n",
        "plt.xlabel('epoch')\n",
        "plt.ylabel('loss')\n",
        "plt.title(\"Loss\", fontsize=25)\n",
        "plt.legend()\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 35,
      "metadata": {
        "id": "62kxFgBtjfOR",
        "outputId": "21ad0439-949c-48c6-d6fe-274f74dcbdb1",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 467
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 720x504 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "plt.figure(figsize=(10,7))\n",
        "plt.grid()\n",
        "plt.plot(metric_plot, label='train_metric')\n",
        "plt.plot(val_metric_plot, label='val_metric')\n",
        "plt.xlabel('epoch')\n",
        "plt.ylabel('metric')\n",
        "plt.title(\"F-1\", fontsize=25)\n",
        "plt.legend()\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "r5T8wdhVjfOS"
      },
      "source": [
        "# 추론"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "I6IiqNmnjfOS",
        "outputId": "682a769c-bc77-442d-e10a-900cff6b2b57"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "0it [00:00, ?it/s]/tmp/ipykernel_23553/2570787494.py:10: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).\n",
            "  output = torch.tensor(torch.argmax(output, dim=1), dtype=torch.int32).cpu().numpy()\n",
            "203it [01:03,  3.18it/s]\n"
          ]
        }
      ],
      "source": [
        "# def predict(dataset):\n",
        "#     model.eval()\n",
        "#     tqdm_dataset = tqdm(enumerate(dataset))\n",
        "#     results = []\n",
        "#     for batch, batch_item in tqdm_dataset:\n",
        "#         img = batch_item['img'].to(device)\n",
        "#         seq = batch_item['csv_feature'].to(device)\n",
        "#         with torch.no_grad():\n",
        "#             output = model(img, seq)\n",
        "#         output = torch.tensor(torch.argmax(output, dim=1), dtype=torch.int32).cpu().numpy()\n",
        "#         results.extend(output)\n",
        "#     return results\n",
        "\n",
        "# model = CNN2RNN(max_len=max_len, embedding_dim=embedding_dim, num_features=num_features, class_n=class_n, rate=dropout_rate)\n",
        "# model.load_state_dict(torch.load(save_path, map_location=device))\n",
        "# model.to(device)\n",
        "\n",
        "# preds = predict(test_dataloader)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "TQJM2dXWjfOT"
      },
      "outputs": [],
      "source": [
        "# preds = np.array([label_decoder[int(val)] for val in preds])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PUkPKpcQjfOT"
      },
      "source": [
        "# 제출 파일 생성"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Wp_LW4cijfOU",
        "outputId": "893cac1b-24a5-4030-889b-2903a987e165"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>image</th>\n",
              "      <th>label</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>10000</td>\n",
              "      <td>6_00_0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>10001</td>\n",
              "      <td>5_b6_1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>10002</td>\n",
              "      <td>4_00_0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>10003</td>\n",
              "      <td>3_00_0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>10004</td>\n",
              "      <td>3_b8_1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>51901</th>\n",
              "      <td>67673</td>\n",
              "      <td>4_00_0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>51902</th>\n",
              "      <td>67674</td>\n",
              "      <td>3_b7_1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>51903</th>\n",
              "      <td>67675</td>\n",
              "      <td>6_00_0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>51904</th>\n",
              "      <td>67676</td>\n",
              "      <td>6_00_0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>51905</th>\n",
              "      <td>67677</td>\n",
              "      <td>6_00_0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>51906 rows × 2 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "       image   label\n",
              "0      10000  6_00_0\n",
              "1      10001  5_b6_1\n",
              "2      10002  4_00_0\n",
              "3      10003  3_00_0\n",
              "4      10004  3_b8_1\n",
              "...      ...     ...\n",
              "51901  67673  4_00_0\n",
              "51902  67674  3_b7_1\n",
              "51903  67675  6_00_0\n",
              "51904  67676  6_00_0\n",
              "51905  67677  6_00_0\n",
              "\n",
              "[51906 rows x 2 columns]"
            ]
          },
          "execution_count": 27,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# submission = pd.read_csv('data/sample_submission.csv')\n",
        "# submission['label'] = preds\n",
        "# submission"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "FjdgSd4MjfOU"
      },
      "outputs": [],
      "source": [
        "# submission.to_csv('baseline_submission.csv', index=False)"
      ]
    }
  ],
  "metadata": {
    "interpreter": {
      "hash": "8207dccf39e710c758db0a3115e8b6364f9af698460a2f758c1d8836f75fc2ad"
    },
    "kernelspec": {
      "display_name": "eunil_py38",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8.11"
    },
    "colab": {
      "name": "[Baseline]_ResNet50 + LSTM.ipynb",
      "provenance": [],
      "include_colab_link": true
    },
    "accelerator": "GPU",
    "widgets": {
      "application/vnd.jupyter.widget-state+json": {
        "39402eeb04b04d9d88d768394ff73b6f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_d6bb2eb8b02945d48af342145b40e4fc",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_8502b42e16284d0a9ba5b5b75e8c437e",
              "IPY_MODEL_db306ca77caf48ec994775b698d8d3fd",
              "IPY_MODEL_3a92d44d30d645af853000d73d2b2c19"
            ]
          }
        },
        "d6bb2eb8b02945d48af342145b40e4fc": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "8502b42e16284d0a9ba5b5b75e8c437e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_d2dbea2385af4331b9c9ff2a91b17a15",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": "100%",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_552de2377e4f4481862ea88877fde4be"
          }
        },
        "db306ca77caf48ec994775b698d8d3fd": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_87e0e639eb78442b989a06d90a761961",
            "_dom_classes": [],
            "description": "",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 102530333,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 102530333,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_0c60a8a47ac24ff2985ab96af5fd5c95"
          }
        },
        "3a92d44d30d645af853000d73d2b2c19": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_c3dea4e42e534f4cb158f921b7315a1b",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 97.8M/97.8M [00:00&lt;00:00, 145MB/s]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_a5633d83259d4de3b07e7191c99c4252"
          }
        },
        "d2dbea2385af4331b9c9ff2a91b17a15": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "552de2377e4f4481862ea88877fde4be": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "87e0e639eb78442b989a06d90a761961": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "0c60a8a47ac24ff2985ab96af5fd5c95": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "c3dea4e42e534f4cb158f921b7315a1b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "a5633d83259d4de3b07e7191c99c4252": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        }
      }
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}